# coding: utf-8

"""
    Discourse API Documentation

    This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 

    The version of the OpenAPI document: latest
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from discourse_python_sdk import schemas  # noqa: F401


class TopicsGetSingleTopicResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "has_deleted",
            "chunk_size",
            "deleted_by",
            "slow_mode_enabled_until",
            "post_stream",
            "bookmarks",
            "timeline_lookup",
            "fancy_title",
            "actions_summary",
            "draft",
            "draft_sequence",
            "details",
            "draft_key",
            "id",
            "tags_descriptions",
            "slug",
            "like_count",
            "visible",
            "image_url",
            "reply_count",
            "deleted_at",
            "tags",
            "show_read_indicator",
            "pinned_until",
            "user_id",
            "highest_post_number",
            "unpinned",
            "pinned",
            "suggested_topics",
            "featured_link",
            "created_at",
            "topic_timer",
            "slow_mode_seconds",
            "title",
            "archived",
            "has_summary",
            "word_count",
            "category_id",
            "pinned_at",
            "summarizable",
            "views",
            "last_posted_at",
            "message_bus_last_id",
            "bookmarked",
            "pinned_globally",
            "archetype",
            "participant_count",
            "closed",
            "thumbnails",
            "posts_count",
        }
        
        class properties:
            
            
            class tags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.AnyTypeSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tags':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            title = schemas.StrSchema
            
            
            class post_stream(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "stream",
                        "posts",
                    }
                    
                    class properties:
                        
                        
                        class posts(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        required = {
                                            "flair_color",
                                            "moderator",
                                            "wiki",
                                            "trust_level",
                                            "score",
                                            "can_view_edit_history",
                                            "reviewable_score_count",
                                            "actions_summary",
                                            "incoming_link_count",
                                            "can_delete",
                                            "post_type",
                                            "id",
                                            "readers_count",
                                            "edit_reason",
                                            "read",
                                            "cooked",
                                            "reply_count",
                                            "reply_to_post_number",
                                            "deleted_at",
                                            "version",
                                            "user_id",
                                            "can_recover",
                                            "name",
                                            "user_title",
                                            "post_number",
                                            "hidden",
                                            "can_wiki",
                                            "admin",
                                            "created_at",
                                            "updated_at",
                                            "topic_id",
                                            "quote_count",
                                            "avatar_template",
                                            "bookmarked",
                                            "reads",
                                            "can_edit",
                                            "staff",
                                            "flair_url",
                                            "flair_bg_color",
                                            "reviewable_score_pending_count",
                                            "reviewable_id",
                                            "primary_group_name",
                                            "link_counts",
                                            "user_deleted",
                                            "yours",
                                            "flair_name",
                                            "topic_slug",
                                            "display_username",
                                            "username",
                                        }
                                        
                                        class properties:
                                            version = schemas.IntSchema
                                            id = schemas.IntSchema
                                            name = schemas.StrSchema
                                            username = schemas.StrSchema
                                            avatar_template = schemas.StrSchema
                                            created_at = schemas.StrSchema
                                            cooked = schemas.StrSchema
                                            post_number = schemas.IntSchema
                                            post_type = schemas.IntSchema
                                            updated_at = schemas.StrSchema
                                            reply_count = schemas.IntSchema
                                            reply_to_post_number = schemas.AnyTypeSchema
                                            quote_count = schemas.IntSchema
                                            incoming_link_count = schemas.IntSchema
                                            reads = schemas.IntSchema
                                            readers_count = schemas.IntSchema
                                            score = schemas.NumberSchema
                                            yours = schemas.BoolSchema
                                            topic_id = schemas.IntSchema
                                            topic_slug = schemas.StrSchema
                                            display_username = schemas.StrSchema
                                            primary_group_name = schemas.AnyTypeSchema
                                            flair_name = schemas.AnyTypeSchema
                                            flair_url = schemas.AnyTypeSchema
                                            flair_bg_color = schemas.AnyTypeSchema
                                            flair_color = schemas.AnyTypeSchema
                                            can_edit = schemas.BoolSchema
                                            can_delete = schemas.BoolSchema
                                            can_recover = schemas.BoolSchema
                                            can_see_hidden_post = schemas.BoolSchema
                                            can_wiki = schemas.BoolSchema
                                            
                                            
                                            class link_counts(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    
                                                    class items(
                                                        schemas.DictSchema
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            required = {
                                                                "internal",
                                                                "reflection",
                                                                "clicks",
                                                                "title",
                                                                "url",
                                                            }
                                                            
                                                            class properties:
                                                                title = schemas.StrSchema
                                                                url = schemas.StrSchema
                                                                internal = schemas.BoolSchema
                                                                reflection = schemas.BoolSchema
                                                                clicks = schemas.IntSchema
                                                                __annotations__ = {
                                                                    "title": title,
                                                                    "url": url,
                                                                    "internal": internal,
                                                                    "reflection": reflection,
                                                                    "clicks": clicks,
                                                                }
                                                        
                                                        internal: MetaOapg.properties.internal
                                                        reflection: MetaOapg.properties.reflection
                                                        clicks: MetaOapg.properties.clicks
                                                        title: MetaOapg.properties.title
                                                        url: MetaOapg.properties.url
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["internal"]) -> MetaOapg.properties.internal: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["reflection"]) -> MetaOapg.properties.reflection: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["clicks"]) -> MetaOapg.properties.clicks: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                        
                                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "url", "internal", "reflection", "clicks", ], str]):
                                                            # dict_instance[name] accessor
                                                            return super().__getitem__(name)
                                                        
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["internal"]) -> MetaOapg.properties.internal: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["reflection"]) -> MetaOapg.properties.reflection: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["clicks"]) -> MetaOapg.properties.clicks: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                        
                                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "url", "internal", "reflection", "clicks", ], str]):
                                                            return super().get_item_oapg(name)
                                                        
                                                    
                                                        def __new__(
                                                            cls,
                                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                                            internal: typing.Union[MetaOapg.properties.internal, bool, ],
                                                            reflection: typing.Union[MetaOapg.properties.reflection, bool, ],
                                                            clicks: typing.Union[MetaOapg.properties.clicks, decimal.Decimal, int, ],
                                                            title: typing.Union[MetaOapg.properties.title, str, ],
                                                            url: typing.Union[MetaOapg.properties.url, str, ],
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                        ) -> 'items':
                                                            return super().__new__(
                                                                cls,
                                                                *args,
                                                                internal=internal,
                                                                reflection=reflection,
                                                                clicks=clicks,
                                                                title=title,
                                                                url=url,
                                                                _configuration=_configuration,
                                                                **kwargs,
                                                            )
                                            
                                                def __new__(
                                                    cls,
                                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'link_counts':
                                                    return super().__new__(
                                                        cls,
                                                        arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            read = schemas.BoolSchema
                                            user_title = schemas.AnyTypeSchema
                                            bookmarked = schemas.BoolSchema
                                            
                                            
                                            class actions_summary(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    
                                                    class items(
                                                        schemas.DictSchema
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            required = {
                                                                "can_act",
                                                                "id",
                                                            }
                                                            
                                                            class properties:
                                                                id = schemas.IntSchema
                                                                can_act = schemas.BoolSchema
                                                                __annotations__ = {
                                                                    "id": id,
                                                                    "can_act": can_act,
                                                                }
                                                        
                                                        can_act: MetaOapg.properties.can_act
                                                        id: MetaOapg.properties.id
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["can_act"]) -> MetaOapg.properties.can_act: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                        
                                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "can_act", ], str]):
                                                            # dict_instance[name] accessor
                                                            return super().__getitem__(name)
                                                        
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["can_act"]) -> MetaOapg.properties.can_act: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                        
                                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "can_act", ], str]):
                                                            return super().get_item_oapg(name)
                                                        
                                                    
                                                        def __new__(
                                                            cls,
                                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                                            can_act: typing.Union[MetaOapg.properties.can_act, bool, ],
                                                            id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                        ) -> 'items':
                                                            return super().__new__(
                                                                cls,
                                                                *args,
                                                                can_act=can_act,
                                                                id=id,
                                                                _configuration=_configuration,
                                                                **kwargs,
                                                            )
                                            
                                                def __new__(
                                                    cls,
                                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'actions_summary':
                                                    return super().__new__(
                                                        cls,
                                                        arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            moderator = schemas.BoolSchema
                                            admin = schemas.BoolSchema
                                            staff = schemas.BoolSchema
                                            user_id = schemas.IntSchema
                                            hidden = schemas.BoolSchema
                                            trust_level = schemas.IntSchema
                                            deleted_at = schemas.AnyTypeSchema
                                            user_deleted = schemas.BoolSchema
                                            edit_reason = schemas.AnyTypeSchema
                                            can_view_edit_history = schemas.BoolSchema
                                            wiki = schemas.BoolSchema
                                            reviewable_id = schemas.IntSchema
                                            reviewable_score_count = schemas.IntSchema
                                            reviewable_score_pending_count = schemas.IntSchema
                                            __annotations__ = {
                                                "version": version,
                                                "id": id,
                                                "name": name,
                                                "username": username,
                                                "avatar_template": avatar_template,
                                                "created_at": created_at,
                                                "cooked": cooked,
                                                "post_number": post_number,
                                                "post_type": post_type,
                                                "updated_at": updated_at,
                                                "reply_count": reply_count,
                                                "reply_to_post_number": reply_to_post_number,
                                                "quote_count": quote_count,
                                                "incoming_link_count": incoming_link_count,
                                                "reads": reads,
                                                "readers_count": readers_count,
                                                "score": score,
                                                "yours": yours,
                                                "topic_id": topic_id,
                                                "topic_slug": topic_slug,
                                                "display_username": display_username,
                                                "primary_group_name": primary_group_name,
                                                "flair_name": flair_name,
                                                "flair_url": flair_url,
                                                "flair_bg_color": flair_bg_color,
                                                "flair_color": flair_color,
                                                "can_edit": can_edit,
                                                "can_delete": can_delete,
                                                "can_recover": can_recover,
                                                "can_see_hidden_post": can_see_hidden_post,
                                                "can_wiki": can_wiki,
                                                "link_counts": link_counts,
                                                "read": read,
                                                "user_title": user_title,
                                                "bookmarked": bookmarked,
                                                "actions_summary": actions_summary,
                                                "moderator": moderator,
                                                "admin": admin,
                                                "staff": staff,
                                                "user_id": user_id,
                                                "hidden": hidden,
                                                "trust_level": trust_level,
                                                "deleted_at": deleted_at,
                                                "user_deleted": user_deleted,
                                                "edit_reason": edit_reason,
                                                "can_view_edit_history": can_view_edit_history,
                                                "wiki": wiki,
                                                "reviewable_id": reviewable_id,
                                                "reviewable_score_count": reviewable_score_count,
                                                "reviewable_score_pending_count": reviewable_score_pending_count,
                                            }
                                    
                                    flair_color: MetaOapg.properties.flair_color
                                    moderator: MetaOapg.properties.moderator
                                    wiki: MetaOapg.properties.wiki
                                    trust_level: MetaOapg.properties.trust_level
                                    score: MetaOapg.properties.score
                                    can_view_edit_history: MetaOapg.properties.can_view_edit_history
                                    reviewable_score_count: MetaOapg.properties.reviewable_score_count
                                    actions_summary: MetaOapg.properties.actions_summary
                                    incoming_link_count: MetaOapg.properties.incoming_link_count
                                    can_delete: MetaOapg.properties.can_delete
                                    post_type: MetaOapg.properties.post_type
                                    id: MetaOapg.properties.id
                                    readers_count: MetaOapg.properties.readers_count
                                    edit_reason: MetaOapg.properties.edit_reason
                                    read: MetaOapg.properties.read
                                    cooked: MetaOapg.properties.cooked
                                    reply_count: MetaOapg.properties.reply_count
                                    reply_to_post_number: MetaOapg.properties.reply_to_post_number
                                    deleted_at: MetaOapg.properties.deleted_at
                                    version: MetaOapg.properties.version
                                    user_id: MetaOapg.properties.user_id
                                    can_recover: MetaOapg.properties.can_recover
                                    name: MetaOapg.properties.name
                                    user_title: MetaOapg.properties.user_title
                                    post_number: MetaOapg.properties.post_number
                                    hidden: MetaOapg.properties.hidden
                                    can_wiki: MetaOapg.properties.can_wiki
                                    admin: MetaOapg.properties.admin
                                    created_at: MetaOapg.properties.created_at
                                    updated_at: MetaOapg.properties.updated_at
                                    topic_id: MetaOapg.properties.topic_id
                                    quote_count: MetaOapg.properties.quote_count
                                    avatar_template: MetaOapg.properties.avatar_template
                                    bookmarked: MetaOapg.properties.bookmarked
                                    reads: MetaOapg.properties.reads
                                    can_edit: MetaOapg.properties.can_edit
                                    staff: MetaOapg.properties.staff
                                    flair_url: MetaOapg.properties.flair_url
                                    flair_bg_color: MetaOapg.properties.flair_bg_color
                                    reviewable_score_pending_count: MetaOapg.properties.reviewable_score_pending_count
                                    reviewable_id: MetaOapg.properties.reviewable_id
                                    primary_group_name: MetaOapg.properties.primary_group_name
                                    link_counts: MetaOapg.properties.link_counts
                                    user_deleted: MetaOapg.properties.user_deleted
                                    yours: MetaOapg.properties.yours
                                    flair_name: MetaOapg.properties.flair_name
                                    topic_slug: MetaOapg.properties.topic_slug
                                    display_username: MetaOapg.properties.display_username
                                    username: MetaOapg.properties.username
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["avatar_template"]) -> MetaOapg.properties.avatar_template: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["cooked"]) -> MetaOapg.properties.cooked: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["post_number"]) -> MetaOapg.properties.post_number: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["post_type"]) -> MetaOapg.properties.post_type: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["reply_count"]) -> MetaOapg.properties.reply_count: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["reply_to_post_number"]) -> MetaOapg.properties.reply_to_post_number: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["quote_count"]) -> MetaOapg.properties.quote_count: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["incoming_link_count"]) -> MetaOapg.properties.incoming_link_count: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["reads"]) -> MetaOapg.properties.reads: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["readers_count"]) -> MetaOapg.properties.readers_count: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["score"]) -> MetaOapg.properties.score: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["yours"]) -> MetaOapg.properties.yours: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["topic_id"]) -> MetaOapg.properties.topic_id: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["topic_slug"]) -> MetaOapg.properties.topic_slug: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["display_username"]) -> MetaOapg.properties.display_username: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["primary_group_name"]) -> MetaOapg.properties.primary_group_name: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["flair_name"]) -> MetaOapg.properties.flair_name: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["flair_url"]) -> MetaOapg.properties.flair_url: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["flair_bg_color"]) -> MetaOapg.properties.flair_bg_color: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["flair_color"]) -> MetaOapg.properties.flair_color: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["can_edit"]) -> MetaOapg.properties.can_edit: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["can_delete"]) -> MetaOapg.properties.can_delete: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["can_recover"]) -> MetaOapg.properties.can_recover: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["can_see_hidden_post"]) -> MetaOapg.properties.can_see_hidden_post: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["can_wiki"]) -> MetaOapg.properties.can_wiki: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["link_counts"]) -> MetaOapg.properties.link_counts: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["read"]) -> MetaOapg.properties.read: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["user_title"]) -> MetaOapg.properties.user_title: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["bookmarked"]) -> MetaOapg.properties.bookmarked: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["actions_summary"]) -> MetaOapg.properties.actions_summary: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["moderator"]) -> MetaOapg.properties.moderator: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["admin"]) -> MetaOapg.properties.admin: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["staff"]) -> MetaOapg.properties.staff: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["hidden"]) -> MetaOapg.properties.hidden: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["trust_level"]) -> MetaOapg.properties.trust_level: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["deleted_at"]) -> MetaOapg.properties.deleted_at: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["user_deleted"]) -> MetaOapg.properties.user_deleted: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["edit_reason"]) -> MetaOapg.properties.edit_reason: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["can_view_edit_history"]) -> MetaOapg.properties.can_view_edit_history: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["wiki"]) -> MetaOapg.properties.wiki: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["reviewable_id"]) -> MetaOapg.properties.reviewable_id: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["reviewable_score_count"]) -> MetaOapg.properties.reviewable_score_count: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["reviewable_score_pending_count"]) -> MetaOapg.properties.reviewable_score_pending_count: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", "id", "name", "username", "avatar_template", "created_at", "cooked", "post_number", "post_type", "updated_at", "reply_count", "reply_to_post_number", "quote_count", "incoming_link_count", "reads", "readers_count", "score", "yours", "topic_id", "topic_slug", "display_username", "primary_group_name", "flair_name", "flair_url", "flair_bg_color", "flair_color", "can_edit", "can_delete", "can_recover", "can_see_hidden_post", "can_wiki", "link_counts", "read", "user_title", "bookmarked", "actions_summary", "moderator", "admin", "staff", "user_id", "hidden", "trust_level", "deleted_at", "user_deleted", "edit_reason", "can_view_edit_history", "wiki", "reviewable_id", "reviewable_score_count", "reviewable_score_pending_count", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["avatar_template"]) -> MetaOapg.properties.avatar_template: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["cooked"]) -> MetaOapg.properties.cooked: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["post_number"]) -> MetaOapg.properties.post_number: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["post_type"]) -> MetaOapg.properties.post_type: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["reply_count"]) -> MetaOapg.properties.reply_count: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["reply_to_post_number"]) -> MetaOapg.properties.reply_to_post_number: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["quote_count"]) -> MetaOapg.properties.quote_count: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["incoming_link_count"]) -> MetaOapg.properties.incoming_link_count: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["reads"]) -> MetaOapg.properties.reads: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["readers_count"]) -> MetaOapg.properties.readers_count: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["score"]) -> MetaOapg.properties.score: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["yours"]) -> MetaOapg.properties.yours: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["topic_id"]) -> MetaOapg.properties.topic_id: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["topic_slug"]) -> MetaOapg.properties.topic_slug: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["display_username"]) -> MetaOapg.properties.display_username: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["primary_group_name"]) -> MetaOapg.properties.primary_group_name: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["flair_name"]) -> MetaOapg.properties.flair_name: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["flair_url"]) -> MetaOapg.properties.flair_url: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["flair_bg_color"]) -> MetaOapg.properties.flair_bg_color: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["flair_color"]) -> MetaOapg.properties.flair_color: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["can_edit"]) -> MetaOapg.properties.can_edit: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["can_delete"]) -> MetaOapg.properties.can_delete: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["can_recover"]) -> MetaOapg.properties.can_recover: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["can_see_hidden_post"]) -> typing.Union[MetaOapg.properties.can_see_hidden_post, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["can_wiki"]) -> MetaOapg.properties.can_wiki: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["link_counts"]) -> MetaOapg.properties.link_counts: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["read"]) -> MetaOapg.properties.read: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["user_title"]) -> MetaOapg.properties.user_title: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["bookmarked"]) -> MetaOapg.properties.bookmarked: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["actions_summary"]) -> MetaOapg.properties.actions_summary: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["moderator"]) -> MetaOapg.properties.moderator: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["admin"]) -> MetaOapg.properties.admin: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["staff"]) -> MetaOapg.properties.staff: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["hidden"]) -> MetaOapg.properties.hidden: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["trust_level"]) -> MetaOapg.properties.trust_level: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["deleted_at"]) -> MetaOapg.properties.deleted_at: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["user_deleted"]) -> MetaOapg.properties.user_deleted: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["edit_reason"]) -> MetaOapg.properties.edit_reason: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["can_view_edit_history"]) -> MetaOapg.properties.can_view_edit_history: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["wiki"]) -> MetaOapg.properties.wiki: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["reviewable_id"]) -> MetaOapg.properties.reviewable_id: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["reviewable_score_count"]) -> MetaOapg.properties.reviewable_score_count: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["reviewable_score_pending_count"]) -> MetaOapg.properties.reviewable_score_pending_count: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", "id", "name", "username", "avatar_template", "created_at", "cooked", "post_number", "post_type", "updated_at", "reply_count", "reply_to_post_number", "quote_count", "incoming_link_count", "reads", "readers_count", "score", "yours", "topic_id", "topic_slug", "display_username", "primary_group_name", "flair_name", "flair_url", "flair_bg_color", "flair_color", "can_edit", "can_delete", "can_recover", "can_see_hidden_post", "can_wiki", "link_counts", "read", "user_title", "bookmarked", "actions_summary", "moderator", "admin", "staff", "user_id", "hidden", "trust_level", "deleted_at", "user_deleted", "edit_reason", "can_view_edit_history", "wiki", "reviewable_id", "reviewable_score_count", "reviewable_score_pending_count", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        flair_color: typing.Union[MetaOapg.properties.flair_color, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        moderator: typing.Union[MetaOapg.properties.moderator, bool, ],
                                        wiki: typing.Union[MetaOapg.properties.wiki, bool, ],
                                        trust_level: typing.Union[MetaOapg.properties.trust_level, decimal.Decimal, int, ],
                                        score: typing.Union[MetaOapg.properties.score, decimal.Decimal, int, float, ],
                                        can_view_edit_history: typing.Union[MetaOapg.properties.can_view_edit_history, bool, ],
                                        reviewable_score_count: typing.Union[MetaOapg.properties.reviewable_score_count, decimal.Decimal, int, ],
                                        actions_summary: typing.Union[MetaOapg.properties.actions_summary, list, tuple, ],
                                        incoming_link_count: typing.Union[MetaOapg.properties.incoming_link_count, decimal.Decimal, int, ],
                                        can_delete: typing.Union[MetaOapg.properties.can_delete, bool, ],
                                        post_type: typing.Union[MetaOapg.properties.post_type, decimal.Decimal, int, ],
                                        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
                                        readers_count: typing.Union[MetaOapg.properties.readers_count, decimal.Decimal, int, ],
                                        edit_reason: typing.Union[MetaOapg.properties.edit_reason, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        read: typing.Union[MetaOapg.properties.read, bool, ],
                                        cooked: typing.Union[MetaOapg.properties.cooked, str, ],
                                        reply_count: typing.Union[MetaOapg.properties.reply_count, decimal.Decimal, int, ],
                                        reply_to_post_number: typing.Union[MetaOapg.properties.reply_to_post_number, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        deleted_at: typing.Union[MetaOapg.properties.deleted_at, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        version: typing.Union[MetaOapg.properties.version, decimal.Decimal, int, ],
                                        user_id: typing.Union[MetaOapg.properties.user_id, decimal.Decimal, int, ],
                                        can_recover: typing.Union[MetaOapg.properties.can_recover, bool, ],
                                        name: typing.Union[MetaOapg.properties.name, str, ],
                                        user_title: typing.Union[MetaOapg.properties.user_title, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        post_number: typing.Union[MetaOapg.properties.post_number, decimal.Decimal, int, ],
                                        hidden: typing.Union[MetaOapg.properties.hidden, bool, ],
                                        can_wiki: typing.Union[MetaOapg.properties.can_wiki, bool, ],
                                        admin: typing.Union[MetaOapg.properties.admin, bool, ],
                                        created_at: typing.Union[MetaOapg.properties.created_at, str, ],
                                        updated_at: typing.Union[MetaOapg.properties.updated_at, str, ],
                                        topic_id: typing.Union[MetaOapg.properties.topic_id, decimal.Decimal, int, ],
                                        quote_count: typing.Union[MetaOapg.properties.quote_count, decimal.Decimal, int, ],
                                        avatar_template: typing.Union[MetaOapg.properties.avatar_template, str, ],
                                        bookmarked: typing.Union[MetaOapg.properties.bookmarked, bool, ],
                                        reads: typing.Union[MetaOapg.properties.reads, decimal.Decimal, int, ],
                                        can_edit: typing.Union[MetaOapg.properties.can_edit, bool, ],
                                        staff: typing.Union[MetaOapg.properties.staff, bool, ],
                                        flair_url: typing.Union[MetaOapg.properties.flair_url, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        flair_bg_color: typing.Union[MetaOapg.properties.flair_bg_color, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        reviewable_score_pending_count: typing.Union[MetaOapg.properties.reviewable_score_pending_count, decimal.Decimal, int, ],
                                        reviewable_id: typing.Union[MetaOapg.properties.reviewable_id, decimal.Decimal, int, ],
                                        primary_group_name: typing.Union[MetaOapg.properties.primary_group_name, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        link_counts: typing.Union[MetaOapg.properties.link_counts, list, tuple, ],
                                        user_deleted: typing.Union[MetaOapg.properties.user_deleted, bool, ],
                                        yours: typing.Union[MetaOapg.properties.yours, bool, ],
                                        flair_name: typing.Union[MetaOapg.properties.flair_name, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        topic_slug: typing.Union[MetaOapg.properties.topic_slug, str, ],
                                        display_username: typing.Union[MetaOapg.properties.display_username, str, ],
                                        username: typing.Union[MetaOapg.properties.username, str, ],
                                        can_see_hidden_post: typing.Union[MetaOapg.properties.can_see_hidden_post, bool, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            flair_color=flair_color,
                                            moderator=moderator,
                                            wiki=wiki,
                                            trust_level=trust_level,
                                            score=score,
                                            can_view_edit_history=can_view_edit_history,
                                            reviewable_score_count=reviewable_score_count,
                                            actions_summary=actions_summary,
                                            incoming_link_count=incoming_link_count,
                                            can_delete=can_delete,
                                            post_type=post_type,
                                            id=id,
                                            readers_count=readers_count,
                                            edit_reason=edit_reason,
                                            read=read,
                                            cooked=cooked,
                                            reply_count=reply_count,
                                            reply_to_post_number=reply_to_post_number,
                                            deleted_at=deleted_at,
                                            version=version,
                                            user_id=user_id,
                                            can_recover=can_recover,
                                            name=name,
                                            user_title=user_title,
                                            post_number=post_number,
                                            hidden=hidden,
                                            can_wiki=can_wiki,
                                            admin=admin,
                                            created_at=created_at,
                                            updated_at=updated_at,
                                            topic_id=topic_id,
                                            quote_count=quote_count,
                                            avatar_template=avatar_template,
                                            bookmarked=bookmarked,
                                            reads=reads,
                                            can_edit=can_edit,
                                            staff=staff,
                                            flair_url=flair_url,
                                            flair_bg_color=flair_bg_color,
                                            reviewable_score_pending_count=reviewable_score_pending_count,
                                            reviewable_id=reviewable_id,
                                            primary_group_name=primary_group_name,
                                            link_counts=link_counts,
                                            user_deleted=user_deleted,
                                            yours=yours,
                                            flair_name=flair_name,
                                            topic_slug=topic_slug,
                                            display_username=display_username,
                                            username=username,
                                            can_see_hidden_post=can_see_hidden_post,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'posts':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class stream(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'stream':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "posts": posts,
                            "stream": stream,
                        }
                
                stream: MetaOapg.properties.stream
                posts: MetaOapg.properties.posts
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["posts"]) -> MetaOapg.properties.posts: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["stream"]) -> MetaOapg.properties.stream: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["posts", "stream", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["posts"]) -> MetaOapg.properties.posts: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["stream"]) -> MetaOapg.properties.stream: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["posts", "stream", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    stream: typing.Union[MetaOapg.properties.stream, list, tuple, ],
                    posts: typing.Union[MetaOapg.properties.posts, list, tuple, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'post_stream':
                    return super().__new__(
                        cls,
                        *args,
                        stream=stream,
                        posts=posts,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class timeline_lookup(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.AnyTypeSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'timeline_lookup':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class suggested_topics(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "unpinned",
                                "pinned",
                                "featured_link",
                                "created_at",
                                "bumped",
                                "title",
                                "liked",
                                "archived",
                                "fancy_title",
                                "category_id",
                                "id",
                                "tags_descriptions",
                                "bumped_at",
                                "slug",
                                "views",
                                "last_posted_at",
                                "like_count",
                                "visible",
                                "bookmarked",
                                "image_url",
                                "posters",
                                "reply_count",
                                "tags",
                                "archetype",
                                "highest_post_number",
                                "closed",
                                "excerpt",
                                "unseen",
                                "posts_count",
                            }
                            
                            class properties:
                                
                                
                                class tags(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.AnyTypeSchema
                                
                                    def __new__(
                                        cls,
                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'tags':
                                        return super().__new__(
                                            cls,
                                            arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                title = schemas.StrSchema
                                id = schemas.IntSchema
                                fancy_title = schemas.StrSchema
                                slug = schemas.StrSchema
                                posts_count = schemas.IntSchema
                                reply_count = schemas.IntSchema
                                highest_post_number = schemas.IntSchema
                                image_url = schemas.AnyTypeSchema
                                created_at = schemas.StrSchema
                                last_posted_at = schemas.AnyTypeSchema
                                bumped = schemas.BoolSchema
                                bumped_at = schemas.StrSchema
                                archetype = schemas.StrSchema
                                unseen = schemas.BoolSchema
                                pinned = schemas.BoolSchema
                                unpinned = schemas.AnyTypeSchema
                                excerpt = schemas.StrSchema
                                visible = schemas.BoolSchema
                                closed = schemas.BoolSchema
                                archived = schemas.BoolSchema
                                bookmarked = schemas.AnyTypeSchema
                                liked = schemas.AnyTypeSchema
                                tags_descriptions = schemas.DictSchema
                                like_count = schemas.IntSchema
                                views = schemas.IntSchema
                                category_id = schemas.IntSchema
                                featured_link = schemas.AnyTypeSchema
                                
                                
                                class posters(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class items(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                required = {
                                                    "description",
                                                    "extras",
                                                    "user",
                                                }
                                                
                                                class properties:
                                                    description = schemas.StrSchema
                                                    extras = schemas.StrSchema
                                                    
                                                    
                                                    class user(
                                                        schemas.DictSchema
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            required = {
                                                                "name",
                                                                "id",
                                                                "avatar_template",
                                                                "username",
                                                            }
                                                            
                                                            class properties:
                                                                id = schemas.IntSchema
                                                                username = schemas.StrSchema
                                                                name = schemas.StrSchema
                                                                avatar_template = schemas.StrSchema
                                                                __annotations__ = {
                                                                    "id": id,
                                                                    "username": username,
                                                                    "name": name,
                                                                    "avatar_template": avatar_template,
                                                                }
                                                        
                                                        name: MetaOapg.properties.name
                                                        id: MetaOapg.properties.id
                                                        avatar_template: MetaOapg.properties.avatar_template
                                                        username: MetaOapg.properties.username
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["avatar_template"]) -> MetaOapg.properties.avatar_template: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                        
                                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "username", "name", "avatar_template", ], str]):
                                                            # dict_instance[name] accessor
                                                            return super().__getitem__(name)
                                                        
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["avatar_template"]) -> MetaOapg.properties.avatar_template: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                        
                                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "username", "name", "avatar_template", ], str]):
                                                            return super().get_item_oapg(name)
                                                        
                                                    
                                                        def __new__(
                                                            cls,
                                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                                            name: typing.Union[MetaOapg.properties.name, str, ],
                                                            id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
                                                            avatar_template: typing.Union[MetaOapg.properties.avatar_template, str, ],
                                                            username: typing.Union[MetaOapg.properties.username, str, ],
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                        ) -> 'user':
                                                            return super().__new__(
                                                                cls,
                                                                *args,
                                                                name=name,
                                                                id=id,
                                                                avatar_template=avatar_template,
                                                                username=username,
                                                                _configuration=_configuration,
                                                                **kwargs,
                                                            )
                                                    __annotations__ = {
                                                        "description": description,
                                                        "extras": extras,
                                                        "user": user,
                                                    }
                                            
                                            description: MetaOapg.properties.description
                                            extras: MetaOapg.properties.extras
                                            user: MetaOapg.properties.user
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["extras"]) -> MetaOapg.properties.extras: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "extras", "user", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["extras"]) -> MetaOapg.properties.extras: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "extras", "user", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *args: typing.Union[dict, frozendict.frozendict, ],
                                                description: typing.Union[MetaOapg.properties.description, str, ],
                                                extras: typing.Union[MetaOapg.properties.extras, str, ],
                                                user: typing.Union[MetaOapg.properties.user, dict, frozendict.frozendict, ],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'items':
                                                return super().__new__(
                                                    cls,
                                                    *args,
                                                    description=description,
                                                    extras=extras,
                                                    user=user,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                
                                    def __new__(
                                        cls,
                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'posters':
                                        return super().__new__(
                                            cls,
                                            arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                __annotations__ = {
                                    "tags": tags,
                                    "title": title,
                                    "id": id,
                                    "fancy_title": fancy_title,
                                    "slug": slug,
                                    "posts_count": posts_count,
                                    "reply_count": reply_count,
                                    "highest_post_number": highest_post_number,
                                    "image_url": image_url,
                                    "created_at": created_at,
                                    "last_posted_at": last_posted_at,
                                    "bumped": bumped,
                                    "bumped_at": bumped_at,
                                    "archetype": archetype,
                                    "unseen": unseen,
                                    "pinned": pinned,
                                    "unpinned": unpinned,
                                    "excerpt": excerpt,
                                    "visible": visible,
                                    "closed": closed,
                                    "archived": archived,
                                    "bookmarked": bookmarked,
                                    "liked": liked,
                                    "tags_descriptions": tags_descriptions,
                                    "like_count": like_count,
                                    "views": views,
                                    "category_id": category_id,
                                    "featured_link": featured_link,
                                    "posters": posters,
                                }
                        
                        unpinned: MetaOapg.properties.unpinned
                        pinned: MetaOapg.properties.pinned
                        featured_link: MetaOapg.properties.featured_link
                        created_at: MetaOapg.properties.created_at
                        bumped: MetaOapg.properties.bumped
                        title: MetaOapg.properties.title
                        liked: MetaOapg.properties.liked
                        archived: MetaOapg.properties.archived
                        fancy_title: MetaOapg.properties.fancy_title
                        category_id: MetaOapg.properties.category_id
                        id: MetaOapg.properties.id
                        tags_descriptions: MetaOapg.properties.tags_descriptions
                        bumped_at: MetaOapg.properties.bumped_at
                        slug: MetaOapg.properties.slug
                        views: MetaOapg.properties.views
                        last_posted_at: MetaOapg.properties.last_posted_at
                        like_count: MetaOapg.properties.like_count
                        visible: MetaOapg.properties.visible
                        bookmarked: MetaOapg.properties.bookmarked
                        image_url: MetaOapg.properties.image_url
                        posters: MetaOapg.properties.posters
                        reply_count: MetaOapg.properties.reply_count
                        tags: MetaOapg.properties.tags
                        archetype: MetaOapg.properties.archetype
                        highest_post_number: MetaOapg.properties.highest_post_number
                        closed: MetaOapg.properties.closed
                        excerpt: MetaOapg.properties.excerpt
                        unseen: MetaOapg.properties.unseen
                        posts_count: MetaOapg.properties.posts_count
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["fancy_title"]) -> MetaOapg.properties.fancy_title: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["posts_count"]) -> MetaOapg.properties.posts_count: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["reply_count"]) -> MetaOapg.properties.reply_count: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["highest_post_number"]) -> MetaOapg.properties.highest_post_number: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["image_url"]) -> MetaOapg.properties.image_url: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["last_posted_at"]) -> MetaOapg.properties.last_posted_at: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["bumped"]) -> MetaOapg.properties.bumped: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["bumped_at"]) -> MetaOapg.properties.bumped_at: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["archetype"]) -> MetaOapg.properties.archetype: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["unseen"]) -> MetaOapg.properties.unseen: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["pinned"]) -> MetaOapg.properties.pinned: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["unpinned"]) -> MetaOapg.properties.unpinned: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["excerpt"]) -> MetaOapg.properties.excerpt: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["visible"]) -> MetaOapg.properties.visible: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["closed"]) -> MetaOapg.properties.closed: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["archived"]) -> MetaOapg.properties.archived: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["bookmarked"]) -> MetaOapg.properties.bookmarked: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["liked"]) -> MetaOapg.properties.liked: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["tags_descriptions"]) -> MetaOapg.properties.tags_descriptions: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["like_count"]) -> MetaOapg.properties.like_count: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["views"]) -> MetaOapg.properties.views: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["category_id"]) -> MetaOapg.properties.category_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["featured_link"]) -> MetaOapg.properties.featured_link: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["posters"]) -> MetaOapg.properties.posters: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["tags", "title", "id", "fancy_title", "slug", "posts_count", "reply_count", "highest_post_number", "image_url", "created_at", "last_posted_at", "bumped", "bumped_at", "archetype", "unseen", "pinned", "unpinned", "excerpt", "visible", "closed", "archived", "bookmarked", "liked", "tags_descriptions", "like_count", "views", "category_id", "featured_link", "posters", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["fancy_title"]) -> MetaOapg.properties.fancy_title: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["posts_count"]) -> MetaOapg.properties.posts_count: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["reply_count"]) -> MetaOapg.properties.reply_count: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["highest_post_number"]) -> MetaOapg.properties.highest_post_number: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["image_url"]) -> MetaOapg.properties.image_url: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["last_posted_at"]) -> MetaOapg.properties.last_posted_at: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["bumped"]) -> MetaOapg.properties.bumped: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["bumped_at"]) -> MetaOapg.properties.bumped_at: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["archetype"]) -> MetaOapg.properties.archetype: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["unseen"]) -> MetaOapg.properties.unseen: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["pinned"]) -> MetaOapg.properties.pinned: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["unpinned"]) -> MetaOapg.properties.unpinned: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["excerpt"]) -> MetaOapg.properties.excerpt: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["visible"]) -> MetaOapg.properties.visible: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["closed"]) -> MetaOapg.properties.closed: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["archived"]) -> MetaOapg.properties.archived: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["bookmarked"]) -> MetaOapg.properties.bookmarked: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["liked"]) -> MetaOapg.properties.liked: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["tags_descriptions"]) -> MetaOapg.properties.tags_descriptions: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["like_count"]) -> MetaOapg.properties.like_count: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["views"]) -> MetaOapg.properties.views: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["category_id"]) -> MetaOapg.properties.category_id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["featured_link"]) -> MetaOapg.properties.featured_link: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["posters"]) -> MetaOapg.properties.posters: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tags", "title", "id", "fancy_title", "slug", "posts_count", "reply_count", "highest_post_number", "image_url", "created_at", "last_posted_at", "bumped", "bumped_at", "archetype", "unseen", "pinned", "unpinned", "excerpt", "visible", "closed", "archived", "bookmarked", "liked", "tags_descriptions", "like_count", "views", "category_id", "featured_link", "posters", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            unpinned: typing.Union[MetaOapg.properties.unpinned, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            pinned: typing.Union[MetaOapg.properties.pinned, bool, ],
                            featured_link: typing.Union[MetaOapg.properties.featured_link, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            created_at: typing.Union[MetaOapg.properties.created_at, str, ],
                            bumped: typing.Union[MetaOapg.properties.bumped, bool, ],
                            title: typing.Union[MetaOapg.properties.title, str, ],
                            liked: typing.Union[MetaOapg.properties.liked, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            archived: typing.Union[MetaOapg.properties.archived, bool, ],
                            fancy_title: typing.Union[MetaOapg.properties.fancy_title, str, ],
                            category_id: typing.Union[MetaOapg.properties.category_id, decimal.Decimal, int, ],
                            id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
                            tags_descriptions: typing.Union[MetaOapg.properties.tags_descriptions, dict, frozendict.frozendict, ],
                            bumped_at: typing.Union[MetaOapg.properties.bumped_at, str, ],
                            slug: typing.Union[MetaOapg.properties.slug, str, ],
                            views: typing.Union[MetaOapg.properties.views, decimal.Decimal, int, ],
                            last_posted_at: typing.Union[MetaOapg.properties.last_posted_at, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            like_count: typing.Union[MetaOapg.properties.like_count, decimal.Decimal, int, ],
                            visible: typing.Union[MetaOapg.properties.visible, bool, ],
                            bookmarked: typing.Union[MetaOapg.properties.bookmarked, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            image_url: typing.Union[MetaOapg.properties.image_url, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            posters: typing.Union[MetaOapg.properties.posters, list, tuple, ],
                            reply_count: typing.Union[MetaOapg.properties.reply_count, decimal.Decimal, int, ],
                            tags: typing.Union[MetaOapg.properties.tags, list, tuple, ],
                            archetype: typing.Union[MetaOapg.properties.archetype, str, ],
                            highest_post_number: typing.Union[MetaOapg.properties.highest_post_number, decimal.Decimal, int, ],
                            closed: typing.Union[MetaOapg.properties.closed, bool, ],
                            excerpt: typing.Union[MetaOapg.properties.excerpt, str, ],
                            unseen: typing.Union[MetaOapg.properties.unseen, bool, ],
                            posts_count: typing.Union[MetaOapg.properties.posts_count, decimal.Decimal, int, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                unpinned=unpinned,
                                pinned=pinned,
                                featured_link=featured_link,
                                created_at=created_at,
                                bumped=bumped,
                                title=title,
                                liked=liked,
                                archived=archived,
                                fancy_title=fancy_title,
                                category_id=category_id,
                                id=id,
                                tags_descriptions=tags_descriptions,
                                bumped_at=bumped_at,
                                slug=slug,
                                views=views,
                                last_posted_at=last_posted_at,
                                like_count=like_count,
                                visible=visible,
                                bookmarked=bookmarked,
                                image_url=image_url,
                                posters=posters,
                                reply_count=reply_count,
                                tags=tags,
                                archetype=archetype,
                                highest_post_number=highest_post_number,
                                closed=closed,
                                excerpt=excerpt,
                                unseen=unseen,
                                posts_count=posts_count,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'suggested_topics':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            tags_descriptions = schemas.DictSchema
            id = schemas.IntSchema
            fancy_title = schemas.StrSchema
            posts_count = schemas.IntSchema
            created_at = schemas.StrSchema
            views = schemas.IntSchema
            reply_count = schemas.IntSchema
            like_count = schemas.IntSchema
            last_posted_at = schemas.AnyTypeSchema
            visible = schemas.BoolSchema
            closed = schemas.BoolSchema
            archived = schemas.BoolSchema
            has_summary = schemas.BoolSchema
            archetype = schemas.StrSchema
            slug = schemas.StrSchema
            category_id = schemas.IntSchema
            word_count = schemas.AnyTypeSchema
            deleted_at = schemas.AnyTypeSchema
            user_id = schemas.IntSchema
            featured_link = schemas.AnyTypeSchema
            pinned_globally = schemas.BoolSchema
            pinned_at = schemas.AnyTypeSchema
            pinned_until = schemas.AnyTypeSchema
            image_url = schemas.AnyTypeSchema
            slow_mode_seconds = schemas.IntSchema
            draft = schemas.AnyTypeSchema
            draft_key = schemas.StrSchema
            draft_sequence = schemas.IntSchema
            unpinned = schemas.AnyTypeSchema
            pinned = schemas.BoolSchema
            highest_post_number = schemas.AnyTypeSchema
            deleted_by = schemas.AnyTypeSchema
            has_deleted = schemas.BoolSchema
            
            
            class actions_summary(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "hidden",
                                "count",
                                "can_act",
                                "id",
                            }
                            
                            class properties:
                                id = schemas.IntSchema
                                count = schemas.IntSchema
                                hidden = schemas.BoolSchema
                                can_act = schemas.BoolSchema
                                __annotations__ = {
                                    "id": id,
                                    "count": count,
                                    "hidden": hidden,
                                    "can_act": can_act,
                                }
                        
                        hidden: MetaOapg.properties.hidden
                        count: MetaOapg.properties.count
                        can_act: MetaOapg.properties.can_act
                        id: MetaOapg.properties.id
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["hidden"]) -> MetaOapg.properties.hidden: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["can_act"]) -> MetaOapg.properties.can_act: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "count", "hidden", "can_act", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["hidden"]) -> MetaOapg.properties.hidden: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["can_act"]) -> MetaOapg.properties.can_act: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "count", "hidden", "can_act", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            hidden: typing.Union[MetaOapg.properties.hidden, bool, ],
                            count: typing.Union[MetaOapg.properties.count, decimal.Decimal, int, ],
                            can_act: typing.Union[MetaOapg.properties.can_act, bool, ],
                            id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                hidden=hidden,
                                count=count,
                                can_act=can_act,
                                id=id,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'actions_summary':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            chunk_size = schemas.IntSchema
            bookmarked = schemas.BoolSchema
            
            
            class bookmarks(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.AnyTypeSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'bookmarks':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            topic_timer = schemas.AnyTypeSchema
            message_bus_last_id = schemas.IntSchema
            participant_count = schemas.IntSchema
            show_read_indicator = schemas.BoolSchema
            thumbnails = schemas.AnyTypeSchema
            slow_mode_enabled_until = schemas.AnyTypeSchema
            summarizable = schemas.BoolSchema
            
            
            class details(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "last_poster",
                        "can_reply_as_new_topic",
                        "can_edit",
                        "can_pin_unpin_topic",
                        "created_by",
                        "can_moderate_category",
                        "can_remove_allowed_users",
                        "can_split_merge_topic",
                        "can_delete",
                        "can_remove_self_id",
                        "can_toggle_topic_visibility",
                        "can_edit_staff_notes",
                        "notification_level",
                        "can_archive_topic",
                        "can_create_post",
                        "can_close_topic",
                        "can_convert_topic",
                        "can_move_posts",
                        "can_review_topic",
                    }
                    
                    class properties:
                        can_edit = schemas.BoolSchema
                        notification_level = schemas.IntSchema
                        can_move_posts = schemas.BoolSchema
                        can_delete = schemas.BoolSchema
                        can_remove_allowed_users = schemas.BoolSchema
                        can_create_post = schemas.BoolSchema
                        can_reply_as_new_topic = schemas.BoolSchema
                        can_invite_to = schemas.BoolSchema
                        can_invite_via_email = schemas.BoolSchema
                        can_flag_topic = schemas.BoolSchema
                        can_convert_topic = schemas.BoolSchema
                        can_review_topic = schemas.BoolSchema
                        can_close_topic = schemas.BoolSchema
                        can_archive_topic = schemas.BoolSchema
                        can_split_merge_topic = schemas.BoolSchema
                        can_edit_staff_notes = schemas.BoolSchema
                        can_toggle_topic_visibility = schemas.BoolSchema
                        can_pin_unpin_topic = schemas.BoolSchema
                        can_moderate_category = schemas.BoolSchema
                        can_remove_self_id = schemas.IntSchema
                        
                        
                        class participants(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        required = {
                                            "flair_color",
                                            "moderator",
                                            "admin",
                                            "trust_level",
                                            "flair_url",
                                            "flair_bg_color",
                                            "primary_group_name",
                                            "name",
                                            "id",
                                            "post_count",
                                            "avatar_template",
                                            "flair_name",
                                            "username",
                                        }
                                        
                                        class properties:
                                            id = schemas.IntSchema
                                            username = schemas.StrSchema
                                            name = schemas.StrSchema
                                            avatar_template = schemas.StrSchema
                                            post_count = schemas.IntSchema
                                            primary_group_name = schemas.AnyTypeSchema
                                            flair_name = schemas.AnyTypeSchema
                                            flair_url = schemas.AnyTypeSchema
                                            flair_color = schemas.AnyTypeSchema
                                            flair_bg_color = schemas.AnyTypeSchema
                                            flair_group_id = schemas.AnyTypeSchema
                                            admin = schemas.BoolSchema
                                            moderator = schemas.BoolSchema
                                            trust_level = schemas.IntSchema
                                            __annotations__ = {
                                                "id": id,
                                                "username": username,
                                                "name": name,
                                                "avatar_template": avatar_template,
                                                "post_count": post_count,
                                                "primary_group_name": primary_group_name,
                                                "flair_name": flair_name,
                                                "flair_url": flair_url,
                                                "flair_color": flair_color,
                                                "flair_bg_color": flair_bg_color,
                                                "flair_group_id": flair_group_id,
                                                "admin": admin,
                                                "moderator": moderator,
                                                "trust_level": trust_level,
                                            }
                                    
                                    flair_color: MetaOapg.properties.flair_color
                                    moderator: MetaOapg.properties.moderator
                                    admin: MetaOapg.properties.admin
                                    trust_level: MetaOapg.properties.trust_level
                                    flair_url: MetaOapg.properties.flair_url
                                    flair_bg_color: MetaOapg.properties.flair_bg_color
                                    primary_group_name: MetaOapg.properties.primary_group_name
                                    name: MetaOapg.properties.name
                                    id: MetaOapg.properties.id
                                    post_count: MetaOapg.properties.post_count
                                    avatar_template: MetaOapg.properties.avatar_template
                                    flair_name: MetaOapg.properties.flair_name
                                    username: MetaOapg.properties.username
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["avatar_template"]) -> MetaOapg.properties.avatar_template: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["post_count"]) -> MetaOapg.properties.post_count: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["primary_group_name"]) -> MetaOapg.properties.primary_group_name: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["flair_name"]) -> MetaOapg.properties.flair_name: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["flair_url"]) -> MetaOapg.properties.flair_url: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["flair_color"]) -> MetaOapg.properties.flair_color: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["flair_bg_color"]) -> MetaOapg.properties.flair_bg_color: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["flair_group_id"]) -> MetaOapg.properties.flair_group_id: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["admin"]) -> MetaOapg.properties.admin: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["moderator"]) -> MetaOapg.properties.moderator: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["trust_level"]) -> MetaOapg.properties.trust_level: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "username", "name", "avatar_template", "post_count", "primary_group_name", "flair_name", "flair_url", "flair_color", "flair_bg_color", "flair_group_id", "admin", "moderator", "trust_level", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["avatar_template"]) -> MetaOapg.properties.avatar_template: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["post_count"]) -> MetaOapg.properties.post_count: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["primary_group_name"]) -> MetaOapg.properties.primary_group_name: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["flair_name"]) -> MetaOapg.properties.flair_name: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["flair_url"]) -> MetaOapg.properties.flair_url: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["flair_color"]) -> MetaOapg.properties.flair_color: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["flair_bg_color"]) -> MetaOapg.properties.flair_bg_color: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["flair_group_id"]) -> typing.Union[MetaOapg.properties.flair_group_id, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["admin"]) -> MetaOapg.properties.admin: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["moderator"]) -> MetaOapg.properties.moderator: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["trust_level"]) -> MetaOapg.properties.trust_level: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "username", "name", "avatar_template", "post_count", "primary_group_name", "flair_name", "flair_url", "flair_color", "flair_bg_color", "flair_group_id", "admin", "moderator", "trust_level", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        flair_color: typing.Union[MetaOapg.properties.flair_color, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        moderator: typing.Union[MetaOapg.properties.moderator, bool, ],
                                        admin: typing.Union[MetaOapg.properties.admin, bool, ],
                                        trust_level: typing.Union[MetaOapg.properties.trust_level, decimal.Decimal, int, ],
                                        flair_url: typing.Union[MetaOapg.properties.flair_url, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        flair_bg_color: typing.Union[MetaOapg.properties.flair_bg_color, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        primary_group_name: typing.Union[MetaOapg.properties.primary_group_name, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        name: typing.Union[MetaOapg.properties.name, str, ],
                                        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
                                        post_count: typing.Union[MetaOapg.properties.post_count, decimal.Decimal, int, ],
                                        avatar_template: typing.Union[MetaOapg.properties.avatar_template, str, ],
                                        flair_name: typing.Union[MetaOapg.properties.flair_name, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        username: typing.Union[MetaOapg.properties.username, str, ],
                                        flair_group_id: typing.Union[MetaOapg.properties.flair_group_id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            flair_color=flair_color,
                                            moderator=moderator,
                                            admin=admin,
                                            trust_level=trust_level,
                                            flair_url=flair_url,
                                            flair_bg_color=flair_bg_color,
                                            primary_group_name=primary_group_name,
                                            name=name,
                                            id=id,
                                            post_count=post_count,
                                            avatar_template=avatar_template,
                                            flair_name=flair_name,
                                            username=username,
                                            flair_group_id=flair_group_id,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'participants':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class created_by(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                required = {
                                    "name",
                                    "id",
                                    "avatar_template",
                                    "username",
                                }
                                
                                class properties:
                                    id = schemas.IntSchema
                                    username = schemas.StrSchema
                                    name = schemas.StrSchema
                                    avatar_template = schemas.StrSchema
                                    __annotations__ = {
                                        "id": id,
                                        "username": username,
                                        "name": name,
                                        "avatar_template": avatar_template,
                                    }
                            
                            name: MetaOapg.properties.name
                            id: MetaOapg.properties.id
                            avatar_template: MetaOapg.properties.avatar_template
                            username: MetaOapg.properties.username
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["avatar_template"]) -> MetaOapg.properties.avatar_template: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "username", "name", "avatar_template", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["avatar_template"]) -> MetaOapg.properties.avatar_template: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "username", "name", "avatar_template", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                name: typing.Union[MetaOapg.properties.name, str, ],
                                id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
                                avatar_template: typing.Union[MetaOapg.properties.avatar_template, str, ],
                                username: typing.Union[MetaOapg.properties.username, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'created_by':
                                return super().__new__(
                                    cls,
                                    *args,
                                    name=name,
                                    id=id,
                                    avatar_template=avatar_template,
                                    username=username,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class last_poster(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                required = {
                                    "name",
                                    "id",
                                    "avatar_template",
                                    "username",
                                }
                                
                                class properties:
                                    id = schemas.IntSchema
                                    username = schemas.StrSchema
                                    name = schemas.StrSchema
                                    avatar_template = schemas.StrSchema
                                    __annotations__ = {
                                        "id": id,
                                        "username": username,
                                        "name": name,
                                        "avatar_template": avatar_template,
                                    }
                            
                            name: MetaOapg.properties.name
                            id: MetaOapg.properties.id
                            avatar_template: MetaOapg.properties.avatar_template
                            username: MetaOapg.properties.username
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["avatar_template"]) -> MetaOapg.properties.avatar_template: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "username", "name", "avatar_template", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["avatar_template"]) -> MetaOapg.properties.avatar_template: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "username", "name", "avatar_template", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                name: typing.Union[MetaOapg.properties.name, str, ],
                                id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
                                avatar_template: typing.Union[MetaOapg.properties.avatar_template, str, ],
                                username: typing.Union[MetaOapg.properties.username, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'last_poster':
                                return super().__new__(
                                    cls,
                                    *args,
                                    name=name,
                                    id=id,
                                    avatar_template=avatar_template,
                                    username=username,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "can_edit": can_edit,
                            "notification_level": notification_level,
                            "can_move_posts": can_move_posts,
                            "can_delete": can_delete,
                            "can_remove_allowed_users": can_remove_allowed_users,
                            "can_create_post": can_create_post,
                            "can_reply_as_new_topic": can_reply_as_new_topic,
                            "can_invite_to": can_invite_to,
                            "can_invite_via_email": can_invite_via_email,
                            "can_flag_topic": can_flag_topic,
                            "can_convert_topic": can_convert_topic,
                            "can_review_topic": can_review_topic,
                            "can_close_topic": can_close_topic,
                            "can_archive_topic": can_archive_topic,
                            "can_split_merge_topic": can_split_merge_topic,
                            "can_edit_staff_notes": can_edit_staff_notes,
                            "can_toggle_topic_visibility": can_toggle_topic_visibility,
                            "can_pin_unpin_topic": can_pin_unpin_topic,
                            "can_moderate_category": can_moderate_category,
                            "can_remove_self_id": can_remove_self_id,
                            "participants": participants,
                            "created_by": created_by,
                            "last_poster": last_poster,
                        }
                
                last_poster: MetaOapg.properties.last_poster
                can_reply_as_new_topic: MetaOapg.properties.can_reply_as_new_topic
                can_edit: MetaOapg.properties.can_edit
                can_pin_unpin_topic: MetaOapg.properties.can_pin_unpin_topic
                created_by: MetaOapg.properties.created_by
                can_moderate_category: MetaOapg.properties.can_moderate_category
                can_remove_allowed_users: MetaOapg.properties.can_remove_allowed_users
                can_split_merge_topic: MetaOapg.properties.can_split_merge_topic
                can_delete: MetaOapg.properties.can_delete
                can_remove_self_id: MetaOapg.properties.can_remove_self_id
                can_toggle_topic_visibility: MetaOapg.properties.can_toggle_topic_visibility
                can_edit_staff_notes: MetaOapg.properties.can_edit_staff_notes
                notification_level: MetaOapg.properties.notification_level
                can_archive_topic: MetaOapg.properties.can_archive_topic
                can_create_post: MetaOapg.properties.can_create_post
                can_close_topic: MetaOapg.properties.can_close_topic
                can_convert_topic: MetaOapg.properties.can_convert_topic
                can_move_posts: MetaOapg.properties.can_move_posts
                can_review_topic: MetaOapg.properties.can_review_topic
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_edit"]) -> MetaOapg.properties.can_edit: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["notification_level"]) -> MetaOapg.properties.notification_level: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_move_posts"]) -> MetaOapg.properties.can_move_posts: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_delete"]) -> MetaOapg.properties.can_delete: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_remove_allowed_users"]) -> MetaOapg.properties.can_remove_allowed_users: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_create_post"]) -> MetaOapg.properties.can_create_post: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_reply_as_new_topic"]) -> MetaOapg.properties.can_reply_as_new_topic: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_invite_to"]) -> MetaOapg.properties.can_invite_to: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_invite_via_email"]) -> MetaOapg.properties.can_invite_via_email: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_flag_topic"]) -> MetaOapg.properties.can_flag_topic: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_convert_topic"]) -> MetaOapg.properties.can_convert_topic: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_review_topic"]) -> MetaOapg.properties.can_review_topic: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_close_topic"]) -> MetaOapg.properties.can_close_topic: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_archive_topic"]) -> MetaOapg.properties.can_archive_topic: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_split_merge_topic"]) -> MetaOapg.properties.can_split_merge_topic: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_edit_staff_notes"]) -> MetaOapg.properties.can_edit_staff_notes: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_toggle_topic_visibility"]) -> MetaOapg.properties.can_toggle_topic_visibility: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_pin_unpin_topic"]) -> MetaOapg.properties.can_pin_unpin_topic: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_moderate_category"]) -> MetaOapg.properties.can_moderate_category: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_remove_self_id"]) -> MetaOapg.properties.can_remove_self_id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["participants"]) -> MetaOapg.properties.participants: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["created_by"]) -> MetaOapg.properties.created_by: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["last_poster"]) -> MetaOapg.properties.last_poster: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["can_edit", "notification_level", "can_move_posts", "can_delete", "can_remove_allowed_users", "can_create_post", "can_reply_as_new_topic", "can_invite_to", "can_invite_via_email", "can_flag_topic", "can_convert_topic", "can_review_topic", "can_close_topic", "can_archive_topic", "can_split_merge_topic", "can_edit_staff_notes", "can_toggle_topic_visibility", "can_pin_unpin_topic", "can_moderate_category", "can_remove_self_id", "participants", "created_by", "last_poster", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_edit"]) -> MetaOapg.properties.can_edit: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["notification_level"]) -> MetaOapg.properties.notification_level: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_move_posts"]) -> MetaOapg.properties.can_move_posts: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_delete"]) -> MetaOapg.properties.can_delete: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_remove_allowed_users"]) -> MetaOapg.properties.can_remove_allowed_users: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_create_post"]) -> MetaOapg.properties.can_create_post: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_reply_as_new_topic"]) -> MetaOapg.properties.can_reply_as_new_topic: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_invite_to"]) -> typing.Union[MetaOapg.properties.can_invite_to, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_invite_via_email"]) -> typing.Union[MetaOapg.properties.can_invite_via_email, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_flag_topic"]) -> typing.Union[MetaOapg.properties.can_flag_topic, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_convert_topic"]) -> MetaOapg.properties.can_convert_topic: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_review_topic"]) -> MetaOapg.properties.can_review_topic: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_close_topic"]) -> MetaOapg.properties.can_close_topic: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_archive_topic"]) -> MetaOapg.properties.can_archive_topic: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_split_merge_topic"]) -> MetaOapg.properties.can_split_merge_topic: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_edit_staff_notes"]) -> MetaOapg.properties.can_edit_staff_notes: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_toggle_topic_visibility"]) -> MetaOapg.properties.can_toggle_topic_visibility: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_pin_unpin_topic"]) -> MetaOapg.properties.can_pin_unpin_topic: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_moderate_category"]) -> MetaOapg.properties.can_moderate_category: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_remove_self_id"]) -> MetaOapg.properties.can_remove_self_id: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["participants"]) -> typing.Union[MetaOapg.properties.participants, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["created_by"]) -> MetaOapg.properties.created_by: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["last_poster"]) -> MetaOapg.properties.last_poster: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["can_edit", "notification_level", "can_move_posts", "can_delete", "can_remove_allowed_users", "can_create_post", "can_reply_as_new_topic", "can_invite_to", "can_invite_via_email", "can_flag_topic", "can_convert_topic", "can_review_topic", "can_close_topic", "can_archive_topic", "can_split_merge_topic", "can_edit_staff_notes", "can_toggle_topic_visibility", "can_pin_unpin_topic", "can_moderate_category", "can_remove_self_id", "participants", "created_by", "last_poster", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    last_poster: typing.Union[MetaOapg.properties.last_poster, dict, frozendict.frozendict, ],
                    can_reply_as_new_topic: typing.Union[MetaOapg.properties.can_reply_as_new_topic, bool, ],
                    can_edit: typing.Union[MetaOapg.properties.can_edit, bool, ],
                    can_pin_unpin_topic: typing.Union[MetaOapg.properties.can_pin_unpin_topic, bool, ],
                    created_by: typing.Union[MetaOapg.properties.created_by, dict, frozendict.frozendict, ],
                    can_moderate_category: typing.Union[MetaOapg.properties.can_moderate_category, bool, ],
                    can_remove_allowed_users: typing.Union[MetaOapg.properties.can_remove_allowed_users, bool, ],
                    can_split_merge_topic: typing.Union[MetaOapg.properties.can_split_merge_topic, bool, ],
                    can_delete: typing.Union[MetaOapg.properties.can_delete, bool, ],
                    can_remove_self_id: typing.Union[MetaOapg.properties.can_remove_self_id, decimal.Decimal, int, ],
                    can_toggle_topic_visibility: typing.Union[MetaOapg.properties.can_toggle_topic_visibility, bool, ],
                    can_edit_staff_notes: typing.Union[MetaOapg.properties.can_edit_staff_notes, bool, ],
                    notification_level: typing.Union[MetaOapg.properties.notification_level, decimal.Decimal, int, ],
                    can_archive_topic: typing.Union[MetaOapg.properties.can_archive_topic, bool, ],
                    can_create_post: typing.Union[MetaOapg.properties.can_create_post, bool, ],
                    can_close_topic: typing.Union[MetaOapg.properties.can_close_topic, bool, ],
                    can_convert_topic: typing.Union[MetaOapg.properties.can_convert_topic, bool, ],
                    can_move_posts: typing.Union[MetaOapg.properties.can_move_posts, bool, ],
                    can_review_topic: typing.Union[MetaOapg.properties.can_review_topic, bool, ],
                    can_invite_to: typing.Union[MetaOapg.properties.can_invite_to, bool, schemas.Unset] = schemas.unset,
                    can_invite_via_email: typing.Union[MetaOapg.properties.can_invite_via_email, bool, schemas.Unset] = schemas.unset,
                    can_flag_topic: typing.Union[MetaOapg.properties.can_flag_topic, bool, schemas.Unset] = schemas.unset,
                    participants: typing.Union[MetaOapg.properties.participants, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'details':
                    return super().__new__(
                        cls,
                        *args,
                        last_poster=last_poster,
                        can_reply_as_new_topic=can_reply_as_new_topic,
                        can_edit=can_edit,
                        can_pin_unpin_topic=can_pin_unpin_topic,
                        created_by=created_by,
                        can_moderate_category=can_moderate_category,
                        can_remove_allowed_users=can_remove_allowed_users,
                        can_split_merge_topic=can_split_merge_topic,
                        can_delete=can_delete,
                        can_remove_self_id=can_remove_self_id,
                        can_toggle_topic_visibility=can_toggle_topic_visibility,
                        can_edit_staff_notes=can_edit_staff_notes,
                        notification_level=notification_level,
                        can_archive_topic=can_archive_topic,
                        can_create_post=can_create_post,
                        can_close_topic=can_close_topic,
                        can_convert_topic=can_convert_topic,
                        can_move_posts=can_move_posts,
                        can_review_topic=can_review_topic,
                        can_invite_to=can_invite_to,
                        can_invite_via_email=can_invite_via_email,
                        can_flag_topic=can_flag_topic,
                        participants=participants,
                        _configuration=_configuration,
                        **kwargs,
                    )
            current_post_number = schemas.IntSchema
            __annotations__ = {
                "tags": tags,
                "title": title,
                "post_stream": post_stream,
                "timeline_lookup": timeline_lookup,
                "suggested_topics": suggested_topics,
                "tags_descriptions": tags_descriptions,
                "id": id,
                "fancy_title": fancy_title,
                "posts_count": posts_count,
                "created_at": created_at,
                "views": views,
                "reply_count": reply_count,
                "like_count": like_count,
                "last_posted_at": last_posted_at,
                "visible": visible,
                "closed": closed,
                "archived": archived,
                "has_summary": has_summary,
                "archetype": archetype,
                "slug": slug,
                "category_id": category_id,
                "word_count": word_count,
                "deleted_at": deleted_at,
                "user_id": user_id,
                "featured_link": featured_link,
                "pinned_globally": pinned_globally,
                "pinned_at": pinned_at,
                "pinned_until": pinned_until,
                "image_url": image_url,
                "slow_mode_seconds": slow_mode_seconds,
                "draft": draft,
                "draft_key": draft_key,
                "draft_sequence": draft_sequence,
                "unpinned": unpinned,
                "pinned": pinned,
                "highest_post_number": highest_post_number,
                "deleted_by": deleted_by,
                "has_deleted": has_deleted,
                "actions_summary": actions_summary,
                "chunk_size": chunk_size,
                "bookmarked": bookmarked,
                "bookmarks": bookmarks,
                "topic_timer": topic_timer,
                "message_bus_last_id": message_bus_last_id,
                "participant_count": participant_count,
                "show_read_indicator": show_read_indicator,
                "thumbnails": thumbnails,
                "slow_mode_enabled_until": slow_mode_enabled_until,
                "summarizable": summarizable,
                "details": details,
                "current_post_number": current_post_number,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    has_deleted: MetaOapg.properties.has_deleted
    chunk_size: MetaOapg.properties.chunk_size
    deleted_by: MetaOapg.properties.deleted_by
    slow_mode_enabled_until: MetaOapg.properties.slow_mode_enabled_until
    post_stream: MetaOapg.properties.post_stream
    bookmarks: MetaOapg.properties.bookmarks
    timeline_lookup: MetaOapg.properties.timeline_lookup
    fancy_title: MetaOapg.properties.fancy_title
    actions_summary: MetaOapg.properties.actions_summary
    draft: MetaOapg.properties.draft
    draft_sequence: MetaOapg.properties.draft_sequence
    details: MetaOapg.properties.details
    draft_key: MetaOapg.properties.draft_key
    id: MetaOapg.properties.id
    tags_descriptions: MetaOapg.properties.tags_descriptions
    slug: MetaOapg.properties.slug
    like_count: MetaOapg.properties.like_count
    visible: MetaOapg.properties.visible
    image_url: MetaOapg.properties.image_url
    reply_count: MetaOapg.properties.reply_count
    deleted_at: MetaOapg.properties.deleted_at
    tags: MetaOapg.properties.tags
    show_read_indicator: MetaOapg.properties.show_read_indicator
    pinned_until: MetaOapg.properties.pinned_until
    user_id: MetaOapg.properties.user_id
    highest_post_number: MetaOapg.properties.highest_post_number
    unpinned: MetaOapg.properties.unpinned
    pinned: MetaOapg.properties.pinned
    suggested_topics: MetaOapg.properties.suggested_topics
    featured_link: MetaOapg.properties.featured_link
    created_at: MetaOapg.properties.created_at
    topic_timer: MetaOapg.properties.topic_timer
    slow_mode_seconds: MetaOapg.properties.slow_mode_seconds
    title: MetaOapg.properties.title
    archived: MetaOapg.properties.archived
    has_summary: MetaOapg.properties.has_summary
    word_count: MetaOapg.properties.word_count
    category_id: MetaOapg.properties.category_id
    pinned_at: MetaOapg.properties.pinned_at
    summarizable: MetaOapg.properties.summarizable
    views: MetaOapg.properties.views
    last_posted_at: MetaOapg.properties.last_posted_at
    message_bus_last_id: MetaOapg.properties.message_bus_last_id
    bookmarked: MetaOapg.properties.bookmarked
    pinned_globally: MetaOapg.properties.pinned_globally
    archetype: MetaOapg.properties.archetype
    participant_count: MetaOapg.properties.participant_count
    closed: MetaOapg.properties.closed
    thumbnails: MetaOapg.properties.thumbnails
    posts_count: MetaOapg.properties.posts_count
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_deleted"]) -> MetaOapg.properties.has_deleted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chunk_size"]) -> MetaOapg.properties.chunk_size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleted_by"]) -> MetaOapg.properties.deleted_by: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slow_mode_enabled_until"]) -> MetaOapg.properties.slow_mode_enabled_until: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["post_stream"]) -> MetaOapg.properties.post_stream: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bookmarks"]) -> MetaOapg.properties.bookmarks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeline_lookup"]) -> MetaOapg.properties.timeline_lookup: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fancy_title"]) -> MetaOapg.properties.fancy_title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actions_summary"]) -> MetaOapg.properties.actions_summary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["draft"]) -> MetaOapg.properties.draft: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["draft_sequence"]) -> MetaOapg.properties.draft_sequence: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["details"]) -> MetaOapg.properties.details: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["draft_key"]) -> MetaOapg.properties.draft_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags_descriptions"]) -> MetaOapg.properties.tags_descriptions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["like_count"]) -> MetaOapg.properties.like_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["visible"]) -> MetaOapg.properties.visible: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image_url"]) -> MetaOapg.properties.image_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reply_count"]) -> MetaOapg.properties.reply_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleted_at"]) -> MetaOapg.properties.deleted_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["show_read_indicator"]) -> MetaOapg.properties.show_read_indicator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pinned_until"]) -> MetaOapg.properties.pinned_until: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["highest_post_number"]) -> MetaOapg.properties.highest_post_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unpinned"]) -> MetaOapg.properties.unpinned: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pinned"]) -> MetaOapg.properties.pinned: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["suggested_topics"]) -> MetaOapg.properties.suggested_topics: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["featured_link"]) -> MetaOapg.properties.featured_link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["topic_timer"]) -> MetaOapg.properties.topic_timer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slow_mode_seconds"]) -> MetaOapg.properties.slow_mode_seconds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["archived"]) -> MetaOapg.properties.archived: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_summary"]) -> MetaOapg.properties.has_summary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["word_count"]) -> MetaOapg.properties.word_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category_id"]) -> MetaOapg.properties.category_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pinned_at"]) -> MetaOapg.properties.pinned_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["summarizable"]) -> MetaOapg.properties.summarizable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["views"]) -> MetaOapg.properties.views: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_posted_at"]) -> MetaOapg.properties.last_posted_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message_bus_last_id"]) -> MetaOapg.properties.message_bus_last_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bookmarked"]) -> MetaOapg.properties.bookmarked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pinned_globally"]) -> MetaOapg.properties.pinned_globally: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["archetype"]) -> MetaOapg.properties.archetype: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["participant_count"]) -> MetaOapg.properties.participant_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["closed"]) -> MetaOapg.properties.closed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thumbnails"]) -> MetaOapg.properties.thumbnails: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["posts_count"]) -> MetaOapg.properties.posts_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["current_post_number"]) -> MetaOapg.properties.current_post_number: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["has_deleted"], typing_extensions.Literal["chunk_size"], typing_extensions.Literal["deleted_by"], typing_extensions.Literal["slow_mode_enabled_until"], typing_extensions.Literal["post_stream"], typing_extensions.Literal["bookmarks"], typing_extensions.Literal["timeline_lookup"], typing_extensions.Literal["fancy_title"], typing_extensions.Literal["actions_summary"], typing_extensions.Literal["draft"], typing_extensions.Literal["draft_sequence"], typing_extensions.Literal["details"], typing_extensions.Literal["draft_key"], typing_extensions.Literal["id"], typing_extensions.Literal["tags_descriptions"], typing_extensions.Literal["slug"], typing_extensions.Literal["like_count"], typing_extensions.Literal["visible"], typing_extensions.Literal["image_url"], typing_extensions.Literal["reply_count"], typing_extensions.Literal["deleted_at"], typing_extensions.Literal["tags"], typing_extensions.Literal["show_read_indicator"], typing_extensions.Literal["pinned_until"], typing_extensions.Literal["user_id"], typing_extensions.Literal["highest_post_number"], typing_extensions.Literal["unpinned"], typing_extensions.Literal["pinned"], typing_extensions.Literal["suggested_topics"], typing_extensions.Literal["featured_link"], typing_extensions.Literal["created_at"], typing_extensions.Literal["topic_timer"], typing_extensions.Literal["slow_mode_seconds"], typing_extensions.Literal["title"], typing_extensions.Literal["archived"], typing_extensions.Literal["has_summary"], typing_extensions.Literal["word_count"], typing_extensions.Literal["category_id"], typing_extensions.Literal["pinned_at"], typing_extensions.Literal["summarizable"], typing_extensions.Literal["views"], typing_extensions.Literal["last_posted_at"], typing_extensions.Literal["message_bus_last_id"], typing_extensions.Literal["bookmarked"], typing_extensions.Literal["pinned_globally"], typing_extensions.Literal["archetype"], typing_extensions.Literal["participant_count"], typing_extensions.Literal["closed"], typing_extensions.Literal["thumbnails"], typing_extensions.Literal["posts_count"], typing_extensions.Literal["current_post_number"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_deleted"]) -> MetaOapg.properties.has_deleted: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chunk_size"]) -> MetaOapg.properties.chunk_size: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleted_by"]) -> MetaOapg.properties.deleted_by: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slow_mode_enabled_until"]) -> MetaOapg.properties.slow_mode_enabled_until: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["post_stream"]) -> MetaOapg.properties.post_stream: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bookmarks"]) -> MetaOapg.properties.bookmarks: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeline_lookup"]) -> MetaOapg.properties.timeline_lookup: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fancy_title"]) -> MetaOapg.properties.fancy_title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actions_summary"]) -> MetaOapg.properties.actions_summary: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["draft"]) -> MetaOapg.properties.draft: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["draft_sequence"]) -> MetaOapg.properties.draft_sequence: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["details"]) -> MetaOapg.properties.details: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["draft_key"]) -> MetaOapg.properties.draft_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags_descriptions"]) -> MetaOapg.properties.tags_descriptions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["like_count"]) -> MetaOapg.properties.like_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["visible"]) -> MetaOapg.properties.visible: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image_url"]) -> MetaOapg.properties.image_url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reply_count"]) -> MetaOapg.properties.reply_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleted_at"]) -> MetaOapg.properties.deleted_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["show_read_indicator"]) -> MetaOapg.properties.show_read_indicator: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pinned_until"]) -> MetaOapg.properties.pinned_until: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["highest_post_number"]) -> MetaOapg.properties.highest_post_number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unpinned"]) -> MetaOapg.properties.unpinned: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pinned"]) -> MetaOapg.properties.pinned: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["suggested_topics"]) -> MetaOapg.properties.suggested_topics: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["featured_link"]) -> MetaOapg.properties.featured_link: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["topic_timer"]) -> MetaOapg.properties.topic_timer: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slow_mode_seconds"]) -> MetaOapg.properties.slow_mode_seconds: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["archived"]) -> MetaOapg.properties.archived: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_summary"]) -> MetaOapg.properties.has_summary: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["word_count"]) -> MetaOapg.properties.word_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category_id"]) -> MetaOapg.properties.category_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pinned_at"]) -> MetaOapg.properties.pinned_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["summarizable"]) -> MetaOapg.properties.summarizable: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["views"]) -> MetaOapg.properties.views: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_posted_at"]) -> MetaOapg.properties.last_posted_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message_bus_last_id"]) -> MetaOapg.properties.message_bus_last_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bookmarked"]) -> MetaOapg.properties.bookmarked: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pinned_globally"]) -> MetaOapg.properties.pinned_globally: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["archetype"]) -> MetaOapg.properties.archetype: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["participant_count"]) -> MetaOapg.properties.participant_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["closed"]) -> MetaOapg.properties.closed: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thumbnails"]) -> MetaOapg.properties.thumbnails: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["posts_count"]) -> MetaOapg.properties.posts_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["current_post_number"]) -> typing.Union[MetaOapg.properties.current_post_number, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["has_deleted"], typing_extensions.Literal["chunk_size"], typing_extensions.Literal["deleted_by"], typing_extensions.Literal["slow_mode_enabled_until"], typing_extensions.Literal["post_stream"], typing_extensions.Literal["bookmarks"], typing_extensions.Literal["timeline_lookup"], typing_extensions.Literal["fancy_title"], typing_extensions.Literal["actions_summary"], typing_extensions.Literal["draft"], typing_extensions.Literal["draft_sequence"], typing_extensions.Literal["details"], typing_extensions.Literal["draft_key"], typing_extensions.Literal["id"], typing_extensions.Literal["tags_descriptions"], typing_extensions.Literal["slug"], typing_extensions.Literal["like_count"], typing_extensions.Literal["visible"], typing_extensions.Literal["image_url"], typing_extensions.Literal["reply_count"], typing_extensions.Literal["deleted_at"], typing_extensions.Literal["tags"], typing_extensions.Literal["show_read_indicator"], typing_extensions.Literal["pinned_until"], typing_extensions.Literal["user_id"], typing_extensions.Literal["highest_post_number"], typing_extensions.Literal["unpinned"], typing_extensions.Literal["pinned"], typing_extensions.Literal["suggested_topics"], typing_extensions.Literal["featured_link"], typing_extensions.Literal["created_at"], typing_extensions.Literal["topic_timer"], typing_extensions.Literal["slow_mode_seconds"], typing_extensions.Literal["title"], typing_extensions.Literal["archived"], typing_extensions.Literal["has_summary"], typing_extensions.Literal["word_count"], typing_extensions.Literal["category_id"], typing_extensions.Literal["pinned_at"], typing_extensions.Literal["summarizable"], typing_extensions.Literal["views"], typing_extensions.Literal["last_posted_at"], typing_extensions.Literal["message_bus_last_id"], typing_extensions.Literal["bookmarked"], typing_extensions.Literal["pinned_globally"], typing_extensions.Literal["archetype"], typing_extensions.Literal["participant_count"], typing_extensions.Literal["closed"], typing_extensions.Literal["thumbnails"], typing_extensions.Literal["posts_count"], typing_extensions.Literal["current_post_number"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        has_deleted: typing.Union[MetaOapg.properties.has_deleted, bool, ],
        chunk_size: typing.Union[MetaOapg.properties.chunk_size, decimal.Decimal, int, ],
        deleted_by: typing.Union[MetaOapg.properties.deleted_by, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        slow_mode_enabled_until: typing.Union[MetaOapg.properties.slow_mode_enabled_until, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        post_stream: typing.Union[MetaOapg.properties.post_stream, dict, frozendict.frozendict, ],
        bookmarks: typing.Union[MetaOapg.properties.bookmarks, list, tuple, ],
        timeline_lookup: typing.Union[MetaOapg.properties.timeline_lookup, list, tuple, ],
        fancy_title: typing.Union[MetaOapg.properties.fancy_title, str, ],
        actions_summary: typing.Union[MetaOapg.properties.actions_summary, list, tuple, ],
        draft: typing.Union[MetaOapg.properties.draft, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        draft_sequence: typing.Union[MetaOapg.properties.draft_sequence, decimal.Decimal, int, ],
        details: typing.Union[MetaOapg.properties.details, dict, frozendict.frozendict, ],
        draft_key: typing.Union[MetaOapg.properties.draft_key, str, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        tags_descriptions: typing.Union[MetaOapg.properties.tags_descriptions, dict, frozendict.frozendict, ],
        slug: typing.Union[MetaOapg.properties.slug, str, ],
        like_count: typing.Union[MetaOapg.properties.like_count, decimal.Decimal, int, ],
        visible: typing.Union[MetaOapg.properties.visible, bool, ],
        image_url: typing.Union[MetaOapg.properties.image_url, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        reply_count: typing.Union[MetaOapg.properties.reply_count, decimal.Decimal, int, ],
        deleted_at: typing.Union[MetaOapg.properties.deleted_at, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        tags: typing.Union[MetaOapg.properties.tags, list, tuple, ],
        show_read_indicator: typing.Union[MetaOapg.properties.show_read_indicator, bool, ],
        pinned_until: typing.Union[MetaOapg.properties.pinned_until, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        user_id: typing.Union[MetaOapg.properties.user_id, decimal.Decimal, int, ],
        highest_post_number: typing.Union[MetaOapg.properties.highest_post_number, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        unpinned: typing.Union[MetaOapg.properties.unpinned, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        pinned: typing.Union[MetaOapg.properties.pinned, bool, ],
        suggested_topics: typing.Union[MetaOapg.properties.suggested_topics, list, tuple, ],
        featured_link: typing.Union[MetaOapg.properties.featured_link, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        created_at: typing.Union[MetaOapg.properties.created_at, str, ],
        topic_timer: typing.Union[MetaOapg.properties.topic_timer, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        slow_mode_seconds: typing.Union[MetaOapg.properties.slow_mode_seconds, decimal.Decimal, int, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        archived: typing.Union[MetaOapg.properties.archived, bool, ],
        has_summary: typing.Union[MetaOapg.properties.has_summary, bool, ],
        word_count: typing.Union[MetaOapg.properties.word_count, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        category_id: typing.Union[MetaOapg.properties.category_id, decimal.Decimal, int, ],
        pinned_at: typing.Union[MetaOapg.properties.pinned_at, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        summarizable: typing.Union[MetaOapg.properties.summarizable, bool, ],
        views: typing.Union[MetaOapg.properties.views, decimal.Decimal, int, ],
        last_posted_at: typing.Union[MetaOapg.properties.last_posted_at, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        message_bus_last_id: typing.Union[MetaOapg.properties.message_bus_last_id, decimal.Decimal, int, ],
        bookmarked: typing.Union[MetaOapg.properties.bookmarked, bool, ],
        pinned_globally: typing.Union[MetaOapg.properties.pinned_globally, bool, ],
        archetype: typing.Union[MetaOapg.properties.archetype, str, ],
        participant_count: typing.Union[MetaOapg.properties.participant_count, decimal.Decimal, int, ],
        closed: typing.Union[MetaOapg.properties.closed, bool, ],
        thumbnails: typing.Union[MetaOapg.properties.thumbnails, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        posts_count: typing.Union[MetaOapg.properties.posts_count, decimal.Decimal, int, ],
        current_post_number: typing.Union[MetaOapg.properties.current_post_number, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs,
    ) -> 'TopicsGetSingleTopicResponse':
        return super().__new__(
            cls,
            *args,
            has_deleted=has_deleted,
            chunk_size=chunk_size,
            deleted_by=deleted_by,
            slow_mode_enabled_until=slow_mode_enabled_until,
            post_stream=post_stream,
            bookmarks=bookmarks,
            timeline_lookup=timeline_lookup,
            fancy_title=fancy_title,
            actions_summary=actions_summary,
            draft=draft,
            draft_sequence=draft_sequence,
            details=details,
            draft_key=draft_key,
            id=id,
            tags_descriptions=tags_descriptions,
            slug=slug,
            like_count=like_count,
            visible=visible,
            image_url=image_url,
            reply_count=reply_count,
            deleted_at=deleted_at,
            tags=tags,
            show_read_indicator=show_read_indicator,
            pinned_until=pinned_until,
            user_id=user_id,
            highest_post_number=highest_post_number,
            unpinned=unpinned,
            pinned=pinned,
            suggested_topics=suggested_topics,
            featured_link=featured_link,
            created_at=created_at,
            topic_timer=topic_timer,
            slow_mode_seconds=slow_mode_seconds,
            title=title,
            archived=archived,
            has_summary=has_summary,
            word_count=word_count,
            category_id=category_id,
            pinned_at=pinned_at,
            summarizable=summarizable,
            views=views,
            last_posted_at=last_posted_at,
            message_bus_last_id=message_bus_last_id,
            bookmarked=bookmarked,
            pinned_globally=pinned_globally,
            archetype=archetype,
            participant_count=participant_count,
            closed=closed,
            thumbnails=thumbnails,
            posts_count=posts_count,
            current_post_number=current_post_number,
            _configuration=_configuration,
        )
