# coding: utf-8

"""
    Discourse API Documentation

    This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 

    The version of the OpenAPI document: latest
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from discourse_python_sdk import schemas  # noqa: F401


class SearchTermResultsResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "grouped_search_result",
            "groups",
            "categories",
            "posts",
            "users",
            "tags",
        }
        
        class properties:
            
            
            class tags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.AnyTypeSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tags':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class posts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.AnyTypeSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'posts':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class users(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.AnyTypeSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'users':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class categories(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.AnyTypeSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'categories':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class groups(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.AnyTypeSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'groups':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class grouped_search_result(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "can_create_topic",
                        "tag_ids",
                        "user_ids",
                        "search_log_id",
                        "error",
                        "more_categories",
                        "more_posts",
                        "more_users",
                        "group_ids",
                        "term",
                        "category_ids",
                        "more_full_page_results",
                        "post_ids",
                    }
                    
                    class properties:
                        more_posts = schemas.AnyTypeSchema
                        more_users = schemas.AnyTypeSchema
                        more_categories = schemas.AnyTypeSchema
                        term = schemas.StrSchema
                        search_log_id = schemas.IntSchema
                        more_full_page_results = schemas.AnyTypeSchema
                        can_create_topic = schemas.BoolSchema
                        error = schemas.AnyTypeSchema
                        
                        
                        class extra(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    items = schemas.AnyTypeSchema
                                    __annotations__ = {
                                        "items": items,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["items"]) -> MetaOapg.properties.items: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["items", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["items"]) -> typing.Union[MetaOapg.properties.items, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["items", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                items: typing.Union[MetaOapg.properties.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'extra':
                                return super().__new__(
                                    cls,
                                    *args,
                                    items=items,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class post_ids(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'post_ids':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class user_ids(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'user_ids':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class category_ids(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'category_ids':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class tag_ids(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'tag_ids':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class group_ids(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'group_ids':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "more_posts": more_posts,
                            "more_users": more_users,
                            "more_categories": more_categories,
                            "term": term,
                            "search_log_id": search_log_id,
                            "more_full_page_results": more_full_page_results,
                            "can_create_topic": can_create_topic,
                            "error": error,
                            "extra": extra,
                            "post_ids": post_ids,
                            "user_ids": user_ids,
                            "category_ids": category_ids,
                            "tag_ids": tag_ids,
                            "group_ids": group_ids,
                        }
                
                can_create_topic: MetaOapg.properties.can_create_topic
                tag_ids: MetaOapg.properties.tag_ids
                user_ids: MetaOapg.properties.user_ids
                search_log_id: MetaOapg.properties.search_log_id
                error: MetaOapg.properties.error
                more_categories: MetaOapg.properties.more_categories
                more_posts: MetaOapg.properties.more_posts
                more_users: MetaOapg.properties.more_users
                group_ids: MetaOapg.properties.group_ids
                term: MetaOapg.properties.term
                category_ids: MetaOapg.properties.category_ids
                more_full_page_results: MetaOapg.properties.more_full_page_results
                post_ids: MetaOapg.properties.post_ids
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["more_posts"]) -> MetaOapg.properties.more_posts: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["more_users"]) -> MetaOapg.properties.more_users: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["more_categories"]) -> MetaOapg.properties.more_categories: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["term"]) -> MetaOapg.properties.term: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["search_log_id"]) -> MetaOapg.properties.search_log_id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["more_full_page_results"]) -> MetaOapg.properties.more_full_page_results: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_create_topic"]) -> MetaOapg.properties.can_create_topic: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["error"]) -> MetaOapg.properties.error: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["extra"]) -> MetaOapg.properties.extra: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["post_ids"]) -> MetaOapg.properties.post_ids: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["user_ids"]) -> MetaOapg.properties.user_ids: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["category_ids"]) -> MetaOapg.properties.category_ids: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["tag_ids"]) -> MetaOapg.properties.tag_ids: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["group_ids"]) -> MetaOapg.properties.group_ids: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["more_posts", "more_users", "more_categories", "term", "search_log_id", "more_full_page_results", "can_create_topic", "error", "extra", "post_ids", "user_ids", "category_ids", "tag_ids", "group_ids", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["more_posts"]) -> MetaOapg.properties.more_posts: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["more_users"]) -> MetaOapg.properties.more_users: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["more_categories"]) -> MetaOapg.properties.more_categories: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["term"]) -> MetaOapg.properties.term: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["search_log_id"]) -> MetaOapg.properties.search_log_id: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["more_full_page_results"]) -> MetaOapg.properties.more_full_page_results: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_create_topic"]) -> MetaOapg.properties.can_create_topic: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["error"]) -> MetaOapg.properties.error: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["extra"]) -> typing.Union[MetaOapg.properties.extra, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["post_ids"]) -> MetaOapg.properties.post_ids: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["user_ids"]) -> MetaOapg.properties.user_ids: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["category_ids"]) -> MetaOapg.properties.category_ids: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["tag_ids"]) -> MetaOapg.properties.tag_ids: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["group_ids"]) -> MetaOapg.properties.group_ids: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["more_posts", "more_users", "more_categories", "term", "search_log_id", "more_full_page_results", "can_create_topic", "error", "extra", "post_ids", "user_ids", "category_ids", "tag_ids", "group_ids", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    can_create_topic: typing.Union[MetaOapg.properties.can_create_topic, bool, ],
                    tag_ids: typing.Union[MetaOapg.properties.tag_ids, list, tuple, ],
                    user_ids: typing.Union[MetaOapg.properties.user_ids, list, tuple, ],
                    search_log_id: typing.Union[MetaOapg.properties.search_log_id, decimal.Decimal, int, ],
                    error: typing.Union[MetaOapg.properties.error, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    more_categories: typing.Union[MetaOapg.properties.more_categories, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    more_posts: typing.Union[MetaOapg.properties.more_posts, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    more_users: typing.Union[MetaOapg.properties.more_users, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    group_ids: typing.Union[MetaOapg.properties.group_ids, list, tuple, ],
                    term: typing.Union[MetaOapg.properties.term, str, ],
                    category_ids: typing.Union[MetaOapg.properties.category_ids, list, tuple, ],
                    more_full_page_results: typing.Union[MetaOapg.properties.more_full_page_results, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    post_ids: typing.Union[MetaOapg.properties.post_ids, list, tuple, ],
                    extra: typing.Union[MetaOapg.properties.extra, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'grouped_search_result':
                    return super().__new__(
                        cls,
                        *args,
                        can_create_topic=can_create_topic,
                        tag_ids=tag_ids,
                        user_ids=user_ids,
                        search_log_id=search_log_id,
                        error=error,
                        more_categories=more_categories,
                        more_posts=more_posts,
                        more_users=more_users,
                        group_ids=group_ids,
                        term=term,
                        category_ids=category_ids,
                        more_full_page_results=more_full_page_results,
                        post_ids=post_ids,
                        extra=extra,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "tags": tags,
                "posts": posts,
                "users": users,
                "categories": categories,
                "groups": groups,
                "grouped_search_result": grouped_search_result,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    grouped_search_result: MetaOapg.properties.grouped_search_result
    groups: MetaOapg.properties.groups
    categories: MetaOapg.properties.categories
    posts: MetaOapg.properties.posts
    users: MetaOapg.properties.users
    tags: MetaOapg.properties.tags
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grouped_search_result"]) -> MetaOapg.properties.grouped_search_result: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groups"]) -> MetaOapg.properties.groups: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["categories"]) -> MetaOapg.properties.categories: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["posts"]) -> MetaOapg.properties.posts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["users"]) -> MetaOapg.properties.users: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["grouped_search_result"], typing_extensions.Literal["groups"], typing_extensions.Literal["categories"], typing_extensions.Literal["posts"], typing_extensions.Literal["users"], typing_extensions.Literal["tags"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grouped_search_result"]) -> MetaOapg.properties.grouped_search_result: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groups"]) -> MetaOapg.properties.groups: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["categories"]) -> MetaOapg.properties.categories: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["posts"]) -> MetaOapg.properties.posts: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["users"]) -> MetaOapg.properties.users: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["grouped_search_result"], typing_extensions.Literal["groups"], typing_extensions.Literal["categories"], typing_extensions.Literal["posts"], typing_extensions.Literal["users"], typing_extensions.Literal["tags"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        grouped_search_result: typing.Union[MetaOapg.properties.grouped_search_result, dict, frozendict.frozendict, ],
        groups: typing.Union[MetaOapg.properties.groups, list, tuple, ],
        categories: typing.Union[MetaOapg.properties.categories, list, tuple, ],
        posts: typing.Union[MetaOapg.properties.posts, list, tuple, ],
        users: typing.Union[MetaOapg.properties.users, list, tuple, ],
        tags: typing.Union[MetaOapg.properties.tags, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs,
    ) -> 'SearchTermResultsResponse':
        return super().__new__(
            cls,
            *args,
            grouped_search_result=grouped_search_result,
            groups=groups,
            categories=categories,
            posts=posts,
            users=users,
            tags=tags,
            _configuration=_configuration,
        )
