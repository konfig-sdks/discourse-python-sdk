# coding: utf-8

"""
    Discourse API Documentation

    This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 

    The version of the OpenAPI document: latest
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from discourse_python_sdk import schemas  # noqa: F401


class UsersListUserActionsResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "user_actions",
        }
        
        class properties:
            
            
            class user_actions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "acting_avatar_template",
                                "acting_user_id",
                                "hidden",
                                "target_name",
                                "action_type",
                                "action_code",
                                "created_at",
                                "title",
                                "acting_name",
                                "archived",
                                "category_id",
                                "post_type",
                                "topic_id",
                                "target_username",
                                "avatar_template",
                                "slug",
                                "acting_username",
                                "target_user_id",
                                "deleted",
                                "post_id",
                                "user_id",
                                "name",
                                "closed",
                                "excerpt",
                                "post_number",
                                "username",
                            }
                            
                            class properties:
                                title = schemas.StrSchema
                                excerpt = schemas.StrSchema
                                action_type = schemas.IntSchema
                                created_at = schemas.StrSchema
                                avatar_template = schemas.StrSchema
                                acting_avatar_template = schemas.StrSchema
                                slug = schemas.StrSchema
                                topic_id = schemas.IntSchema
                                target_user_id = schemas.IntSchema
                                target_name = schemas.AnyTypeSchema
                                target_username = schemas.StrSchema
                                post_number = schemas.IntSchema
                                post_id = schemas.AnyTypeSchema
                                username = schemas.StrSchema
                                name = schemas.AnyTypeSchema
                                user_id = schemas.IntSchema
                                acting_username = schemas.StrSchema
                                acting_name = schemas.AnyTypeSchema
                                acting_user_id = schemas.IntSchema
                                deleted = schemas.BoolSchema
                                hidden = schemas.AnyTypeSchema
                                post_type = schemas.AnyTypeSchema
                                action_code = schemas.AnyTypeSchema
                                category_id = schemas.IntSchema
                                closed = schemas.BoolSchema
                                archived = schemas.BoolSchema
                                __annotations__ = {
                                    "title": title,
                                    "excerpt": excerpt,
                                    "action_type": action_type,
                                    "created_at": created_at,
                                    "avatar_template": avatar_template,
                                    "acting_avatar_template": acting_avatar_template,
                                    "slug": slug,
                                    "topic_id": topic_id,
                                    "target_user_id": target_user_id,
                                    "target_name": target_name,
                                    "target_username": target_username,
                                    "post_number": post_number,
                                    "post_id": post_id,
                                    "username": username,
                                    "name": name,
                                    "user_id": user_id,
                                    "acting_username": acting_username,
                                    "acting_name": acting_name,
                                    "acting_user_id": acting_user_id,
                                    "deleted": deleted,
                                    "hidden": hidden,
                                    "post_type": post_type,
                                    "action_code": action_code,
                                    "category_id": category_id,
                                    "closed": closed,
                                    "archived": archived,
                                }
                        
                        acting_avatar_template: MetaOapg.properties.acting_avatar_template
                        acting_user_id: MetaOapg.properties.acting_user_id
                        hidden: MetaOapg.properties.hidden
                        target_name: MetaOapg.properties.target_name
                        action_type: MetaOapg.properties.action_type
                        action_code: MetaOapg.properties.action_code
                        created_at: MetaOapg.properties.created_at
                        title: MetaOapg.properties.title
                        acting_name: MetaOapg.properties.acting_name
                        archived: MetaOapg.properties.archived
                        category_id: MetaOapg.properties.category_id
                        post_type: MetaOapg.properties.post_type
                        topic_id: MetaOapg.properties.topic_id
                        target_username: MetaOapg.properties.target_username
                        avatar_template: MetaOapg.properties.avatar_template
                        slug: MetaOapg.properties.slug
                        acting_username: MetaOapg.properties.acting_username
                        target_user_id: MetaOapg.properties.target_user_id
                        deleted: MetaOapg.properties.deleted
                        post_id: MetaOapg.properties.post_id
                        user_id: MetaOapg.properties.user_id
                        name: MetaOapg.properties.name
                        closed: MetaOapg.properties.closed
                        excerpt: MetaOapg.properties.excerpt
                        post_number: MetaOapg.properties.post_number
                        username: MetaOapg.properties.username
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["excerpt"]) -> MetaOapg.properties.excerpt: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["action_type"]) -> MetaOapg.properties.action_type: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["avatar_template"]) -> MetaOapg.properties.avatar_template: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["acting_avatar_template"]) -> MetaOapg.properties.acting_avatar_template: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["topic_id"]) -> MetaOapg.properties.topic_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["target_user_id"]) -> MetaOapg.properties.target_user_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["target_name"]) -> MetaOapg.properties.target_name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["target_username"]) -> MetaOapg.properties.target_username: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["post_number"]) -> MetaOapg.properties.post_number: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["post_id"]) -> MetaOapg.properties.post_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["acting_username"]) -> MetaOapg.properties.acting_username: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["acting_name"]) -> MetaOapg.properties.acting_name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["acting_user_id"]) -> MetaOapg.properties.acting_user_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["deleted"]) -> MetaOapg.properties.deleted: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["hidden"]) -> MetaOapg.properties.hidden: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["post_type"]) -> MetaOapg.properties.post_type: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["action_code"]) -> MetaOapg.properties.action_code: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["category_id"]) -> MetaOapg.properties.category_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["closed"]) -> MetaOapg.properties.closed: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["archived"]) -> MetaOapg.properties.archived: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "excerpt", "action_type", "created_at", "avatar_template", "acting_avatar_template", "slug", "topic_id", "target_user_id", "target_name", "target_username", "post_number", "post_id", "username", "name", "user_id", "acting_username", "acting_name", "acting_user_id", "deleted", "hidden", "post_type", "action_code", "category_id", "closed", "archived", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["excerpt"]) -> MetaOapg.properties.excerpt: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["action_type"]) -> MetaOapg.properties.action_type: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["avatar_template"]) -> MetaOapg.properties.avatar_template: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["acting_avatar_template"]) -> MetaOapg.properties.acting_avatar_template: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["topic_id"]) -> MetaOapg.properties.topic_id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["target_user_id"]) -> MetaOapg.properties.target_user_id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["target_name"]) -> MetaOapg.properties.target_name: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["target_username"]) -> MetaOapg.properties.target_username: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["post_number"]) -> MetaOapg.properties.post_number: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["post_id"]) -> MetaOapg.properties.post_id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["acting_username"]) -> MetaOapg.properties.acting_username: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["acting_name"]) -> MetaOapg.properties.acting_name: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["acting_user_id"]) -> MetaOapg.properties.acting_user_id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["deleted"]) -> MetaOapg.properties.deleted: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["hidden"]) -> MetaOapg.properties.hidden: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["post_type"]) -> MetaOapg.properties.post_type: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["action_code"]) -> MetaOapg.properties.action_code: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["category_id"]) -> MetaOapg.properties.category_id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["closed"]) -> MetaOapg.properties.closed: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["archived"]) -> MetaOapg.properties.archived: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "excerpt", "action_type", "created_at", "avatar_template", "acting_avatar_template", "slug", "topic_id", "target_user_id", "target_name", "target_username", "post_number", "post_id", "username", "name", "user_id", "acting_username", "acting_name", "acting_user_id", "deleted", "hidden", "post_type", "action_code", "category_id", "closed", "archived", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            acting_avatar_template: typing.Union[MetaOapg.properties.acting_avatar_template, str, ],
                            acting_user_id: typing.Union[MetaOapg.properties.acting_user_id, decimal.Decimal, int, ],
                            hidden: typing.Union[MetaOapg.properties.hidden, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            target_name: typing.Union[MetaOapg.properties.target_name, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            action_type: typing.Union[MetaOapg.properties.action_type, decimal.Decimal, int, ],
                            action_code: typing.Union[MetaOapg.properties.action_code, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            created_at: typing.Union[MetaOapg.properties.created_at, str, ],
                            title: typing.Union[MetaOapg.properties.title, str, ],
                            acting_name: typing.Union[MetaOapg.properties.acting_name, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            archived: typing.Union[MetaOapg.properties.archived, bool, ],
                            category_id: typing.Union[MetaOapg.properties.category_id, decimal.Decimal, int, ],
                            post_type: typing.Union[MetaOapg.properties.post_type, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            topic_id: typing.Union[MetaOapg.properties.topic_id, decimal.Decimal, int, ],
                            target_username: typing.Union[MetaOapg.properties.target_username, str, ],
                            avatar_template: typing.Union[MetaOapg.properties.avatar_template, str, ],
                            slug: typing.Union[MetaOapg.properties.slug, str, ],
                            acting_username: typing.Union[MetaOapg.properties.acting_username, str, ],
                            target_user_id: typing.Union[MetaOapg.properties.target_user_id, decimal.Decimal, int, ],
                            deleted: typing.Union[MetaOapg.properties.deleted, bool, ],
                            post_id: typing.Union[MetaOapg.properties.post_id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            user_id: typing.Union[MetaOapg.properties.user_id, decimal.Decimal, int, ],
                            name: typing.Union[MetaOapg.properties.name, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            closed: typing.Union[MetaOapg.properties.closed, bool, ],
                            excerpt: typing.Union[MetaOapg.properties.excerpt, str, ],
                            post_number: typing.Union[MetaOapg.properties.post_number, decimal.Decimal, int, ],
                            username: typing.Union[MetaOapg.properties.username, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                acting_avatar_template=acting_avatar_template,
                                acting_user_id=acting_user_id,
                                hidden=hidden,
                                target_name=target_name,
                                action_type=action_type,
                                action_code=action_code,
                                created_at=created_at,
                                title=title,
                                acting_name=acting_name,
                                archived=archived,
                                category_id=category_id,
                                post_type=post_type,
                                topic_id=topic_id,
                                target_username=target_username,
                                avatar_template=avatar_template,
                                slug=slug,
                                acting_username=acting_username,
                                target_user_id=target_user_id,
                                deleted=deleted,
                                post_id=post_id,
                                user_id=user_id,
                                name=name,
                                closed=closed,
                                excerpt=excerpt,
                                post_number=post_number,
                                username=username,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'user_actions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "user_actions": user_actions,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    user_actions: MetaOapg.properties.user_actions
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_actions"]) -> MetaOapg.properties.user_actions: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["user_actions"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_actions"]) -> MetaOapg.properties.user_actions: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["user_actions"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        user_actions: typing.Union[MetaOapg.properties.user_actions, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs,
    ) -> 'UsersListUserActionsResponse':
        return super().__new__(
            cls,
            *args,
            user_actions=user_actions,
            _configuration=_configuration,
        )
