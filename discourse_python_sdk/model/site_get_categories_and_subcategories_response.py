# coding: utf-8

"""
    Discourse API Documentation

    This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 

    The version of the OpenAPI document: latest
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from discourse_python_sdk import schemas  # noqa: F401


class SiteGetCategoriesAndSubcategoriesResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "user_color_schemes",
            "user_field_max_length",
            "topic_featured_link_allowed_category_ids",
            "default_archetype",
            "post_action_types",
            "watched_words_replace",
            "tags_filter_regexp",
            "user_fields",
            "archetypes",
            "topic_flag_types",
            "can_create_tag",
            "periods",
            "trust_levels",
            "categories",
            "watched_words_link",
            "censored_regexp",
            "default_dark_color_scheme",
            "anonymous_top_menu_items",
            "notification_types",
            "custom_emoji_translation",
            "post_types",
            "can_tag_topics",
            "top_tags",
            "groups",
            "user_themes",
            "filters",
            "can_tag_pms",
            "uncategorized_category_id",
            "top_menu_items",
            "auth_providers",
        }
        
        class properties:
            default_archetype = schemas.StrSchema
            
            
            class notification_types(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "private_message",
                        "replied",
                        "event_invitation",
                        "liked_consolidated",
                        "moved_post",
                        "chat_message",
                        "invited_to_private_message",
                        "liked",
                        "posted",
                        "quoted",
                        "post_approved",
                        "group_message_summary",
                        "chat_invitation",
                        "watching_first_post",
                        "mentioned",
                        "chat_group_mention",
                        "invited_to_topic",
                        "granted_badge",
                        "linked",
                        "bookmark_reminder",
                        "reaction",
                        "watching_category_or_tag",
                        "chat_mention",
                        "code_review_commit_approved",
                        "edited",
                        "custom",
                        "invitee_accepted",
                        "event_reminder",
                        "topic_reminder",
                        "votes_released",
                        "group_mentioned",
                        "membership_request_accepted",
                        "membership_request_consolidated",
                    }
                    
                    class properties:
                        mentioned = schemas.IntSchema
                        replied = schemas.IntSchema
                        quoted = schemas.IntSchema
                        edited = schemas.IntSchema
                        liked = schemas.IntSchema
                        private_message = schemas.IntSchema
                        invited_to_private_message = schemas.IntSchema
                        invitee_accepted = schemas.IntSchema
                        posted = schemas.IntSchema
                        watching_category_or_tag = schemas.IntSchema
                        new_features = schemas.IntSchema
                        admin_problems = schemas.IntSchema
                        moved_post = schemas.IntSchema
                        linked = schemas.IntSchema
                        granted_badge = schemas.IntSchema
                        invited_to_topic = schemas.IntSchema
                        custom = schemas.IntSchema
                        group_mentioned = schemas.IntSchema
                        group_message_summary = schemas.IntSchema
                        watching_first_post = schemas.IntSchema
                        topic_reminder = schemas.IntSchema
                        liked_consolidated = schemas.IntSchema
                        post_approved = schemas.IntSchema
                        code_review_commit_approved = schemas.IntSchema
                        membership_request_accepted = schemas.IntSchema
                        membership_request_consolidated = schemas.IntSchema
                        bookmark_reminder = schemas.IntSchema
                        reaction = schemas.IntSchema
                        votes_released = schemas.IntSchema
                        event_reminder = schemas.IntSchema
                        event_invitation = schemas.IntSchema
                        chat_mention = schemas.IntSchema
                        chat_message = schemas.IntSchema
                        chat_invitation = schemas.IntSchema
                        chat_group_mention = schemas.IntSchema
                        chat_quoted = schemas.IntSchema
                        assigned = schemas.IntSchema
                        question_answer_user_commented = schemas.IntSchema
                        following = schemas.IntSchema
                        following_created_topic = schemas.IntSchema
                        following_replied = schemas.IntSchema
                        circles_activity = schemas.IntSchema
                        __annotations__ = {
                            "mentioned": mentioned,
                            "replied": replied,
                            "quoted": quoted,
                            "edited": edited,
                            "liked": liked,
                            "private_message": private_message,
                            "invited_to_private_message": invited_to_private_message,
                            "invitee_accepted": invitee_accepted,
                            "posted": posted,
                            "watching_category_or_tag": watching_category_or_tag,
                            "new_features": new_features,
                            "admin_problems": admin_problems,
                            "moved_post": moved_post,
                            "linked": linked,
                            "granted_badge": granted_badge,
                            "invited_to_topic": invited_to_topic,
                            "custom": custom,
                            "group_mentioned": group_mentioned,
                            "group_message_summary": group_message_summary,
                            "watching_first_post": watching_first_post,
                            "topic_reminder": topic_reminder,
                            "liked_consolidated": liked_consolidated,
                            "post_approved": post_approved,
                            "code_review_commit_approved": code_review_commit_approved,
                            "membership_request_accepted": membership_request_accepted,
                            "membership_request_consolidated": membership_request_consolidated,
                            "bookmark_reminder": bookmark_reminder,
                            "reaction": reaction,
                            "votes_released": votes_released,
                            "event_reminder": event_reminder,
                            "event_invitation": event_invitation,
                            "chat_mention": chat_mention,
                            "chat_message": chat_message,
                            "chat_invitation": chat_invitation,
                            "chat_group_mention": chat_group_mention,
                            "chat_quoted": chat_quoted,
                            "assigned": assigned,
                            "question_answer_user_commented": question_answer_user_commented,
                            "following": following,
                            "following_created_topic": following_created_topic,
                            "following_replied": following_replied,
                            "circles_activity": circles_activity,
                        }
                
                private_message: MetaOapg.properties.private_message
                replied: MetaOapg.properties.replied
                event_invitation: MetaOapg.properties.event_invitation
                liked_consolidated: MetaOapg.properties.liked_consolidated
                moved_post: MetaOapg.properties.moved_post
                chat_message: MetaOapg.properties.chat_message
                invited_to_private_message: MetaOapg.properties.invited_to_private_message
                liked: MetaOapg.properties.liked
                posted: MetaOapg.properties.posted
                quoted: MetaOapg.properties.quoted
                post_approved: MetaOapg.properties.post_approved
                group_message_summary: MetaOapg.properties.group_message_summary
                chat_invitation: MetaOapg.properties.chat_invitation
                watching_first_post: MetaOapg.properties.watching_first_post
                mentioned: MetaOapg.properties.mentioned
                chat_group_mention: MetaOapg.properties.chat_group_mention
                invited_to_topic: MetaOapg.properties.invited_to_topic
                granted_badge: MetaOapg.properties.granted_badge
                linked: MetaOapg.properties.linked
                bookmark_reminder: MetaOapg.properties.bookmark_reminder
                reaction: MetaOapg.properties.reaction
                watching_category_or_tag: MetaOapg.properties.watching_category_or_tag
                chat_mention: MetaOapg.properties.chat_mention
                code_review_commit_approved: MetaOapg.properties.code_review_commit_approved
                edited: MetaOapg.properties.edited
                custom: MetaOapg.properties.custom
                invitee_accepted: MetaOapg.properties.invitee_accepted
                event_reminder: MetaOapg.properties.event_reminder
                topic_reminder: MetaOapg.properties.topic_reminder
                votes_released: MetaOapg.properties.votes_released
                group_mentioned: MetaOapg.properties.group_mentioned
                membership_request_accepted: MetaOapg.properties.membership_request_accepted
                membership_request_consolidated: MetaOapg.properties.membership_request_consolidated
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["mentioned"]) -> MetaOapg.properties.mentioned: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["replied"]) -> MetaOapg.properties.replied: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["quoted"]) -> MetaOapg.properties.quoted: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["edited"]) -> MetaOapg.properties.edited: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["liked"]) -> MetaOapg.properties.liked: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["private_message"]) -> MetaOapg.properties.private_message: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["invited_to_private_message"]) -> MetaOapg.properties.invited_to_private_message: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["invitee_accepted"]) -> MetaOapg.properties.invitee_accepted: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["posted"]) -> MetaOapg.properties.posted: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["watching_category_or_tag"]) -> MetaOapg.properties.watching_category_or_tag: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["new_features"]) -> MetaOapg.properties.new_features: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["admin_problems"]) -> MetaOapg.properties.admin_problems: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["moved_post"]) -> MetaOapg.properties.moved_post: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["linked"]) -> MetaOapg.properties.linked: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["granted_badge"]) -> MetaOapg.properties.granted_badge: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["invited_to_topic"]) -> MetaOapg.properties.invited_to_topic: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["custom"]) -> MetaOapg.properties.custom: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["group_mentioned"]) -> MetaOapg.properties.group_mentioned: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["group_message_summary"]) -> MetaOapg.properties.group_message_summary: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["watching_first_post"]) -> MetaOapg.properties.watching_first_post: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["topic_reminder"]) -> MetaOapg.properties.topic_reminder: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["liked_consolidated"]) -> MetaOapg.properties.liked_consolidated: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["post_approved"]) -> MetaOapg.properties.post_approved: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["code_review_commit_approved"]) -> MetaOapg.properties.code_review_commit_approved: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["membership_request_accepted"]) -> MetaOapg.properties.membership_request_accepted: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["membership_request_consolidated"]) -> MetaOapg.properties.membership_request_consolidated: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["bookmark_reminder"]) -> MetaOapg.properties.bookmark_reminder: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["reaction"]) -> MetaOapg.properties.reaction: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["votes_released"]) -> MetaOapg.properties.votes_released: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["event_reminder"]) -> MetaOapg.properties.event_reminder: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["event_invitation"]) -> MetaOapg.properties.event_invitation: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["chat_mention"]) -> MetaOapg.properties.chat_mention: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["chat_message"]) -> MetaOapg.properties.chat_message: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["chat_invitation"]) -> MetaOapg.properties.chat_invitation: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["chat_group_mention"]) -> MetaOapg.properties.chat_group_mention: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["chat_quoted"]) -> MetaOapg.properties.chat_quoted: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["assigned"]) -> MetaOapg.properties.assigned: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["question_answer_user_commented"]) -> MetaOapg.properties.question_answer_user_commented: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["following"]) -> MetaOapg.properties.following: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["following_created_topic"]) -> MetaOapg.properties.following_created_topic: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["following_replied"]) -> MetaOapg.properties.following_replied: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["circles_activity"]) -> MetaOapg.properties.circles_activity: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["mentioned", "replied", "quoted", "edited", "liked", "private_message", "invited_to_private_message", "invitee_accepted", "posted", "watching_category_or_tag", "new_features", "admin_problems", "moved_post", "linked", "granted_badge", "invited_to_topic", "custom", "group_mentioned", "group_message_summary", "watching_first_post", "topic_reminder", "liked_consolidated", "post_approved", "code_review_commit_approved", "membership_request_accepted", "membership_request_consolidated", "bookmark_reminder", "reaction", "votes_released", "event_reminder", "event_invitation", "chat_mention", "chat_message", "chat_invitation", "chat_group_mention", "chat_quoted", "assigned", "question_answer_user_commented", "following", "following_created_topic", "following_replied", "circles_activity", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["mentioned"]) -> MetaOapg.properties.mentioned: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["replied"]) -> MetaOapg.properties.replied: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["quoted"]) -> MetaOapg.properties.quoted: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["edited"]) -> MetaOapg.properties.edited: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["liked"]) -> MetaOapg.properties.liked: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["private_message"]) -> MetaOapg.properties.private_message: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["invited_to_private_message"]) -> MetaOapg.properties.invited_to_private_message: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["invitee_accepted"]) -> MetaOapg.properties.invitee_accepted: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["posted"]) -> MetaOapg.properties.posted: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["watching_category_or_tag"]) -> MetaOapg.properties.watching_category_or_tag: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["new_features"]) -> typing.Union[MetaOapg.properties.new_features, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["admin_problems"]) -> typing.Union[MetaOapg.properties.admin_problems, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["moved_post"]) -> MetaOapg.properties.moved_post: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["linked"]) -> MetaOapg.properties.linked: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["granted_badge"]) -> MetaOapg.properties.granted_badge: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["invited_to_topic"]) -> MetaOapg.properties.invited_to_topic: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["custom"]) -> MetaOapg.properties.custom: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["group_mentioned"]) -> MetaOapg.properties.group_mentioned: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["group_message_summary"]) -> MetaOapg.properties.group_message_summary: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["watching_first_post"]) -> MetaOapg.properties.watching_first_post: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["topic_reminder"]) -> MetaOapg.properties.topic_reminder: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["liked_consolidated"]) -> MetaOapg.properties.liked_consolidated: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["post_approved"]) -> MetaOapg.properties.post_approved: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["code_review_commit_approved"]) -> MetaOapg.properties.code_review_commit_approved: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["membership_request_accepted"]) -> MetaOapg.properties.membership_request_accepted: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["membership_request_consolidated"]) -> MetaOapg.properties.membership_request_consolidated: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["bookmark_reminder"]) -> MetaOapg.properties.bookmark_reminder: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["reaction"]) -> MetaOapg.properties.reaction: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["votes_released"]) -> MetaOapg.properties.votes_released: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["event_reminder"]) -> MetaOapg.properties.event_reminder: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["event_invitation"]) -> MetaOapg.properties.event_invitation: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["chat_mention"]) -> MetaOapg.properties.chat_mention: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["chat_message"]) -> MetaOapg.properties.chat_message: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["chat_invitation"]) -> MetaOapg.properties.chat_invitation: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["chat_group_mention"]) -> MetaOapg.properties.chat_group_mention: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["chat_quoted"]) -> typing.Union[MetaOapg.properties.chat_quoted, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["assigned"]) -> typing.Union[MetaOapg.properties.assigned, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["question_answer_user_commented"]) -> typing.Union[MetaOapg.properties.question_answer_user_commented, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["following"]) -> typing.Union[MetaOapg.properties.following, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["following_created_topic"]) -> typing.Union[MetaOapg.properties.following_created_topic, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["following_replied"]) -> typing.Union[MetaOapg.properties.following_replied, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["circles_activity"]) -> typing.Union[MetaOapg.properties.circles_activity, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["mentioned", "replied", "quoted", "edited", "liked", "private_message", "invited_to_private_message", "invitee_accepted", "posted", "watching_category_or_tag", "new_features", "admin_problems", "moved_post", "linked", "granted_badge", "invited_to_topic", "custom", "group_mentioned", "group_message_summary", "watching_first_post", "topic_reminder", "liked_consolidated", "post_approved", "code_review_commit_approved", "membership_request_accepted", "membership_request_consolidated", "bookmark_reminder", "reaction", "votes_released", "event_reminder", "event_invitation", "chat_mention", "chat_message", "chat_invitation", "chat_group_mention", "chat_quoted", "assigned", "question_answer_user_commented", "following", "following_created_topic", "following_replied", "circles_activity", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    private_message: typing.Union[MetaOapg.properties.private_message, decimal.Decimal, int, ],
                    replied: typing.Union[MetaOapg.properties.replied, decimal.Decimal, int, ],
                    event_invitation: typing.Union[MetaOapg.properties.event_invitation, decimal.Decimal, int, ],
                    liked_consolidated: typing.Union[MetaOapg.properties.liked_consolidated, decimal.Decimal, int, ],
                    moved_post: typing.Union[MetaOapg.properties.moved_post, decimal.Decimal, int, ],
                    chat_message: typing.Union[MetaOapg.properties.chat_message, decimal.Decimal, int, ],
                    invited_to_private_message: typing.Union[MetaOapg.properties.invited_to_private_message, decimal.Decimal, int, ],
                    liked: typing.Union[MetaOapg.properties.liked, decimal.Decimal, int, ],
                    posted: typing.Union[MetaOapg.properties.posted, decimal.Decimal, int, ],
                    quoted: typing.Union[MetaOapg.properties.quoted, decimal.Decimal, int, ],
                    post_approved: typing.Union[MetaOapg.properties.post_approved, decimal.Decimal, int, ],
                    group_message_summary: typing.Union[MetaOapg.properties.group_message_summary, decimal.Decimal, int, ],
                    chat_invitation: typing.Union[MetaOapg.properties.chat_invitation, decimal.Decimal, int, ],
                    watching_first_post: typing.Union[MetaOapg.properties.watching_first_post, decimal.Decimal, int, ],
                    mentioned: typing.Union[MetaOapg.properties.mentioned, decimal.Decimal, int, ],
                    chat_group_mention: typing.Union[MetaOapg.properties.chat_group_mention, decimal.Decimal, int, ],
                    invited_to_topic: typing.Union[MetaOapg.properties.invited_to_topic, decimal.Decimal, int, ],
                    granted_badge: typing.Union[MetaOapg.properties.granted_badge, decimal.Decimal, int, ],
                    linked: typing.Union[MetaOapg.properties.linked, decimal.Decimal, int, ],
                    bookmark_reminder: typing.Union[MetaOapg.properties.bookmark_reminder, decimal.Decimal, int, ],
                    reaction: typing.Union[MetaOapg.properties.reaction, decimal.Decimal, int, ],
                    watching_category_or_tag: typing.Union[MetaOapg.properties.watching_category_or_tag, decimal.Decimal, int, ],
                    chat_mention: typing.Union[MetaOapg.properties.chat_mention, decimal.Decimal, int, ],
                    code_review_commit_approved: typing.Union[MetaOapg.properties.code_review_commit_approved, decimal.Decimal, int, ],
                    edited: typing.Union[MetaOapg.properties.edited, decimal.Decimal, int, ],
                    custom: typing.Union[MetaOapg.properties.custom, decimal.Decimal, int, ],
                    invitee_accepted: typing.Union[MetaOapg.properties.invitee_accepted, decimal.Decimal, int, ],
                    event_reminder: typing.Union[MetaOapg.properties.event_reminder, decimal.Decimal, int, ],
                    topic_reminder: typing.Union[MetaOapg.properties.topic_reminder, decimal.Decimal, int, ],
                    votes_released: typing.Union[MetaOapg.properties.votes_released, decimal.Decimal, int, ],
                    group_mentioned: typing.Union[MetaOapg.properties.group_mentioned, decimal.Decimal, int, ],
                    membership_request_accepted: typing.Union[MetaOapg.properties.membership_request_accepted, decimal.Decimal, int, ],
                    membership_request_consolidated: typing.Union[MetaOapg.properties.membership_request_consolidated, decimal.Decimal, int, ],
                    new_features: typing.Union[MetaOapg.properties.new_features, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    admin_problems: typing.Union[MetaOapg.properties.admin_problems, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    chat_quoted: typing.Union[MetaOapg.properties.chat_quoted, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    assigned: typing.Union[MetaOapg.properties.assigned, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    question_answer_user_commented: typing.Union[MetaOapg.properties.question_answer_user_commented, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    following: typing.Union[MetaOapg.properties.following, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    following_created_topic: typing.Union[MetaOapg.properties.following_created_topic, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    following_replied: typing.Union[MetaOapg.properties.following_replied, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    circles_activity: typing.Union[MetaOapg.properties.circles_activity, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'notification_types':
                    return super().__new__(
                        cls,
                        *args,
                        private_message=private_message,
                        replied=replied,
                        event_invitation=event_invitation,
                        liked_consolidated=liked_consolidated,
                        moved_post=moved_post,
                        chat_message=chat_message,
                        invited_to_private_message=invited_to_private_message,
                        liked=liked,
                        posted=posted,
                        quoted=quoted,
                        post_approved=post_approved,
                        group_message_summary=group_message_summary,
                        chat_invitation=chat_invitation,
                        watching_first_post=watching_first_post,
                        mentioned=mentioned,
                        chat_group_mention=chat_group_mention,
                        invited_to_topic=invited_to_topic,
                        granted_badge=granted_badge,
                        linked=linked,
                        bookmark_reminder=bookmark_reminder,
                        reaction=reaction,
                        watching_category_or_tag=watching_category_or_tag,
                        chat_mention=chat_mention,
                        code_review_commit_approved=code_review_commit_approved,
                        edited=edited,
                        custom=custom,
                        invitee_accepted=invitee_accepted,
                        event_reminder=event_reminder,
                        topic_reminder=topic_reminder,
                        votes_released=votes_released,
                        group_mentioned=group_mentioned,
                        membership_request_accepted=membership_request_accepted,
                        membership_request_consolidated=membership_request_consolidated,
                        new_features=new_features,
                        admin_problems=admin_problems,
                        chat_quoted=chat_quoted,
                        assigned=assigned,
                        question_answer_user_commented=question_answer_user_commented,
                        following=following,
                        following_created_topic=following_created_topic,
                        following_replied=following_replied,
                        circles_activity=circles_activity,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class post_types(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "small_action",
                        "whisper",
                        "regular",
                        "moderator_action",
                    }
                    
                    class properties:
                        regular = schemas.IntSchema
                        moderator_action = schemas.IntSchema
                        small_action = schemas.IntSchema
                        whisper = schemas.IntSchema
                        __annotations__ = {
                            "regular": regular,
                            "moderator_action": moderator_action,
                            "small_action": small_action,
                            "whisper": whisper,
                        }
                
                small_action: MetaOapg.properties.small_action
                whisper: MetaOapg.properties.whisper
                regular: MetaOapg.properties.regular
                moderator_action: MetaOapg.properties.moderator_action
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["regular"]) -> MetaOapg.properties.regular: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["moderator_action"]) -> MetaOapg.properties.moderator_action: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["small_action"]) -> MetaOapg.properties.small_action: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["whisper"]) -> MetaOapg.properties.whisper: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["regular", "moderator_action", "small_action", "whisper", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["regular"]) -> MetaOapg.properties.regular: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["moderator_action"]) -> MetaOapg.properties.moderator_action: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["small_action"]) -> MetaOapg.properties.small_action: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["whisper"]) -> MetaOapg.properties.whisper: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["regular", "moderator_action", "small_action", "whisper", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    small_action: typing.Union[MetaOapg.properties.small_action, decimal.Decimal, int, ],
                    whisper: typing.Union[MetaOapg.properties.whisper, decimal.Decimal, int, ],
                    regular: typing.Union[MetaOapg.properties.regular, decimal.Decimal, int, ],
                    moderator_action: typing.Union[MetaOapg.properties.moderator_action, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'post_types':
                    return super().__new__(
                        cls,
                        *args,
                        small_action=small_action,
                        whisper=whisper,
                        regular=regular,
                        moderator_action=moderator_action,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class trust_levels(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "leader",
                        "newuser",
                        "member",
                        "basic",
                        "regular",
                    }
                    
                    class properties:
                        newuser = schemas.IntSchema
                        basic = schemas.IntSchema
                        member = schemas.IntSchema
                        regular = schemas.IntSchema
                        leader = schemas.IntSchema
                        __annotations__ = {
                            "newuser": newuser,
                            "basic": basic,
                            "member": member,
                            "regular": regular,
                            "leader": leader,
                        }
                
                leader: MetaOapg.properties.leader
                newuser: MetaOapg.properties.newuser
                member: MetaOapg.properties.member
                basic: MetaOapg.properties.basic
                regular: MetaOapg.properties.regular
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["newuser"]) -> MetaOapg.properties.newuser: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["basic"]) -> MetaOapg.properties.basic: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["member"]) -> MetaOapg.properties.member: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["regular"]) -> MetaOapg.properties.regular: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["leader"]) -> MetaOapg.properties.leader: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["newuser", "basic", "member", "regular", "leader", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["newuser"]) -> MetaOapg.properties.newuser: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["basic"]) -> MetaOapg.properties.basic: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["member"]) -> MetaOapg.properties.member: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["regular"]) -> MetaOapg.properties.regular: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["leader"]) -> MetaOapg.properties.leader: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["newuser", "basic", "member", "regular", "leader", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    leader: typing.Union[MetaOapg.properties.leader, decimal.Decimal, int, ],
                    newuser: typing.Union[MetaOapg.properties.newuser, decimal.Decimal, int, ],
                    member: typing.Union[MetaOapg.properties.member, decimal.Decimal, int, ],
                    basic: typing.Union[MetaOapg.properties.basic, decimal.Decimal, int, ],
                    regular: typing.Union[MetaOapg.properties.regular, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'trust_levels':
                    return super().__new__(
                        cls,
                        *args,
                        leader=leader,
                        newuser=newuser,
                        member=member,
                        basic=basic,
                        regular=regular,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class groups(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "flair_bg_color",
                                "flair_color",
                                "name",
                                "flair_url",
                                "id",
                            }
                            
                            class properties:
                                id = schemas.IntSchema
                                name = schemas.StrSchema
                                flair_url = schemas.AnyTypeSchema
                                flair_bg_color = schemas.AnyTypeSchema
                                flair_color = schemas.AnyTypeSchema
                                __annotations__ = {
                                    "id": id,
                                    "name": name,
                                    "flair_url": flair_url,
                                    "flair_bg_color": flair_bg_color,
                                    "flair_color": flair_color,
                                }
                        
                        flair_bg_color: MetaOapg.properties.flair_bg_color
                        flair_color: MetaOapg.properties.flair_color
                        name: MetaOapg.properties.name
                        flair_url: MetaOapg.properties.flair_url
                        id: MetaOapg.properties.id
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["flair_url"]) -> MetaOapg.properties.flair_url: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["flair_bg_color"]) -> MetaOapg.properties.flair_bg_color: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["flair_color"]) -> MetaOapg.properties.flair_color: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "flair_url", "flair_bg_color", "flair_color", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["flair_url"]) -> MetaOapg.properties.flair_url: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["flair_bg_color"]) -> MetaOapg.properties.flair_bg_color: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["flair_color"]) -> MetaOapg.properties.flair_color: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "flair_url", "flair_bg_color", "flair_color", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            flair_bg_color: typing.Union[MetaOapg.properties.flair_bg_color, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            flair_color: typing.Union[MetaOapg.properties.flair_color, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            name: typing.Union[MetaOapg.properties.name, str, ],
                            flair_url: typing.Union[MetaOapg.properties.flair_url, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                flair_bg_color=flair_bg_color,
                                flair_color=flair_color,
                                name=name,
                                flair_url=flair_url,
                                id=id,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'groups':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class filters(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.AnyTypeSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'filters':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class periods(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.AnyTypeSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'periods':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class top_menu_items(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.AnyTypeSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'top_menu_items':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class anonymous_top_menu_items(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.AnyTypeSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'anonymous_top_menu_items':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            uncategorized_category_id = schemas.IntSchema
            user_field_max_length = schemas.IntSchema
            
            
            class post_action_types(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "name_key",
                                "short_description",
                                "is_custom_flag",
                                "is_flag",
                                "name",
                                "description",
                                "id",
                            }
                            
                            class properties:
                                description = schemas.StrSchema
                                id = schemas.AnyTypeSchema
                                name_key = schemas.AnyTypeSchema
                                name = schemas.StrSchema
                                short_description = schemas.StrSchema
                                is_flag = schemas.BoolSchema
                                is_custom_flag = schemas.BoolSchema
                                __annotations__ = {
                                    "description": description,
                                    "id": id,
                                    "name_key": name_key,
                                    "name": name,
                                    "short_description": short_description,
                                    "is_flag": is_flag,
                                    "is_custom_flag": is_custom_flag,
                                }
                        
                        name_key: MetaOapg.properties.name_key
                        short_description: MetaOapg.properties.short_description
                        is_custom_flag: MetaOapg.properties.is_custom_flag
                        is_flag: MetaOapg.properties.is_flag
                        name: MetaOapg.properties.name
                        description: MetaOapg.properties.description
                        id: MetaOapg.properties.id
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name_key"]) -> MetaOapg.properties.name_key: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["short_description"]) -> MetaOapg.properties.short_description: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["is_flag"]) -> MetaOapg.properties.is_flag: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["is_custom_flag"]) -> MetaOapg.properties.is_custom_flag: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "id", "name_key", "name", "short_description", "is_flag", "is_custom_flag", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name_key"]) -> MetaOapg.properties.name_key: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["short_description"]) -> MetaOapg.properties.short_description: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["is_flag"]) -> MetaOapg.properties.is_flag: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["is_custom_flag"]) -> MetaOapg.properties.is_custom_flag: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "id", "name_key", "name", "short_description", "is_flag", "is_custom_flag", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            name_key: typing.Union[MetaOapg.properties.name_key, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            short_description: typing.Union[MetaOapg.properties.short_description, str, ],
                            is_custom_flag: typing.Union[MetaOapg.properties.is_custom_flag, bool, ],
                            is_flag: typing.Union[MetaOapg.properties.is_flag, bool, ],
                            name: typing.Union[MetaOapg.properties.name, str, ],
                            description: typing.Union[MetaOapg.properties.description, str, ],
                            id: typing.Union[MetaOapg.properties.id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                name_key=name_key,
                                short_description=short_description,
                                is_custom_flag=is_custom_flag,
                                is_flag=is_flag,
                                name=name,
                                description=description,
                                id=id,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'post_action_types':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class topic_flag_types(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "name_key",
                                "short_description",
                                "is_custom_flag",
                                "is_flag",
                                "name",
                                "description",
                                "id",
                            }
                            
                            class properties:
                                description = schemas.StrSchema
                                id = schemas.AnyTypeSchema
                                name_key = schemas.AnyTypeSchema
                                name = schemas.StrSchema
                                short_description = schemas.StrSchema
                                is_flag = schemas.BoolSchema
                                is_custom_flag = schemas.BoolSchema
                                __annotations__ = {
                                    "description": description,
                                    "id": id,
                                    "name_key": name_key,
                                    "name": name,
                                    "short_description": short_description,
                                    "is_flag": is_flag,
                                    "is_custom_flag": is_custom_flag,
                                }
                        
                        name_key: MetaOapg.properties.name_key
                        short_description: MetaOapg.properties.short_description
                        is_custom_flag: MetaOapg.properties.is_custom_flag
                        is_flag: MetaOapg.properties.is_flag
                        name: MetaOapg.properties.name
                        description: MetaOapg.properties.description
                        id: MetaOapg.properties.id
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name_key"]) -> MetaOapg.properties.name_key: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["short_description"]) -> MetaOapg.properties.short_description: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["is_flag"]) -> MetaOapg.properties.is_flag: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["is_custom_flag"]) -> MetaOapg.properties.is_custom_flag: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "id", "name_key", "name", "short_description", "is_flag", "is_custom_flag", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name_key"]) -> MetaOapg.properties.name_key: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["short_description"]) -> MetaOapg.properties.short_description: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["is_flag"]) -> MetaOapg.properties.is_flag: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["is_custom_flag"]) -> MetaOapg.properties.is_custom_flag: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "id", "name_key", "name", "short_description", "is_flag", "is_custom_flag", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            name_key: typing.Union[MetaOapg.properties.name_key, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            short_description: typing.Union[MetaOapg.properties.short_description, str, ],
                            is_custom_flag: typing.Union[MetaOapg.properties.is_custom_flag, bool, ],
                            is_flag: typing.Union[MetaOapg.properties.is_flag, bool, ],
                            name: typing.Union[MetaOapg.properties.name, str, ],
                            description: typing.Union[MetaOapg.properties.description, str, ],
                            id: typing.Union[MetaOapg.properties.id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                name_key=name_key,
                                short_description=short_description,
                                is_custom_flag=is_custom_flag,
                                is_flag=is_flag,
                                name=name,
                                description=description,
                                id=id,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'topic_flag_types':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            can_create_tag = schemas.BoolSchema
            can_tag_topics = schemas.BoolSchema
            can_tag_pms = schemas.BoolSchema
            tags_filter_regexp = schemas.StrSchema
            
            
            class top_tags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.AnyTypeSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'top_tags':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class topic_featured_link_allowed_category_ids(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.AnyTypeSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'topic_featured_link_allowed_category_ids':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class user_themes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "default",
                                "color_scheme_id",
                                "name",
                                "theme_id",
                            }
                            
                            class properties:
                                theme_id = schemas.IntSchema
                                name = schemas.StrSchema
                                default = schemas.BoolSchema
                                color_scheme_id = schemas.AnyTypeSchema
                                __annotations__ = {
                                    "theme_id": theme_id,
                                    "name": name,
                                    "default": default,
                                    "color_scheme_id": color_scheme_id,
                                }
                        
                        default: MetaOapg.properties.default
                        color_scheme_id: MetaOapg.properties.color_scheme_id
                        name: MetaOapg.properties.name
                        theme_id: MetaOapg.properties.theme_id
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["theme_id"]) -> MetaOapg.properties.theme_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["default"]) -> MetaOapg.properties.default: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["color_scheme_id"]) -> MetaOapg.properties.color_scheme_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["theme_id", "name", "default", "color_scheme_id", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["theme_id"]) -> MetaOapg.properties.theme_id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["default"]) -> MetaOapg.properties.default: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["color_scheme_id"]) -> MetaOapg.properties.color_scheme_id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["theme_id", "name", "default", "color_scheme_id", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            default: typing.Union[MetaOapg.properties.default, bool, ],
                            color_scheme_id: typing.Union[MetaOapg.properties.color_scheme_id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            name: typing.Union[MetaOapg.properties.name, str, ],
                            theme_id: typing.Union[MetaOapg.properties.theme_id, decimal.Decimal, int, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                default=default,
                                color_scheme_id=color_scheme_id,
                                name=name,
                                theme_id=theme_id,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'user_themes':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class user_color_schemes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "name",
                                "id",
                                "is_dark",
                            }
                            
                            class properties:
                                id = schemas.IntSchema
                                name = schemas.StrSchema
                                is_dark = schemas.BoolSchema
                                __annotations__ = {
                                    "id": id,
                                    "name": name,
                                    "is_dark": is_dark,
                                }
                        
                        name: MetaOapg.properties.name
                        id: MetaOapg.properties.id
                        is_dark: MetaOapg.properties.is_dark
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["is_dark"]) -> MetaOapg.properties.is_dark: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "is_dark", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["is_dark"]) -> MetaOapg.properties.is_dark: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "is_dark", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            name: typing.Union[MetaOapg.properties.name, str, ],
                            id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
                            is_dark: typing.Union[MetaOapg.properties.is_dark, bool, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                name=name,
                                id=id,
                                is_dark=is_dark,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'user_color_schemes':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            default_dark_color_scheme = schemas.AnyTypeSchema
            
            
            class censored_regexp(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.DictSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'censored_regexp':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            custom_emoji_translation = schemas.DictSchema
            watched_words_replace = schemas.AnyTypeSchema
            watched_words_link = schemas.AnyTypeSchema
            
            
            class categories(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "uploaded_background",
                                "color",
                                "uploaded_background_dark",
                                "navigate_to_first_post_after_read",
                                "topic_template",
                                "read_only_banner",
                                "show_subcategory_list",
                                "uploaded_logo",
                                "sort_ascending",
                                "num_featured_topics",
                                "allowed_tags",
                                "id",
                                "default_view",
                                "sort_order",
                                "slug",
                                "subcategory_list_style",
                                "has_children",
                                "default_top_period",
                                "can_edit",
                                "permission",
                                "topic_count",
                                "uploaded_logo_dark",
                                "read_restricted",
                                "allow_global_tags",
                                "minimum_required_tags",
                                "topic_url",
                                "allowed_tag_groups",
                                "default_list_filter",
                                "name",
                                "notification_level",
                                "position",
                                "post_count",
                                "text_color",
                                "required_tag_groups",
                            }
                            
                            class properties:
                                description = schemas.AnyTypeSchema
                                id = schemas.IntSchema
                                name = schemas.StrSchema
                                color = schemas.StrSchema
                                text_color = schemas.StrSchema
                                slug = schemas.StrSchema
                                topic_count = schemas.IntSchema
                                post_count = schemas.IntSchema
                                position = schemas.IntSchema
                                description_text = schemas.AnyTypeSchema
                                description_excerpt = schemas.AnyTypeSchema
                                topic_url = schemas.StrSchema
                                read_restricted = schemas.BoolSchema
                                permission = schemas.IntSchema
                                notification_level = schemas.IntSchema
                                topic_template = schemas.AnyTypeSchema
                                has_children = schemas.BoolSchema
                                sort_order = schemas.AnyTypeSchema
                                sort_ascending = schemas.AnyTypeSchema
                                show_subcategory_list = schemas.BoolSchema
                                num_featured_topics = schemas.IntSchema
                                default_view = schemas.AnyTypeSchema
                                subcategory_list_style = schemas.StrSchema
                                default_top_period = schemas.StrSchema
                                default_list_filter = schemas.StrSchema
                                minimum_required_tags = schemas.IntSchema
                                navigate_to_first_post_after_read = schemas.BoolSchema
                                
                                
                                class allowed_tags(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.AnyTypeSchema
                                
                                    def __new__(
                                        cls,
                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'allowed_tags':
                                        return super().__new__(
                                            cls,
                                            arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                
                                
                                class allowed_tag_groups(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.AnyTypeSchema
                                
                                    def __new__(
                                        cls,
                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'allowed_tag_groups':
                                        return super().__new__(
                                            cls,
                                            arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                allow_global_tags = schemas.BoolSchema
                                
                                
                                class required_tag_groups(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        
                                        class items(
                                            schemas.DictSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                required = {
                                                    "name",
                                                    "min_count",
                                                }
                                                
                                                class properties:
                                                    name = schemas.StrSchema
                                                    min_count = schemas.IntSchema
                                                    __annotations__ = {
                                                        "name": name,
                                                        "min_count": min_count,
                                                    }
                                            
                                            name: MetaOapg.properties.name
                                            min_count: MetaOapg.properties.min_count
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: typing_extensions.Literal["min_count"]) -> MetaOapg.properties.min_count: ...
                                            
                                            @typing.overload
                                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                            
                                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "min_count", ], str]):
                                                # dict_instance[name] accessor
                                                return super().__getitem__(name)
                                            
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: typing_extensions.Literal["min_count"]) -> MetaOapg.properties.min_count: ...
                                            
                                            @typing.overload
                                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                            
                                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "min_count", ], str]):
                                                return super().get_item_oapg(name)
                                            
                                        
                                            def __new__(
                                                cls,
                                                *args: typing.Union[dict, frozendict.frozendict, ],
                                                name: typing.Union[MetaOapg.properties.name, str, ],
                                                min_count: typing.Union[MetaOapg.properties.min_count, decimal.Decimal, int, ],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                            ) -> 'items':
                                                return super().__new__(
                                                    cls,
                                                    *args,
                                                    name=name,
                                                    min_count=min_count,
                                                    _configuration=_configuration,
                                                    **kwargs,
                                                )
                                
                                    def __new__(
                                        cls,
                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'required_tag_groups':
                                        return super().__new__(
                                            cls,
                                            arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                read_only_banner = schemas.AnyTypeSchema
                                uploaded_logo = schemas.AnyTypeSchema
                                uploaded_logo_dark = schemas.AnyTypeSchema
                                uploaded_background = schemas.AnyTypeSchema
                                uploaded_background_dark = schemas.AnyTypeSchema
                                can_edit = schemas.BoolSchema
                                
                                
                                class custom_fields(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        additional_properties = schemas.AnyTypeSchema
                                    
                                    def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                                        return super().get_item_oapg(name)
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                    ) -> 'custom_fields':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                parent_category_id = schemas.IntSchema
                                
                                
                                class form_template_ids(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.AnyTypeSchema
                                
                                    def __new__(
                                        cls,
                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'form_template_ids':
                                        return super().__new__(
                                            cls,
                                            arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                __annotations__ = {
                                    "description": description,
                                    "id": id,
                                    "name": name,
                                    "color": color,
                                    "text_color": text_color,
                                    "slug": slug,
                                    "topic_count": topic_count,
                                    "post_count": post_count,
                                    "position": position,
                                    "description_text": description_text,
                                    "description_excerpt": description_excerpt,
                                    "topic_url": topic_url,
                                    "read_restricted": read_restricted,
                                    "permission": permission,
                                    "notification_level": notification_level,
                                    "topic_template": topic_template,
                                    "has_children": has_children,
                                    "sort_order": sort_order,
                                    "sort_ascending": sort_ascending,
                                    "show_subcategory_list": show_subcategory_list,
                                    "num_featured_topics": num_featured_topics,
                                    "default_view": default_view,
                                    "subcategory_list_style": subcategory_list_style,
                                    "default_top_period": default_top_period,
                                    "default_list_filter": default_list_filter,
                                    "minimum_required_tags": minimum_required_tags,
                                    "navigate_to_first_post_after_read": navigate_to_first_post_after_read,
                                    "allowed_tags": allowed_tags,
                                    "allowed_tag_groups": allowed_tag_groups,
                                    "allow_global_tags": allow_global_tags,
                                    "required_tag_groups": required_tag_groups,
                                    "read_only_banner": read_only_banner,
                                    "uploaded_logo": uploaded_logo,
                                    "uploaded_logo_dark": uploaded_logo_dark,
                                    "uploaded_background": uploaded_background,
                                    "uploaded_background_dark": uploaded_background_dark,
                                    "can_edit": can_edit,
                                    "custom_fields": custom_fields,
                                    "parent_category_id": parent_category_id,
                                    "form_template_ids": form_template_ids,
                                }
                        
                        uploaded_background: MetaOapg.properties.uploaded_background
                        color: MetaOapg.properties.color
                        uploaded_background_dark: MetaOapg.properties.uploaded_background_dark
                        navigate_to_first_post_after_read: MetaOapg.properties.navigate_to_first_post_after_read
                        topic_template: MetaOapg.properties.topic_template
                        read_only_banner: MetaOapg.properties.read_only_banner
                        show_subcategory_list: MetaOapg.properties.show_subcategory_list
                        uploaded_logo: MetaOapg.properties.uploaded_logo
                        sort_ascending: MetaOapg.properties.sort_ascending
                        num_featured_topics: MetaOapg.properties.num_featured_topics
                        allowed_tags: MetaOapg.properties.allowed_tags
                        id: MetaOapg.properties.id
                        default_view: MetaOapg.properties.default_view
                        sort_order: MetaOapg.properties.sort_order
                        slug: MetaOapg.properties.slug
                        subcategory_list_style: MetaOapg.properties.subcategory_list_style
                        has_children: MetaOapg.properties.has_children
                        default_top_period: MetaOapg.properties.default_top_period
                        can_edit: MetaOapg.properties.can_edit
                        permission: MetaOapg.properties.permission
                        topic_count: MetaOapg.properties.topic_count
                        uploaded_logo_dark: MetaOapg.properties.uploaded_logo_dark
                        read_restricted: MetaOapg.properties.read_restricted
                        allow_global_tags: MetaOapg.properties.allow_global_tags
                        minimum_required_tags: MetaOapg.properties.minimum_required_tags
                        topic_url: MetaOapg.properties.topic_url
                        allowed_tag_groups: MetaOapg.properties.allowed_tag_groups
                        default_list_filter: MetaOapg.properties.default_list_filter
                        name: MetaOapg.properties.name
                        notification_level: MetaOapg.properties.notification_level
                        position: MetaOapg.properties.position
                        post_count: MetaOapg.properties.post_count
                        text_color: MetaOapg.properties.text_color
                        required_tag_groups: MetaOapg.properties.required_tag_groups
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["text_color"]) -> MetaOapg.properties.text_color: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["topic_count"]) -> MetaOapg.properties.topic_count: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["post_count"]) -> MetaOapg.properties.post_count: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["position"]) -> MetaOapg.properties.position: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["description_text"]) -> MetaOapg.properties.description_text: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["description_excerpt"]) -> MetaOapg.properties.description_excerpt: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["topic_url"]) -> MetaOapg.properties.topic_url: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["read_restricted"]) -> MetaOapg.properties.read_restricted: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["permission"]) -> MetaOapg.properties.permission: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["notification_level"]) -> MetaOapg.properties.notification_level: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["topic_template"]) -> MetaOapg.properties.topic_template: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["has_children"]) -> MetaOapg.properties.has_children: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["sort_order"]) -> MetaOapg.properties.sort_order: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["sort_ascending"]) -> MetaOapg.properties.sort_ascending: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["show_subcategory_list"]) -> MetaOapg.properties.show_subcategory_list: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["num_featured_topics"]) -> MetaOapg.properties.num_featured_topics: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["default_view"]) -> MetaOapg.properties.default_view: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["subcategory_list_style"]) -> MetaOapg.properties.subcategory_list_style: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["default_top_period"]) -> MetaOapg.properties.default_top_period: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["default_list_filter"]) -> MetaOapg.properties.default_list_filter: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["minimum_required_tags"]) -> MetaOapg.properties.minimum_required_tags: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["navigate_to_first_post_after_read"]) -> MetaOapg.properties.navigate_to_first_post_after_read: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["allowed_tags"]) -> MetaOapg.properties.allowed_tags: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["allowed_tag_groups"]) -> MetaOapg.properties.allowed_tag_groups: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["allow_global_tags"]) -> MetaOapg.properties.allow_global_tags: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["required_tag_groups"]) -> MetaOapg.properties.required_tag_groups: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["read_only_banner"]) -> MetaOapg.properties.read_only_banner: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["uploaded_logo"]) -> MetaOapg.properties.uploaded_logo: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["uploaded_logo_dark"]) -> MetaOapg.properties.uploaded_logo_dark: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["uploaded_background"]) -> MetaOapg.properties.uploaded_background: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["uploaded_background_dark"]) -> MetaOapg.properties.uploaded_background_dark: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["can_edit"]) -> MetaOapg.properties.can_edit: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["custom_fields"]) -> MetaOapg.properties.custom_fields: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["parent_category_id"]) -> MetaOapg.properties.parent_category_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["form_template_ids"]) -> MetaOapg.properties.form_template_ids: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "id", "name", "color", "text_color", "slug", "topic_count", "post_count", "position", "description_text", "description_excerpt", "topic_url", "read_restricted", "permission", "notification_level", "topic_template", "has_children", "sort_order", "sort_ascending", "show_subcategory_list", "num_featured_topics", "default_view", "subcategory_list_style", "default_top_period", "default_list_filter", "minimum_required_tags", "navigate_to_first_post_after_read", "allowed_tags", "allowed_tag_groups", "allow_global_tags", "required_tag_groups", "read_only_banner", "uploaded_logo", "uploaded_logo_dark", "uploaded_background", "uploaded_background_dark", "can_edit", "custom_fields", "parent_category_id", "form_template_ids", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["text_color"]) -> MetaOapg.properties.text_color: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["topic_count"]) -> MetaOapg.properties.topic_count: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["post_count"]) -> MetaOapg.properties.post_count: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["position"]) -> MetaOapg.properties.position: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["description_text"]) -> typing.Union[MetaOapg.properties.description_text, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["description_excerpt"]) -> typing.Union[MetaOapg.properties.description_excerpt, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["topic_url"]) -> MetaOapg.properties.topic_url: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["read_restricted"]) -> MetaOapg.properties.read_restricted: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["permission"]) -> MetaOapg.properties.permission: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["notification_level"]) -> MetaOapg.properties.notification_level: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["topic_template"]) -> MetaOapg.properties.topic_template: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["has_children"]) -> MetaOapg.properties.has_children: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["sort_order"]) -> MetaOapg.properties.sort_order: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["sort_ascending"]) -> MetaOapg.properties.sort_ascending: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["show_subcategory_list"]) -> MetaOapg.properties.show_subcategory_list: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["num_featured_topics"]) -> MetaOapg.properties.num_featured_topics: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["default_view"]) -> MetaOapg.properties.default_view: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["subcategory_list_style"]) -> MetaOapg.properties.subcategory_list_style: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["default_top_period"]) -> MetaOapg.properties.default_top_period: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["default_list_filter"]) -> MetaOapg.properties.default_list_filter: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["minimum_required_tags"]) -> MetaOapg.properties.minimum_required_tags: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["navigate_to_first_post_after_read"]) -> MetaOapg.properties.navigate_to_first_post_after_read: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["allowed_tags"]) -> MetaOapg.properties.allowed_tags: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["allowed_tag_groups"]) -> MetaOapg.properties.allowed_tag_groups: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["allow_global_tags"]) -> MetaOapg.properties.allow_global_tags: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["required_tag_groups"]) -> MetaOapg.properties.required_tag_groups: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["read_only_banner"]) -> MetaOapg.properties.read_only_banner: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["uploaded_logo"]) -> MetaOapg.properties.uploaded_logo: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["uploaded_logo_dark"]) -> MetaOapg.properties.uploaded_logo_dark: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["uploaded_background"]) -> MetaOapg.properties.uploaded_background: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["uploaded_background_dark"]) -> MetaOapg.properties.uploaded_background_dark: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["can_edit"]) -> MetaOapg.properties.can_edit: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["custom_fields"]) -> typing.Union[MetaOapg.properties.custom_fields, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["parent_category_id"]) -> typing.Union[MetaOapg.properties.parent_category_id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["form_template_ids"]) -> typing.Union[MetaOapg.properties.form_template_ids, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "id", "name", "color", "text_color", "slug", "topic_count", "post_count", "position", "description_text", "description_excerpt", "topic_url", "read_restricted", "permission", "notification_level", "topic_template", "has_children", "sort_order", "sort_ascending", "show_subcategory_list", "num_featured_topics", "default_view", "subcategory_list_style", "default_top_period", "default_list_filter", "minimum_required_tags", "navigate_to_first_post_after_read", "allowed_tags", "allowed_tag_groups", "allow_global_tags", "required_tag_groups", "read_only_banner", "uploaded_logo", "uploaded_logo_dark", "uploaded_background", "uploaded_background_dark", "can_edit", "custom_fields", "parent_category_id", "form_template_ids", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            uploaded_background: typing.Union[MetaOapg.properties.uploaded_background, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            color: typing.Union[MetaOapg.properties.color, str, ],
                            uploaded_background_dark: typing.Union[MetaOapg.properties.uploaded_background_dark, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            navigate_to_first_post_after_read: typing.Union[MetaOapg.properties.navigate_to_first_post_after_read, bool, ],
                            topic_template: typing.Union[MetaOapg.properties.topic_template, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            read_only_banner: typing.Union[MetaOapg.properties.read_only_banner, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            show_subcategory_list: typing.Union[MetaOapg.properties.show_subcategory_list, bool, ],
                            uploaded_logo: typing.Union[MetaOapg.properties.uploaded_logo, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            sort_ascending: typing.Union[MetaOapg.properties.sort_ascending, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            num_featured_topics: typing.Union[MetaOapg.properties.num_featured_topics, decimal.Decimal, int, ],
                            allowed_tags: typing.Union[MetaOapg.properties.allowed_tags, list, tuple, ],
                            id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
                            default_view: typing.Union[MetaOapg.properties.default_view, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            sort_order: typing.Union[MetaOapg.properties.sort_order, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            slug: typing.Union[MetaOapg.properties.slug, str, ],
                            subcategory_list_style: typing.Union[MetaOapg.properties.subcategory_list_style, str, ],
                            has_children: typing.Union[MetaOapg.properties.has_children, bool, ],
                            default_top_period: typing.Union[MetaOapg.properties.default_top_period, str, ],
                            can_edit: typing.Union[MetaOapg.properties.can_edit, bool, ],
                            permission: typing.Union[MetaOapg.properties.permission, decimal.Decimal, int, ],
                            topic_count: typing.Union[MetaOapg.properties.topic_count, decimal.Decimal, int, ],
                            uploaded_logo_dark: typing.Union[MetaOapg.properties.uploaded_logo_dark, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            read_restricted: typing.Union[MetaOapg.properties.read_restricted, bool, ],
                            allow_global_tags: typing.Union[MetaOapg.properties.allow_global_tags, bool, ],
                            minimum_required_tags: typing.Union[MetaOapg.properties.minimum_required_tags, decimal.Decimal, int, ],
                            topic_url: typing.Union[MetaOapg.properties.topic_url, str, ],
                            allowed_tag_groups: typing.Union[MetaOapg.properties.allowed_tag_groups, list, tuple, ],
                            default_list_filter: typing.Union[MetaOapg.properties.default_list_filter, str, ],
                            name: typing.Union[MetaOapg.properties.name, str, ],
                            notification_level: typing.Union[MetaOapg.properties.notification_level, decimal.Decimal, int, ],
                            position: typing.Union[MetaOapg.properties.position, decimal.Decimal, int, ],
                            post_count: typing.Union[MetaOapg.properties.post_count, decimal.Decimal, int, ],
                            text_color: typing.Union[MetaOapg.properties.text_color, str, ],
                            required_tag_groups: typing.Union[MetaOapg.properties.required_tag_groups, list, tuple, ],
                            description: typing.Union[MetaOapg.properties.description, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                            description_text: typing.Union[MetaOapg.properties.description_text, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                            description_excerpt: typing.Union[MetaOapg.properties.description_excerpt, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                            custom_fields: typing.Union[MetaOapg.properties.custom_fields, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                            parent_category_id: typing.Union[MetaOapg.properties.parent_category_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            form_template_ids: typing.Union[MetaOapg.properties.form_template_ids, list, tuple, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                uploaded_background=uploaded_background,
                                color=color,
                                uploaded_background_dark=uploaded_background_dark,
                                navigate_to_first_post_after_read=navigate_to_first_post_after_read,
                                topic_template=topic_template,
                                read_only_banner=read_only_banner,
                                show_subcategory_list=show_subcategory_list,
                                uploaded_logo=uploaded_logo,
                                sort_ascending=sort_ascending,
                                num_featured_topics=num_featured_topics,
                                allowed_tags=allowed_tags,
                                id=id,
                                default_view=default_view,
                                sort_order=sort_order,
                                slug=slug,
                                subcategory_list_style=subcategory_list_style,
                                has_children=has_children,
                                default_top_period=default_top_period,
                                can_edit=can_edit,
                                permission=permission,
                                topic_count=topic_count,
                                uploaded_logo_dark=uploaded_logo_dark,
                                read_restricted=read_restricted,
                                allow_global_tags=allow_global_tags,
                                minimum_required_tags=minimum_required_tags,
                                topic_url=topic_url,
                                allowed_tag_groups=allowed_tag_groups,
                                default_list_filter=default_list_filter,
                                name=name,
                                notification_level=notification_level,
                                position=position,
                                post_count=post_count,
                                text_color=text_color,
                                required_tag_groups=required_tag_groups,
                                description=description,
                                description_text=description_text,
                                description_excerpt=description_excerpt,
                                custom_fields=custom_fields,
                                parent_category_id=parent_category_id,
                                form_template_ids=form_template_ids,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'categories':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class archetypes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "name",
                                "options",
                                "id",
                            }
                            
                            class properties:
                                id = schemas.StrSchema
                                name = schemas.StrSchema
                                
                                
                                class options(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.AnyTypeSchema
                                
                                    def __new__(
                                        cls,
                                        arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'options':
                                        return super().__new__(
                                            cls,
                                            arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                __annotations__ = {
                                    "id": id,
                                    "name": name,
                                    "options": options,
                                }
                        
                        name: MetaOapg.properties.name
                        options: MetaOapg.properties.options
                        id: MetaOapg.properties.id
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["options"]) -> MetaOapg.properties.options: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "options", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["options"]) -> MetaOapg.properties.options: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "options", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            name: typing.Union[MetaOapg.properties.name, str, ],
                            options: typing.Union[MetaOapg.properties.options, list, tuple, ],
                            id: typing.Union[MetaOapg.properties.id, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                name=name,
                                options=options,
                                id=id,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'archetypes':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class user_fields(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.AnyTypeSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'user_fields':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class auth_providers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.AnyTypeSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'auth_providers':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class user_tips(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "first_notification",
                        "post_menu",
                        "suggested_topics",
                        "topic_notification_levels",
                        "topic_timeline",
                        "admin_guide",
                    }
                    
                    class properties:
                        first_notification = schemas.IntSchema
                        topic_timeline = schemas.IntSchema
                        post_menu = schemas.IntSchema
                        topic_notification_levels = schemas.IntSchema
                        suggested_topics = schemas.IntSchema
                        admin_guide = schemas.IntSchema
                        __annotations__ = {
                            "first_notification": first_notification,
                            "topic_timeline": topic_timeline,
                            "post_menu": post_menu,
                            "topic_notification_levels": topic_notification_levels,
                            "suggested_topics": suggested_topics,
                            "admin_guide": admin_guide,
                        }
                
                first_notification: MetaOapg.properties.first_notification
                post_menu: MetaOapg.properties.post_menu
                suggested_topics: MetaOapg.properties.suggested_topics
                topic_notification_levels: MetaOapg.properties.topic_notification_levels
                topic_timeline: MetaOapg.properties.topic_timeline
                admin_guide: MetaOapg.properties.admin_guide
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["first_notification"]) -> MetaOapg.properties.first_notification: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["topic_timeline"]) -> MetaOapg.properties.topic_timeline: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["post_menu"]) -> MetaOapg.properties.post_menu: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["topic_notification_levels"]) -> MetaOapg.properties.topic_notification_levels: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["suggested_topics"]) -> MetaOapg.properties.suggested_topics: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["admin_guide"]) -> MetaOapg.properties.admin_guide: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["first_notification", "topic_timeline", "post_menu", "topic_notification_levels", "suggested_topics", "admin_guide", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["first_notification"]) -> MetaOapg.properties.first_notification: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["topic_timeline"]) -> MetaOapg.properties.topic_timeline: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["post_menu"]) -> MetaOapg.properties.post_menu: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["topic_notification_levels"]) -> MetaOapg.properties.topic_notification_levels: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["suggested_topics"]) -> MetaOapg.properties.suggested_topics: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["admin_guide"]) -> MetaOapg.properties.admin_guide: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["first_notification", "topic_timeline", "post_menu", "topic_notification_levels", "suggested_topics", "admin_guide", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    first_notification: typing.Union[MetaOapg.properties.first_notification, decimal.Decimal, int, ],
                    post_menu: typing.Union[MetaOapg.properties.post_menu, decimal.Decimal, int, ],
                    suggested_topics: typing.Union[MetaOapg.properties.suggested_topics, decimal.Decimal, int, ],
                    topic_notification_levels: typing.Union[MetaOapg.properties.topic_notification_levels, decimal.Decimal, int, ],
                    topic_timeline: typing.Union[MetaOapg.properties.topic_timeline, decimal.Decimal, int, ],
                    admin_guide: typing.Union[MetaOapg.properties.admin_guide, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'user_tips':
                    return super().__new__(
                        cls,
                        *args,
                        first_notification=first_notification,
                        post_menu=post_menu,
                        suggested_topics=suggested_topics,
                        topic_notification_levels=topic_notification_levels,
                        topic_timeline=topic_timeline,
                        admin_guide=admin_guide,
                        _configuration=_configuration,
                        **kwargs,
                    )
            wizard_required = schemas.BoolSchema
            can_associate_groups = schemas.BoolSchema
            markdown_additional_options = schemas.DictSchema
            hashtag_configurations = schemas.DictSchema
            hashtag_icons = schemas.DictSchema
            
            
            class displayed_about_plugin_stat_groups(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.AnyTypeSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'displayed_about_plugin_stat_groups':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class whispers_allowed_groups_names(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.AnyTypeSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'whispers_allowed_groups_names':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class denied_emojis(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.AnyTypeSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'denied_emojis':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class navigation_menu_site_top_tags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.AnyTypeSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'navigation_menu_site_top_tags':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "default_archetype": default_archetype,
                "notification_types": notification_types,
                "post_types": post_types,
                "trust_levels": trust_levels,
                "groups": groups,
                "filters": filters,
                "periods": periods,
                "top_menu_items": top_menu_items,
                "anonymous_top_menu_items": anonymous_top_menu_items,
                "uncategorized_category_id": uncategorized_category_id,
                "user_field_max_length": user_field_max_length,
                "post_action_types": post_action_types,
                "topic_flag_types": topic_flag_types,
                "can_create_tag": can_create_tag,
                "can_tag_topics": can_tag_topics,
                "can_tag_pms": can_tag_pms,
                "tags_filter_regexp": tags_filter_regexp,
                "top_tags": top_tags,
                "topic_featured_link_allowed_category_ids": topic_featured_link_allowed_category_ids,
                "user_themes": user_themes,
                "user_color_schemes": user_color_schemes,
                "default_dark_color_scheme": default_dark_color_scheme,
                "censored_regexp": censored_regexp,
                "custom_emoji_translation": custom_emoji_translation,
                "watched_words_replace": watched_words_replace,
                "watched_words_link": watched_words_link,
                "categories": categories,
                "archetypes": archetypes,
                "user_fields": user_fields,
                "auth_providers": auth_providers,
                "user_tips": user_tips,
                "wizard_required": wizard_required,
                "can_associate_groups": can_associate_groups,
                "markdown_additional_options": markdown_additional_options,
                "hashtag_configurations": hashtag_configurations,
                "hashtag_icons": hashtag_icons,
                "displayed_about_plugin_stat_groups": displayed_about_plugin_stat_groups,
                "whispers_allowed_groups_names": whispers_allowed_groups_names,
                "denied_emojis": denied_emojis,
                "navigation_menu_site_top_tags": navigation_menu_site_top_tags,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    user_color_schemes: MetaOapg.properties.user_color_schemes
    user_field_max_length: MetaOapg.properties.user_field_max_length
    topic_featured_link_allowed_category_ids: MetaOapg.properties.topic_featured_link_allowed_category_ids
    default_archetype: MetaOapg.properties.default_archetype
    post_action_types: MetaOapg.properties.post_action_types
    watched_words_replace: MetaOapg.properties.watched_words_replace
    tags_filter_regexp: MetaOapg.properties.tags_filter_regexp
    user_fields: MetaOapg.properties.user_fields
    archetypes: MetaOapg.properties.archetypes
    topic_flag_types: MetaOapg.properties.topic_flag_types
    can_create_tag: MetaOapg.properties.can_create_tag
    periods: MetaOapg.properties.periods
    trust_levels: MetaOapg.properties.trust_levels
    categories: MetaOapg.properties.categories
    watched_words_link: MetaOapg.properties.watched_words_link
    censored_regexp: MetaOapg.properties.censored_regexp
    default_dark_color_scheme: MetaOapg.properties.default_dark_color_scheme
    anonymous_top_menu_items: MetaOapg.properties.anonymous_top_menu_items
    notification_types: MetaOapg.properties.notification_types
    custom_emoji_translation: MetaOapg.properties.custom_emoji_translation
    post_types: MetaOapg.properties.post_types
    can_tag_topics: MetaOapg.properties.can_tag_topics
    top_tags: MetaOapg.properties.top_tags
    groups: MetaOapg.properties.groups
    user_themes: MetaOapg.properties.user_themes
    filters: MetaOapg.properties.filters
    can_tag_pms: MetaOapg.properties.can_tag_pms
    uncategorized_category_id: MetaOapg.properties.uncategorized_category_id
    top_menu_items: MetaOapg.properties.top_menu_items
    auth_providers: MetaOapg.properties.auth_providers
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_color_schemes"]) -> MetaOapg.properties.user_color_schemes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_field_max_length"]) -> MetaOapg.properties.user_field_max_length: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["topic_featured_link_allowed_category_ids"]) -> MetaOapg.properties.topic_featured_link_allowed_category_ids: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_archetype"]) -> MetaOapg.properties.default_archetype: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["post_action_types"]) -> MetaOapg.properties.post_action_types: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["watched_words_replace"]) -> MetaOapg.properties.watched_words_replace: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags_filter_regexp"]) -> MetaOapg.properties.tags_filter_regexp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_fields"]) -> MetaOapg.properties.user_fields: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["archetypes"]) -> MetaOapg.properties.archetypes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["topic_flag_types"]) -> MetaOapg.properties.topic_flag_types: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_create_tag"]) -> MetaOapg.properties.can_create_tag: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["periods"]) -> MetaOapg.properties.periods: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trust_levels"]) -> MetaOapg.properties.trust_levels: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["categories"]) -> MetaOapg.properties.categories: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["watched_words_link"]) -> MetaOapg.properties.watched_words_link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["censored_regexp"]) -> MetaOapg.properties.censored_regexp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default_dark_color_scheme"]) -> MetaOapg.properties.default_dark_color_scheme: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["anonymous_top_menu_items"]) -> MetaOapg.properties.anonymous_top_menu_items: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notification_types"]) -> MetaOapg.properties.notification_types: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_emoji_translation"]) -> MetaOapg.properties.custom_emoji_translation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["post_types"]) -> MetaOapg.properties.post_types: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_tag_topics"]) -> MetaOapg.properties.can_tag_topics: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["top_tags"]) -> MetaOapg.properties.top_tags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groups"]) -> MetaOapg.properties.groups: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_themes"]) -> MetaOapg.properties.user_themes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filters"]) -> MetaOapg.properties.filters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_tag_pms"]) -> MetaOapg.properties.can_tag_pms: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uncategorized_category_id"]) -> MetaOapg.properties.uncategorized_category_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["top_menu_items"]) -> MetaOapg.properties.top_menu_items: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auth_providers"]) -> MetaOapg.properties.auth_providers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_tips"]) -> MetaOapg.properties.user_tips: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wizard_required"]) -> MetaOapg.properties.wizard_required: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_associate_groups"]) -> MetaOapg.properties.can_associate_groups: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["markdown_additional_options"]) -> MetaOapg.properties.markdown_additional_options: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hashtag_configurations"]) -> MetaOapg.properties.hashtag_configurations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hashtag_icons"]) -> MetaOapg.properties.hashtag_icons: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayed_about_plugin_stat_groups"]) -> MetaOapg.properties.displayed_about_plugin_stat_groups: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["whispers_allowed_groups_names"]) -> MetaOapg.properties.whispers_allowed_groups_names: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["denied_emojis"]) -> MetaOapg.properties.denied_emojis: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["navigation_menu_site_top_tags"]) -> MetaOapg.properties.navigation_menu_site_top_tags: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["user_color_schemes"], typing_extensions.Literal["user_field_max_length"], typing_extensions.Literal["topic_featured_link_allowed_category_ids"], typing_extensions.Literal["default_archetype"], typing_extensions.Literal["post_action_types"], typing_extensions.Literal["watched_words_replace"], typing_extensions.Literal["tags_filter_regexp"], typing_extensions.Literal["user_fields"], typing_extensions.Literal["archetypes"], typing_extensions.Literal["topic_flag_types"], typing_extensions.Literal["can_create_tag"], typing_extensions.Literal["periods"], typing_extensions.Literal["trust_levels"], typing_extensions.Literal["categories"], typing_extensions.Literal["watched_words_link"], typing_extensions.Literal["censored_regexp"], typing_extensions.Literal["default_dark_color_scheme"], typing_extensions.Literal["anonymous_top_menu_items"], typing_extensions.Literal["notification_types"], typing_extensions.Literal["custom_emoji_translation"], typing_extensions.Literal["post_types"], typing_extensions.Literal["can_tag_topics"], typing_extensions.Literal["top_tags"], typing_extensions.Literal["groups"], typing_extensions.Literal["user_themes"], typing_extensions.Literal["filters"], typing_extensions.Literal["can_tag_pms"], typing_extensions.Literal["uncategorized_category_id"], typing_extensions.Literal["top_menu_items"], typing_extensions.Literal["auth_providers"], typing_extensions.Literal["user_tips"], typing_extensions.Literal["wizard_required"], typing_extensions.Literal["can_associate_groups"], typing_extensions.Literal["markdown_additional_options"], typing_extensions.Literal["hashtag_configurations"], typing_extensions.Literal["hashtag_icons"], typing_extensions.Literal["displayed_about_plugin_stat_groups"], typing_extensions.Literal["whispers_allowed_groups_names"], typing_extensions.Literal["denied_emojis"], typing_extensions.Literal["navigation_menu_site_top_tags"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_color_schemes"]) -> MetaOapg.properties.user_color_schemes: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_field_max_length"]) -> MetaOapg.properties.user_field_max_length: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["topic_featured_link_allowed_category_ids"]) -> MetaOapg.properties.topic_featured_link_allowed_category_ids: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_archetype"]) -> MetaOapg.properties.default_archetype: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["post_action_types"]) -> MetaOapg.properties.post_action_types: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["watched_words_replace"]) -> MetaOapg.properties.watched_words_replace: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags_filter_regexp"]) -> MetaOapg.properties.tags_filter_regexp: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_fields"]) -> MetaOapg.properties.user_fields: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["archetypes"]) -> MetaOapg.properties.archetypes: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["topic_flag_types"]) -> MetaOapg.properties.topic_flag_types: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_create_tag"]) -> MetaOapg.properties.can_create_tag: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["periods"]) -> MetaOapg.properties.periods: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trust_levels"]) -> MetaOapg.properties.trust_levels: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["categories"]) -> MetaOapg.properties.categories: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["watched_words_link"]) -> MetaOapg.properties.watched_words_link: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["censored_regexp"]) -> MetaOapg.properties.censored_regexp: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default_dark_color_scheme"]) -> MetaOapg.properties.default_dark_color_scheme: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["anonymous_top_menu_items"]) -> MetaOapg.properties.anonymous_top_menu_items: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notification_types"]) -> MetaOapg.properties.notification_types: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_emoji_translation"]) -> MetaOapg.properties.custom_emoji_translation: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["post_types"]) -> MetaOapg.properties.post_types: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_tag_topics"]) -> MetaOapg.properties.can_tag_topics: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["top_tags"]) -> MetaOapg.properties.top_tags: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groups"]) -> MetaOapg.properties.groups: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_themes"]) -> MetaOapg.properties.user_themes: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filters"]) -> MetaOapg.properties.filters: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_tag_pms"]) -> MetaOapg.properties.can_tag_pms: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uncategorized_category_id"]) -> MetaOapg.properties.uncategorized_category_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["top_menu_items"]) -> MetaOapg.properties.top_menu_items: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auth_providers"]) -> MetaOapg.properties.auth_providers: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_tips"]) -> typing.Union[MetaOapg.properties.user_tips, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wizard_required"]) -> typing.Union[MetaOapg.properties.wizard_required, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_associate_groups"]) -> typing.Union[MetaOapg.properties.can_associate_groups, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["markdown_additional_options"]) -> typing.Union[MetaOapg.properties.markdown_additional_options, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hashtag_configurations"]) -> typing.Union[MetaOapg.properties.hashtag_configurations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hashtag_icons"]) -> typing.Union[MetaOapg.properties.hashtag_icons, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayed_about_plugin_stat_groups"]) -> typing.Union[MetaOapg.properties.displayed_about_plugin_stat_groups, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["whispers_allowed_groups_names"]) -> typing.Union[MetaOapg.properties.whispers_allowed_groups_names, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["denied_emojis"]) -> typing.Union[MetaOapg.properties.denied_emojis, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["navigation_menu_site_top_tags"]) -> typing.Union[MetaOapg.properties.navigation_menu_site_top_tags, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["user_color_schemes"], typing_extensions.Literal["user_field_max_length"], typing_extensions.Literal["topic_featured_link_allowed_category_ids"], typing_extensions.Literal["default_archetype"], typing_extensions.Literal["post_action_types"], typing_extensions.Literal["watched_words_replace"], typing_extensions.Literal["tags_filter_regexp"], typing_extensions.Literal["user_fields"], typing_extensions.Literal["archetypes"], typing_extensions.Literal["topic_flag_types"], typing_extensions.Literal["can_create_tag"], typing_extensions.Literal["periods"], typing_extensions.Literal["trust_levels"], typing_extensions.Literal["categories"], typing_extensions.Literal["watched_words_link"], typing_extensions.Literal["censored_regexp"], typing_extensions.Literal["default_dark_color_scheme"], typing_extensions.Literal["anonymous_top_menu_items"], typing_extensions.Literal["notification_types"], typing_extensions.Literal["custom_emoji_translation"], typing_extensions.Literal["post_types"], typing_extensions.Literal["can_tag_topics"], typing_extensions.Literal["top_tags"], typing_extensions.Literal["groups"], typing_extensions.Literal["user_themes"], typing_extensions.Literal["filters"], typing_extensions.Literal["can_tag_pms"], typing_extensions.Literal["uncategorized_category_id"], typing_extensions.Literal["top_menu_items"], typing_extensions.Literal["auth_providers"], typing_extensions.Literal["user_tips"], typing_extensions.Literal["wizard_required"], typing_extensions.Literal["can_associate_groups"], typing_extensions.Literal["markdown_additional_options"], typing_extensions.Literal["hashtag_configurations"], typing_extensions.Literal["hashtag_icons"], typing_extensions.Literal["displayed_about_plugin_stat_groups"], typing_extensions.Literal["whispers_allowed_groups_names"], typing_extensions.Literal["denied_emojis"], typing_extensions.Literal["navigation_menu_site_top_tags"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        user_color_schemes: typing.Union[MetaOapg.properties.user_color_schemes, list, tuple, ],
        user_field_max_length: typing.Union[MetaOapg.properties.user_field_max_length, decimal.Decimal, int, ],
        topic_featured_link_allowed_category_ids: typing.Union[MetaOapg.properties.topic_featured_link_allowed_category_ids, list, tuple, ],
        default_archetype: typing.Union[MetaOapg.properties.default_archetype, str, ],
        post_action_types: typing.Union[MetaOapg.properties.post_action_types, list, tuple, ],
        watched_words_replace: typing.Union[MetaOapg.properties.watched_words_replace, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        tags_filter_regexp: typing.Union[MetaOapg.properties.tags_filter_regexp, str, ],
        user_fields: typing.Union[MetaOapg.properties.user_fields, list, tuple, ],
        archetypes: typing.Union[MetaOapg.properties.archetypes, list, tuple, ],
        topic_flag_types: typing.Union[MetaOapg.properties.topic_flag_types, list, tuple, ],
        can_create_tag: typing.Union[MetaOapg.properties.can_create_tag, bool, ],
        periods: typing.Union[MetaOapg.properties.periods, list, tuple, ],
        trust_levels: typing.Union[MetaOapg.properties.trust_levels, dict, frozendict.frozendict, ],
        categories: typing.Union[MetaOapg.properties.categories, list, tuple, ],
        watched_words_link: typing.Union[MetaOapg.properties.watched_words_link, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        censored_regexp: typing.Union[MetaOapg.properties.censored_regexp, list, tuple, ],
        default_dark_color_scheme: typing.Union[MetaOapg.properties.default_dark_color_scheme, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        anonymous_top_menu_items: typing.Union[MetaOapg.properties.anonymous_top_menu_items, list, tuple, ],
        notification_types: typing.Union[MetaOapg.properties.notification_types, dict, frozendict.frozendict, ],
        custom_emoji_translation: typing.Union[MetaOapg.properties.custom_emoji_translation, dict, frozendict.frozendict, ],
        post_types: typing.Union[MetaOapg.properties.post_types, dict, frozendict.frozendict, ],
        can_tag_topics: typing.Union[MetaOapg.properties.can_tag_topics, bool, ],
        top_tags: typing.Union[MetaOapg.properties.top_tags, list, tuple, ],
        groups: typing.Union[MetaOapg.properties.groups, list, tuple, ],
        user_themes: typing.Union[MetaOapg.properties.user_themes, list, tuple, ],
        filters: typing.Union[MetaOapg.properties.filters, list, tuple, ],
        can_tag_pms: typing.Union[MetaOapg.properties.can_tag_pms, bool, ],
        uncategorized_category_id: typing.Union[MetaOapg.properties.uncategorized_category_id, decimal.Decimal, int, ],
        top_menu_items: typing.Union[MetaOapg.properties.top_menu_items, list, tuple, ],
        auth_providers: typing.Union[MetaOapg.properties.auth_providers, list, tuple, ],
        user_tips: typing.Union[MetaOapg.properties.user_tips, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        wizard_required: typing.Union[MetaOapg.properties.wizard_required, bool, schemas.Unset] = schemas.unset,
        can_associate_groups: typing.Union[MetaOapg.properties.can_associate_groups, bool, schemas.Unset] = schemas.unset,
        markdown_additional_options: typing.Union[MetaOapg.properties.markdown_additional_options, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        hashtag_configurations: typing.Union[MetaOapg.properties.hashtag_configurations, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        hashtag_icons: typing.Union[MetaOapg.properties.hashtag_icons, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        displayed_about_plugin_stat_groups: typing.Union[MetaOapg.properties.displayed_about_plugin_stat_groups, list, tuple, schemas.Unset] = schemas.unset,
        whispers_allowed_groups_names: typing.Union[MetaOapg.properties.whispers_allowed_groups_names, list, tuple, schemas.Unset] = schemas.unset,
        denied_emojis: typing.Union[MetaOapg.properties.denied_emojis, list, tuple, schemas.Unset] = schemas.unset,
        navigation_menu_site_top_tags: typing.Union[MetaOapg.properties.navigation_menu_site_top_tags, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs,
    ) -> 'SiteGetCategoriesAndSubcategoriesResponse':
        return super().__new__(
            cls,
            *args,
            user_color_schemes=user_color_schemes,
            user_field_max_length=user_field_max_length,
            topic_featured_link_allowed_category_ids=topic_featured_link_allowed_category_ids,
            default_archetype=default_archetype,
            post_action_types=post_action_types,
            watched_words_replace=watched_words_replace,
            tags_filter_regexp=tags_filter_regexp,
            user_fields=user_fields,
            archetypes=archetypes,
            topic_flag_types=topic_flag_types,
            can_create_tag=can_create_tag,
            periods=periods,
            trust_levels=trust_levels,
            categories=categories,
            watched_words_link=watched_words_link,
            censored_regexp=censored_regexp,
            default_dark_color_scheme=default_dark_color_scheme,
            anonymous_top_menu_items=anonymous_top_menu_items,
            notification_types=notification_types,
            custom_emoji_translation=custom_emoji_translation,
            post_types=post_types,
            can_tag_topics=can_tag_topics,
            top_tags=top_tags,
            groups=groups,
            user_themes=user_themes,
            filters=filters,
            can_tag_pms=can_tag_pms,
            uncategorized_category_id=uncategorized_category_id,
            top_menu_items=top_menu_items,
            auth_providers=auth_providers,
            user_tips=user_tips,
            wizard_required=wizard_required,
            can_associate_groups=can_associate_groups,
            markdown_additional_options=markdown_additional_options,
            hashtag_configurations=hashtag_configurations,
            hashtag_icons=hashtag_icons,
            displayed_about_plugin_stat_groups=displayed_about_plugin_stat_groups,
            whispers_allowed_groups_names=whispers_allowed_groups_names,
            denied_emojis=denied_emojis,
            navigation_menu_site_top_tags=navigation_menu_site_top_tags,
            _configuration=_configuration,
        )
