# coding: utf-8

"""
    Discourse API Documentation

    This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 

    The version of the OpenAPI document: latest
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from discourse_python_sdk import schemas  # noqa: F401


class UsersListPublicUserResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "meta",
            "directory_items",
        }
        
        class properties:
            
            
            class directory_items(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "days_visited",
                                "posts_read",
                                "topics_entered",
                                "id",
                                "likes_given",
                                "post_count",
                                "likes_received",
                                "user",
                                "topic_count",
                            }
                            
                            class properties:
                                id = schemas.IntSchema
                                likes_received = schemas.IntSchema
                                likes_given = schemas.IntSchema
                                topics_entered = schemas.IntSchema
                                topic_count = schemas.IntSchema
                                post_count = schemas.IntSchema
                                posts_read = schemas.IntSchema
                                days_visited = schemas.IntSchema
                                
                                
                                class user(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        required = {
                                            "name",
                                            "id",
                                            "title",
                                            "avatar_template",
                                            "username",
                                        }
                                        
                                        class properties:
                                            title = schemas.AnyTypeSchema
                                            id = schemas.IntSchema
                                            username = schemas.StrSchema
                                            name = schemas.AnyTypeSchema
                                            avatar_template = schemas.StrSchema
                                            __annotations__ = {
                                                "title": title,
                                                "id": id,
                                                "username": username,
                                                "name": name,
                                                "avatar_template": avatar_template,
                                            }
                                    
                                    name: MetaOapg.properties.name
                                    id: MetaOapg.properties.id
                                    title: MetaOapg.properties.title
                                    avatar_template: MetaOapg.properties.avatar_template
                                    username: MetaOapg.properties.username
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["avatar_template"]) -> MetaOapg.properties.avatar_template: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "id", "username", "name", "avatar_template", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["avatar_template"]) -> MetaOapg.properties.avatar_template: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "id", "username", "name", "avatar_template", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        name: typing.Union[MetaOapg.properties.name, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
                                        title: typing.Union[MetaOapg.properties.title, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        avatar_template: typing.Union[MetaOapg.properties.avatar_template, str, ],
                                        username: typing.Union[MetaOapg.properties.username, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'user':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            name=name,
                                            id=id,
                                            title=title,
                                            avatar_template=avatar_template,
                                            username=username,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                __annotations__ = {
                                    "id": id,
                                    "likes_received": likes_received,
                                    "likes_given": likes_given,
                                    "topics_entered": topics_entered,
                                    "topic_count": topic_count,
                                    "post_count": post_count,
                                    "posts_read": posts_read,
                                    "days_visited": days_visited,
                                    "user": user,
                                }
                        
                        days_visited: MetaOapg.properties.days_visited
                        posts_read: MetaOapg.properties.posts_read
                        topics_entered: MetaOapg.properties.topics_entered
                        id: MetaOapg.properties.id
                        likes_given: MetaOapg.properties.likes_given
                        post_count: MetaOapg.properties.post_count
                        likes_received: MetaOapg.properties.likes_received
                        user: MetaOapg.properties.user
                        topic_count: MetaOapg.properties.topic_count
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["likes_received"]) -> MetaOapg.properties.likes_received: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["likes_given"]) -> MetaOapg.properties.likes_given: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["topics_entered"]) -> MetaOapg.properties.topics_entered: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["topic_count"]) -> MetaOapg.properties.topic_count: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["post_count"]) -> MetaOapg.properties.post_count: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["posts_read"]) -> MetaOapg.properties.posts_read: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["days_visited"]) -> MetaOapg.properties.days_visited: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "likes_received", "likes_given", "topics_entered", "topic_count", "post_count", "posts_read", "days_visited", "user", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["likes_received"]) -> MetaOapg.properties.likes_received: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["likes_given"]) -> MetaOapg.properties.likes_given: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["topics_entered"]) -> MetaOapg.properties.topics_entered: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["topic_count"]) -> MetaOapg.properties.topic_count: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["post_count"]) -> MetaOapg.properties.post_count: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["posts_read"]) -> MetaOapg.properties.posts_read: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["days_visited"]) -> MetaOapg.properties.days_visited: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "likes_received", "likes_given", "topics_entered", "topic_count", "post_count", "posts_read", "days_visited", "user", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            days_visited: typing.Union[MetaOapg.properties.days_visited, decimal.Decimal, int, ],
                            posts_read: typing.Union[MetaOapg.properties.posts_read, decimal.Decimal, int, ],
                            topics_entered: typing.Union[MetaOapg.properties.topics_entered, decimal.Decimal, int, ],
                            id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
                            likes_given: typing.Union[MetaOapg.properties.likes_given, decimal.Decimal, int, ],
                            post_count: typing.Union[MetaOapg.properties.post_count, decimal.Decimal, int, ],
                            likes_received: typing.Union[MetaOapg.properties.likes_received, decimal.Decimal, int, ],
                            user: typing.Union[MetaOapg.properties.user, dict, frozendict.frozendict, ],
                            topic_count: typing.Union[MetaOapg.properties.topic_count, decimal.Decimal, int, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                days_visited=days_visited,
                                posts_read=posts_read,
                                topics_entered=topics_entered,
                                id=id,
                                likes_given=likes_given,
                                post_count=post_count,
                                likes_received=likes_received,
                                user=user,
                                topic_count=topic_count,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'directory_items':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class meta(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "last_updated_at",
                        "load_more_directory_items",
                        "total_rows_directory_items",
                    }
                    
                    class properties:
                        last_updated_at = schemas.AnyTypeSchema
                        total_rows_directory_items = schemas.IntSchema
                        load_more_directory_items = schemas.StrSchema
                        __annotations__ = {
                            "last_updated_at": last_updated_at,
                            "total_rows_directory_items": total_rows_directory_items,
                            "load_more_directory_items": load_more_directory_items,
                        }
                
                last_updated_at: MetaOapg.properties.last_updated_at
                load_more_directory_items: MetaOapg.properties.load_more_directory_items
                total_rows_directory_items: MetaOapg.properties.total_rows_directory_items
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["last_updated_at"]) -> MetaOapg.properties.last_updated_at: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["total_rows_directory_items"]) -> MetaOapg.properties.total_rows_directory_items: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["load_more_directory_items"]) -> MetaOapg.properties.load_more_directory_items: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["last_updated_at", "total_rows_directory_items", "load_more_directory_items", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["last_updated_at"]) -> MetaOapg.properties.last_updated_at: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["total_rows_directory_items"]) -> MetaOapg.properties.total_rows_directory_items: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["load_more_directory_items"]) -> MetaOapg.properties.load_more_directory_items: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["last_updated_at", "total_rows_directory_items", "load_more_directory_items", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    last_updated_at: typing.Union[MetaOapg.properties.last_updated_at, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    load_more_directory_items: typing.Union[MetaOapg.properties.load_more_directory_items, str, ],
                    total_rows_directory_items: typing.Union[MetaOapg.properties.total_rows_directory_items, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'meta':
                    return super().__new__(
                        cls,
                        *args,
                        last_updated_at=last_updated_at,
                        load_more_directory_items=load_more_directory_items,
                        total_rows_directory_items=total_rows_directory_items,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "directory_items": directory_items,
                "meta": meta,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    meta: MetaOapg.properties.meta
    directory_items: MetaOapg.properties.directory_items
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["meta"]) -> MetaOapg.properties.meta: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["directory_items"]) -> MetaOapg.properties.directory_items: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["meta"], typing_extensions.Literal["directory_items"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["meta"]) -> MetaOapg.properties.meta: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["directory_items"]) -> MetaOapg.properties.directory_items: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["meta"], typing_extensions.Literal["directory_items"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        meta: typing.Union[MetaOapg.properties.meta, dict, frozendict.frozendict, ],
        directory_items: typing.Union[MetaOapg.properties.directory_items, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs,
    ) -> 'UsersListPublicUserResponse':
        return super().__new__(
            cls,
            *args,
            meta=meta,
            directory_items=directory_items,
            _configuration=_configuration,
        )
