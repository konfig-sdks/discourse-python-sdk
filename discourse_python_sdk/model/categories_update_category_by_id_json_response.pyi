# coding: utf-8

"""
    Discourse API Documentation

    This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 

    The version of the OpenAPI document: latest
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from discourse_python_sdk import schemas  # noqa: F401


class CategoriesUpdateCategoryByIdJsonResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "success",
            "category",
        }
        
        class properties:
            success = schemas.StrSchema
            
            
            class category(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "uploaded_background",
                        "form_template_ids",
                        "navigate_to_first_post_after_read",
                        "email_in_allow_strangers",
                        "read_only_banner",
                        "show_subcategory_list",
                        "uploaded_logo",
                        "description_excerpt",
                        "auto_close_based_on_last_post",
                        "can_delete",
                        "allow_unlimited_owner_edits_on_first_post",
                        "id",
                        "slug",
                        "auto_close_hours",
                        "subcategory_list_style",
                        "has_children",
                        "custom_fields",
                        "default_top_period",
                        "all_topics_wiki",
                        "allow_badges",
                        "description_text",
                        "minimum_required_tags",
                        "default_list_filter",
                        "name",
                        "notification_level",
                        "position",
                        "post_count",
                        "text_color",
                        "mailinglist_mirror",
                        "available_groups",
                        "color",
                        "uploaded_background_dark",
                        "description",
                        "topic_featured_link_allowed",
                        "topic_template",
                        "sort_ascending",
                        "num_featured_topics",
                        "group_permissions",
                        "search_priority",
                        "default_view",
                        "sort_order",
                        "can_edit",
                        "permission",
                        "topic_count",
                        "uploaded_logo_dark",
                        "read_restricted",
                        "topic_url",
                        "email_in",
                        "default_slow_mode_seconds",
                        "required_tag_groups",
                    }
                    
                    class properties:
                        description = schemas.AnyTypeSchema
                        id = schemas.IntSchema
                        name = schemas.StrSchema
                        color = schemas.StrSchema
                        text_color = schemas.StrSchema
                        slug = schemas.StrSchema
                        topic_count = schemas.IntSchema
                        post_count = schemas.IntSchema
                        position = schemas.IntSchema
                        description_text = schemas.AnyTypeSchema
                        description_excerpt = schemas.AnyTypeSchema
                        topic_url = schemas.AnyTypeSchema
                        read_restricted = schemas.BoolSchema
                        permission = schemas.AnyTypeSchema
                        notification_level = schemas.IntSchema
                        can_edit = schemas.BoolSchema
                        topic_template = schemas.AnyTypeSchema
                        
                        
                        class form_template_ids(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'form_template_ids':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        has_children = schemas.AnyTypeSchema
                        sort_order = schemas.AnyTypeSchema
                        sort_ascending = schemas.AnyTypeSchema
                        show_subcategory_list = schemas.BoolSchema
                        num_featured_topics = schemas.IntSchema
                        default_view = schemas.AnyTypeSchema
                        subcategory_list_style = schemas.StrSchema
                        default_top_period = schemas.StrSchema
                        default_list_filter = schemas.StrSchema
                        minimum_required_tags = schemas.IntSchema
                        navigate_to_first_post_after_read = schemas.BoolSchema
                        custom_fields = schemas.DictSchema
                        
                        
                        class allowed_tags(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'allowed_tags':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class allowed_tag_groups(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'allowed_tag_groups':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        allow_global_tags = schemas.BoolSchema
                        
                        
                        class required_tag_groups(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        required = {
                                            "name",
                                            "min_count",
                                        }
                                        
                                        class properties:
                                            name = schemas.StrSchema
                                            min_count = schemas.IntSchema
                                            __annotations__ = {
                                                "name": name,
                                                "min_count": min_count,
                                            }
                                    
                                    name: MetaOapg.properties.name
                                    min_count: MetaOapg.properties.min_count
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["min_count"]) -> MetaOapg.properties.min_count: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "min_count", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["min_count"]) -> MetaOapg.properties.min_count: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "min_count", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        name: typing.Union[MetaOapg.properties.name, str, ],
                                        min_count: typing.Union[MetaOapg.properties.min_count, decimal.Decimal, int, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            name=name,
                                            min_count=min_count,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'required_tag_groups':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        category_setting = schemas.AnyTypeSchema
                        read_only_banner = schemas.AnyTypeSchema
                        
                        
                        class available_groups(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'available_groups':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        auto_close_hours = schemas.AnyTypeSchema
                        auto_close_based_on_last_post = schemas.BoolSchema
                        allow_unlimited_owner_edits_on_first_post = schemas.BoolSchema
                        default_slow_mode_seconds = schemas.AnyTypeSchema
                        
                        
                        class group_permissions(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        required = {
                                            "permission_type",
                                            "group_name",
                                        }
                                        
                                        class properties:
                                            permission_type = schemas.IntSchema
                                            group_name = schemas.StrSchema
                                            __annotations__ = {
                                                "permission_type": permission_type,
                                                "group_name": group_name,
                                            }
                                    
                                    permission_type: MetaOapg.properties.permission_type
                                    group_name: MetaOapg.properties.group_name
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["permission_type"]) -> MetaOapg.properties.permission_type: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["group_name"]) -> MetaOapg.properties.group_name: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["permission_type", "group_name", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["permission_type"]) -> MetaOapg.properties.permission_type: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["group_name"]) -> MetaOapg.properties.group_name: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["permission_type", "group_name", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        permission_type: typing.Union[MetaOapg.properties.permission_type, decimal.Decimal, int, ],
                                        group_name: typing.Union[MetaOapg.properties.group_name, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            permission_type=permission_type,
                                            group_name=group_name,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'group_permissions':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        email_in = schemas.AnyTypeSchema
                        email_in_allow_strangers = schemas.BoolSchema
                        mailinglist_mirror = schemas.BoolSchema
                        all_topics_wiki = schemas.BoolSchema
                        can_delete = schemas.BoolSchema
                        allow_badges = schemas.BoolSchema
                        topic_featured_link_allowed = schemas.BoolSchema
                        search_priority = schemas.IntSchema
                        uploaded_logo = schemas.AnyTypeSchema
                        uploaded_logo_dark = schemas.AnyTypeSchema
                        uploaded_background = schemas.AnyTypeSchema
                        uploaded_background_dark = schemas.AnyTypeSchema
                        __annotations__ = {
                            "description": description,
                            "id": id,
                            "name": name,
                            "color": color,
                            "text_color": text_color,
                            "slug": slug,
                            "topic_count": topic_count,
                            "post_count": post_count,
                            "position": position,
                            "description_text": description_text,
                            "description_excerpt": description_excerpt,
                            "topic_url": topic_url,
                            "read_restricted": read_restricted,
                            "permission": permission,
                            "notification_level": notification_level,
                            "can_edit": can_edit,
                            "topic_template": topic_template,
                            "form_template_ids": form_template_ids,
                            "has_children": has_children,
                            "sort_order": sort_order,
                            "sort_ascending": sort_ascending,
                            "show_subcategory_list": show_subcategory_list,
                            "num_featured_topics": num_featured_topics,
                            "default_view": default_view,
                            "subcategory_list_style": subcategory_list_style,
                            "default_top_period": default_top_period,
                            "default_list_filter": default_list_filter,
                            "minimum_required_tags": minimum_required_tags,
                            "navigate_to_first_post_after_read": navigate_to_first_post_after_read,
                            "custom_fields": custom_fields,
                            "allowed_tags": allowed_tags,
                            "allowed_tag_groups": allowed_tag_groups,
                            "allow_global_tags": allow_global_tags,
                            "required_tag_groups": required_tag_groups,
                            "category_setting": category_setting,
                            "read_only_banner": read_only_banner,
                            "available_groups": available_groups,
                            "auto_close_hours": auto_close_hours,
                            "auto_close_based_on_last_post": auto_close_based_on_last_post,
                            "allow_unlimited_owner_edits_on_first_post": allow_unlimited_owner_edits_on_first_post,
                            "default_slow_mode_seconds": default_slow_mode_seconds,
                            "group_permissions": group_permissions,
                            "email_in": email_in,
                            "email_in_allow_strangers": email_in_allow_strangers,
                            "mailinglist_mirror": mailinglist_mirror,
                            "all_topics_wiki": all_topics_wiki,
                            "can_delete": can_delete,
                            "allow_badges": allow_badges,
                            "topic_featured_link_allowed": topic_featured_link_allowed,
                            "search_priority": search_priority,
                            "uploaded_logo": uploaded_logo,
                            "uploaded_logo_dark": uploaded_logo_dark,
                            "uploaded_background": uploaded_background,
                            "uploaded_background_dark": uploaded_background_dark,
                        }
                
                uploaded_background: MetaOapg.properties.uploaded_background
                form_template_ids: MetaOapg.properties.form_template_ids
                navigate_to_first_post_after_read: MetaOapg.properties.navigate_to_first_post_after_read
                email_in_allow_strangers: MetaOapg.properties.email_in_allow_strangers
                read_only_banner: MetaOapg.properties.read_only_banner
                show_subcategory_list: MetaOapg.properties.show_subcategory_list
                uploaded_logo: MetaOapg.properties.uploaded_logo
                description_excerpt: MetaOapg.properties.description_excerpt
                auto_close_based_on_last_post: MetaOapg.properties.auto_close_based_on_last_post
                can_delete: MetaOapg.properties.can_delete
                allow_unlimited_owner_edits_on_first_post: MetaOapg.properties.allow_unlimited_owner_edits_on_first_post
                id: MetaOapg.properties.id
                slug: MetaOapg.properties.slug
                auto_close_hours: MetaOapg.properties.auto_close_hours
                subcategory_list_style: MetaOapg.properties.subcategory_list_style
                has_children: MetaOapg.properties.has_children
                custom_fields: MetaOapg.properties.custom_fields
                default_top_period: MetaOapg.properties.default_top_period
                all_topics_wiki: MetaOapg.properties.all_topics_wiki
                allow_badges: MetaOapg.properties.allow_badges
                description_text: MetaOapg.properties.description_text
                minimum_required_tags: MetaOapg.properties.minimum_required_tags
                default_list_filter: MetaOapg.properties.default_list_filter
                name: MetaOapg.properties.name
                notification_level: MetaOapg.properties.notification_level
                position: MetaOapg.properties.position
                post_count: MetaOapg.properties.post_count
                text_color: MetaOapg.properties.text_color
                mailinglist_mirror: MetaOapg.properties.mailinglist_mirror
                available_groups: MetaOapg.properties.available_groups
                color: MetaOapg.properties.color
                uploaded_background_dark: MetaOapg.properties.uploaded_background_dark
                description: MetaOapg.properties.description
                topic_featured_link_allowed: MetaOapg.properties.topic_featured_link_allowed
                topic_template: MetaOapg.properties.topic_template
                sort_ascending: MetaOapg.properties.sort_ascending
                num_featured_topics: MetaOapg.properties.num_featured_topics
                group_permissions: MetaOapg.properties.group_permissions
                search_priority: MetaOapg.properties.search_priority
                default_view: MetaOapg.properties.default_view
                sort_order: MetaOapg.properties.sort_order
                can_edit: MetaOapg.properties.can_edit
                permission: MetaOapg.properties.permission
                topic_count: MetaOapg.properties.topic_count
                uploaded_logo_dark: MetaOapg.properties.uploaded_logo_dark
                read_restricted: MetaOapg.properties.read_restricted
                topic_url: MetaOapg.properties.topic_url
                email_in: MetaOapg.properties.email_in
                default_slow_mode_seconds: MetaOapg.properties.default_slow_mode_seconds
                required_tag_groups: MetaOapg.properties.required_tag_groups
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["text_color"]) -> MetaOapg.properties.text_color: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["topic_count"]) -> MetaOapg.properties.topic_count: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["post_count"]) -> MetaOapg.properties.post_count: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["position"]) -> MetaOapg.properties.position: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["description_text"]) -> MetaOapg.properties.description_text: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["description_excerpt"]) -> MetaOapg.properties.description_excerpt: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["topic_url"]) -> MetaOapg.properties.topic_url: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["read_restricted"]) -> MetaOapg.properties.read_restricted: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["permission"]) -> MetaOapg.properties.permission: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["notification_level"]) -> MetaOapg.properties.notification_level: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_edit"]) -> MetaOapg.properties.can_edit: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["topic_template"]) -> MetaOapg.properties.topic_template: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["form_template_ids"]) -> MetaOapg.properties.form_template_ids: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["has_children"]) -> MetaOapg.properties.has_children: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sort_order"]) -> MetaOapg.properties.sort_order: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sort_ascending"]) -> MetaOapg.properties.sort_ascending: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["show_subcategory_list"]) -> MetaOapg.properties.show_subcategory_list: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["num_featured_topics"]) -> MetaOapg.properties.num_featured_topics: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["default_view"]) -> MetaOapg.properties.default_view: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["subcategory_list_style"]) -> MetaOapg.properties.subcategory_list_style: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["default_top_period"]) -> MetaOapg.properties.default_top_period: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["default_list_filter"]) -> MetaOapg.properties.default_list_filter: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["minimum_required_tags"]) -> MetaOapg.properties.minimum_required_tags: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["navigate_to_first_post_after_read"]) -> MetaOapg.properties.navigate_to_first_post_after_read: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["custom_fields"]) -> MetaOapg.properties.custom_fields: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["allowed_tags"]) -> MetaOapg.properties.allowed_tags: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["allowed_tag_groups"]) -> MetaOapg.properties.allowed_tag_groups: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["allow_global_tags"]) -> MetaOapg.properties.allow_global_tags: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["required_tag_groups"]) -> MetaOapg.properties.required_tag_groups: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["category_setting"]) -> MetaOapg.properties.category_setting: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["read_only_banner"]) -> MetaOapg.properties.read_only_banner: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["available_groups"]) -> MetaOapg.properties.available_groups: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["auto_close_hours"]) -> MetaOapg.properties.auto_close_hours: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["auto_close_based_on_last_post"]) -> MetaOapg.properties.auto_close_based_on_last_post: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["allow_unlimited_owner_edits_on_first_post"]) -> MetaOapg.properties.allow_unlimited_owner_edits_on_first_post: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["default_slow_mode_seconds"]) -> MetaOapg.properties.default_slow_mode_seconds: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["group_permissions"]) -> MetaOapg.properties.group_permissions: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["email_in"]) -> MetaOapg.properties.email_in: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["email_in_allow_strangers"]) -> MetaOapg.properties.email_in_allow_strangers: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["mailinglist_mirror"]) -> MetaOapg.properties.mailinglist_mirror: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["all_topics_wiki"]) -> MetaOapg.properties.all_topics_wiki: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_delete"]) -> MetaOapg.properties.can_delete: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["allow_badges"]) -> MetaOapg.properties.allow_badges: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["topic_featured_link_allowed"]) -> MetaOapg.properties.topic_featured_link_allowed: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["search_priority"]) -> MetaOapg.properties.search_priority: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["uploaded_logo"]) -> MetaOapg.properties.uploaded_logo: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["uploaded_logo_dark"]) -> MetaOapg.properties.uploaded_logo_dark: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["uploaded_background"]) -> MetaOapg.properties.uploaded_background: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["uploaded_background_dark"]) -> MetaOapg.properties.uploaded_background_dark: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "id", "name", "color", "text_color", "slug", "topic_count", "post_count", "position", "description_text", "description_excerpt", "topic_url", "read_restricted", "permission", "notification_level", "can_edit", "topic_template", "form_template_ids", "has_children", "sort_order", "sort_ascending", "show_subcategory_list", "num_featured_topics", "default_view", "subcategory_list_style", "default_top_period", "default_list_filter", "minimum_required_tags", "navigate_to_first_post_after_read", "custom_fields", "allowed_tags", "allowed_tag_groups", "allow_global_tags", "required_tag_groups", "category_setting", "read_only_banner", "available_groups", "auto_close_hours", "auto_close_based_on_last_post", "allow_unlimited_owner_edits_on_first_post", "default_slow_mode_seconds", "group_permissions", "email_in", "email_in_allow_strangers", "mailinglist_mirror", "all_topics_wiki", "can_delete", "allow_badges", "topic_featured_link_allowed", "search_priority", "uploaded_logo", "uploaded_logo_dark", "uploaded_background", "uploaded_background_dark", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["text_color"]) -> MetaOapg.properties.text_color: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["topic_count"]) -> MetaOapg.properties.topic_count: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["post_count"]) -> MetaOapg.properties.post_count: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["position"]) -> MetaOapg.properties.position: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["description_text"]) -> MetaOapg.properties.description_text: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["description_excerpt"]) -> MetaOapg.properties.description_excerpt: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["topic_url"]) -> MetaOapg.properties.topic_url: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["read_restricted"]) -> MetaOapg.properties.read_restricted: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["permission"]) -> MetaOapg.properties.permission: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["notification_level"]) -> MetaOapg.properties.notification_level: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_edit"]) -> MetaOapg.properties.can_edit: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["topic_template"]) -> MetaOapg.properties.topic_template: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["form_template_ids"]) -> MetaOapg.properties.form_template_ids: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["has_children"]) -> MetaOapg.properties.has_children: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sort_order"]) -> MetaOapg.properties.sort_order: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sort_ascending"]) -> MetaOapg.properties.sort_ascending: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["show_subcategory_list"]) -> MetaOapg.properties.show_subcategory_list: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["num_featured_topics"]) -> MetaOapg.properties.num_featured_topics: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["default_view"]) -> MetaOapg.properties.default_view: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["subcategory_list_style"]) -> MetaOapg.properties.subcategory_list_style: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["default_top_period"]) -> MetaOapg.properties.default_top_period: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["default_list_filter"]) -> MetaOapg.properties.default_list_filter: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["minimum_required_tags"]) -> MetaOapg.properties.minimum_required_tags: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["navigate_to_first_post_after_read"]) -> MetaOapg.properties.navigate_to_first_post_after_read: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["custom_fields"]) -> MetaOapg.properties.custom_fields: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["allowed_tags"]) -> typing.Union[MetaOapg.properties.allowed_tags, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["allowed_tag_groups"]) -> typing.Union[MetaOapg.properties.allowed_tag_groups, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["allow_global_tags"]) -> typing.Union[MetaOapg.properties.allow_global_tags, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["required_tag_groups"]) -> MetaOapg.properties.required_tag_groups: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["category_setting"]) -> typing.Union[MetaOapg.properties.category_setting, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["read_only_banner"]) -> MetaOapg.properties.read_only_banner: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["available_groups"]) -> MetaOapg.properties.available_groups: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["auto_close_hours"]) -> MetaOapg.properties.auto_close_hours: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["auto_close_based_on_last_post"]) -> MetaOapg.properties.auto_close_based_on_last_post: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["allow_unlimited_owner_edits_on_first_post"]) -> MetaOapg.properties.allow_unlimited_owner_edits_on_first_post: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["default_slow_mode_seconds"]) -> MetaOapg.properties.default_slow_mode_seconds: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["group_permissions"]) -> MetaOapg.properties.group_permissions: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["email_in"]) -> MetaOapg.properties.email_in: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["email_in_allow_strangers"]) -> MetaOapg.properties.email_in_allow_strangers: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["mailinglist_mirror"]) -> MetaOapg.properties.mailinglist_mirror: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["all_topics_wiki"]) -> MetaOapg.properties.all_topics_wiki: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_delete"]) -> MetaOapg.properties.can_delete: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["allow_badges"]) -> MetaOapg.properties.allow_badges: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["topic_featured_link_allowed"]) -> MetaOapg.properties.topic_featured_link_allowed: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["search_priority"]) -> MetaOapg.properties.search_priority: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["uploaded_logo"]) -> MetaOapg.properties.uploaded_logo: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["uploaded_logo_dark"]) -> MetaOapg.properties.uploaded_logo_dark: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["uploaded_background"]) -> MetaOapg.properties.uploaded_background: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["uploaded_background_dark"]) -> MetaOapg.properties.uploaded_background_dark: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "id", "name", "color", "text_color", "slug", "topic_count", "post_count", "position", "description_text", "description_excerpt", "topic_url", "read_restricted", "permission", "notification_level", "can_edit", "topic_template", "form_template_ids", "has_children", "sort_order", "sort_ascending", "show_subcategory_list", "num_featured_topics", "default_view", "subcategory_list_style", "default_top_period", "default_list_filter", "minimum_required_tags", "navigate_to_first_post_after_read", "custom_fields", "allowed_tags", "allowed_tag_groups", "allow_global_tags", "required_tag_groups", "category_setting", "read_only_banner", "available_groups", "auto_close_hours", "auto_close_based_on_last_post", "allow_unlimited_owner_edits_on_first_post", "default_slow_mode_seconds", "group_permissions", "email_in", "email_in_allow_strangers", "mailinglist_mirror", "all_topics_wiki", "can_delete", "allow_badges", "topic_featured_link_allowed", "search_priority", "uploaded_logo", "uploaded_logo_dark", "uploaded_background", "uploaded_background_dark", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    uploaded_background: typing.Union[MetaOapg.properties.uploaded_background, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    form_template_ids: typing.Union[MetaOapg.properties.form_template_ids, list, tuple, ],
                    navigate_to_first_post_after_read: typing.Union[MetaOapg.properties.navigate_to_first_post_after_read, bool, ],
                    email_in_allow_strangers: typing.Union[MetaOapg.properties.email_in_allow_strangers, bool, ],
                    read_only_banner: typing.Union[MetaOapg.properties.read_only_banner, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    show_subcategory_list: typing.Union[MetaOapg.properties.show_subcategory_list, bool, ],
                    uploaded_logo: typing.Union[MetaOapg.properties.uploaded_logo, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    description_excerpt: typing.Union[MetaOapg.properties.description_excerpt, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    auto_close_based_on_last_post: typing.Union[MetaOapg.properties.auto_close_based_on_last_post, bool, ],
                    can_delete: typing.Union[MetaOapg.properties.can_delete, bool, ],
                    allow_unlimited_owner_edits_on_first_post: typing.Union[MetaOapg.properties.allow_unlimited_owner_edits_on_first_post, bool, ],
                    id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
                    slug: typing.Union[MetaOapg.properties.slug, str, ],
                    auto_close_hours: typing.Union[MetaOapg.properties.auto_close_hours, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    subcategory_list_style: typing.Union[MetaOapg.properties.subcategory_list_style, str, ],
                    has_children: typing.Union[MetaOapg.properties.has_children, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    custom_fields: typing.Union[MetaOapg.properties.custom_fields, dict, frozendict.frozendict, ],
                    default_top_period: typing.Union[MetaOapg.properties.default_top_period, str, ],
                    all_topics_wiki: typing.Union[MetaOapg.properties.all_topics_wiki, bool, ],
                    allow_badges: typing.Union[MetaOapg.properties.allow_badges, bool, ],
                    description_text: typing.Union[MetaOapg.properties.description_text, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    minimum_required_tags: typing.Union[MetaOapg.properties.minimum_required_tags, decimal.Decimal, int, ],
                    default_list_filter: typing.Union[MetaOapg.properties.default_list_filter, str, ],
                    name: typing.Union[MetaOapg.properties.name, str, ],
                    notification_level: typing.Union[MetaOapg.properties.notification_level, decimal.Decimal, int, ],
                    position: typing.Union[MetaOapg.properties.position, decimal.Decimal, int, ],
                    post_count: typing.Union[MetaOapg.properties.post_count, decimal.Decimal, int, ],
                    text_color: typing.Union[MetaOapg.properties.text_color, str, ],
                    mailinglist_mirror: typing.Union[MetaOapg.properties.mailinglist_mirror, bool, ],
                    available_groups: typing.Union[MetaOapg.properties.available_groups, list, tuple, ],
                    color: typing.Union[MetaOapg.properties.color, str, ],
                    uploaded_background_dark: typing.Union[MetaOapg.properties.uploaded_background_dark, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    description: typing.Union[MetaOapg.properties.description, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    topic_featured_link_allowed: typing.Union[MetaOapg.properties.topic_featured_link_allowed, bool, ],
                    topic_template: typing.Union[MetaOapg.properties.topic_template, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    sort_ascending: typing.Union[MetaOapg.properties.sort_ascending, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    num_featured_topics: typing.Union[MetaOapg.properties.num_featured_topics, decimal.Decimal, int, ],
                    group_permissions: typing.Union[MetaOapg.properties.group_permissions, list, tuple, ],
                    search_priority: typing.Union[MetaOapg.properties.search_priority, decimal.Decimal, int, ],
                    default_view: typing.Union[MetaOapg.properties.default_view, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    sort_order: typing.Union[MetaOapg.properties.sort_order, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    can_edit: typing.Union[MetaOapg.properties.can_edit, bool, ],
                    permission: typing.Union[MetaOapg.properties.permission, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    topic_count: typing.Union[MetaOapg.properties.topic_count, decimal.Decimal, int, ],
                    uploaded_logo_dark: typing.Union[MetaOapg.properties.uploaded_logo_dark, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    read_restricted: typing.Union[MetaOapg.properties.read_restricted, bool, ],
                    topic_url: typing.Union[MetaOapg.properties.topic_url, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    email_in: typing.Union[MetaOapg.properties.email_in, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    default_slow_mode_seconds: typing.Union[MetaOapg.properties.default_slow_mode_seconds, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    required_tag_groups: typing.Union[MetaOapg.properties.required_tag_groups, list, tuple, ],
                    allowed_tags: typing.Union[MetaOapg.properties.allowed_tags, list, tuple, schemas.Unset] = schemas.unset,
                    allowed_tag_groups: typing.Union[MetaOapg.properties.allowed_tag_groups, list, tuple, schemas.Unset] = schemas.unset,
                    allow_global_tags: typing.Union[MetaOapg.properties.allow_global_tags, bool, schemas.Unset] = schemas.unset,
                    category_setting: typing.Union[MetaOapg.properties.category_setting, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'category':
                    return super().__new__(
                        cls,
                        *args,
                        uploaded_background=uploaded_background,
                        form_template_ids=form_template_ids,
                        navigate_to_first_post_after_read=navigate_to_first_post_after_read,
                        email_in_allow_strangers=email_in_allow_strangers,
                        read_only_banner=read_only_banner,
                        show_subcategory_list=show_subcategory_list,
                        uploaded_logo=uploaded_logo,
                        description_excerpt=description_excerpt,
                        auto_close_based_on_last_post=auto_close_based_on_last_post,
                        can_delete=can_delete,
                        allow_unlimited_owner_edits_on_first_post=allow_unlimited_owner_edits_on_first_post,
                        id=id,
                        slug=slug,
                        auto_close_hours=auto_close_hours,
                        subcategory_list_style=subcategory_list_style,
                        has_children=has_children,
                        custom_fields=custom_fields,
                        default_top_period=default_top_period,
                        all_topics_wiki=all_topics_wiki,
                        allow_badges=allow_badges,
                        description_text=description_text,
                        minimum_required_tags=minimum_required_tags,
                        default_list_filter=default_list_filter,
                        name=name,
                        notification_level=notification_level,
                        position=position,
                        post_count=post_count,
                        text_color=text_color,
                        mailinglist_mirror=mailinglist_mirror,
                        available_groups=available_groups,
                        color=color,
                        uploaded_background_dark=uploaded_background_dark,
                        description=description,
                        topic_featured_link_allowed=topic_featured_link_allowed,
                        topic_template=topic_template,
                        sort_ascending=sort_ascending,
                        num_featured_topics=num_featured_topics,
                        group_permissions=group_permissions,
                        search_priority=search_priority,
                        default_view=default_view,
                        sort_order=sort_order,
                        can_edit=can_edit,
                        permission=permission,
                        topic_count=topic_count,
                        uploaded_logo_dark=uploaded_logo_dark,
                        read_restricted=read_restricted,
                        topic_url=topic_url,
                        email_in=email_in,
                        default_slow_mode_seconds=default_slow_mode_seconds,
                        required_tag_groups=required_tag_groups,
                        allowed_tags=allowed_tags,
                        allowed_tag_groups=allowed_tag_groups,
                        allow_global_tags=allow_global_tags,
                        category_setting=category_setting,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "success": success,
                "category": category,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    success: MetaOapg.properties.success
    category: MetaOapg.properties.category
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["success"]) -> MetaOapg.properties.success: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["success"], typing_extensions.Literal["category"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["success"]) -> MetaOapg.properties.success: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["success"], typing_extensions.Literal["category"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        success: typing.Union[MetaOapg.properties.success, str, ],
        category: typing.Union[MetaOapg.properties.category, dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs,
    ) -> 'CategoriesUpdateCategoryByIdJsonResponse':
        return super().__new__(
            cls,
            *args,
            success=success,
            category=category,
            _configuration=_configuration,
        )
