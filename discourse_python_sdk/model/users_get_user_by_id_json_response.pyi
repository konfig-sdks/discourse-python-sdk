# coding: utf-8

"""
    Discourse API Documentation

    This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 

    The version of the OpenAPI document: latest
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from discourse_python_sdk import schemas  # noqa: F401


class UsersGetUserByIdJsonResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "can_impersonate",
            "flags_given_count",
            "can_grant_admin",
            "can_disable_second_factor",
            "moderator",
            "reset_bounce_score_after",
            "trust_level",
            "can_revoke_moderation",
            "manual_locked_trust_level",
            "can_revoke_admin",
            "can_activate",
            "id",
            "can_delete_all_posts",
            "silenced_by",
            "days_visited",
            "can_be_anonymized",
            "single_sign_on_record",
            "like_count",
            "active",
            "like_given_count",
            "external_ids",
            "private_topics_count",
            "approved_by",
            "bounce_score",
            "created_at_age",
            "api_key_count",
            "name",
            "last_emailed_at",
            "post_count",
            "badge_count",
            "silence_reason",
            "primary_group_id",
            "can_view_action_logs",
            "can_be_merged",
            "admin",
            "created_at",
            "last_seen_age",
            "posts_read_count",
            "title",
            "warnings_received_count",
            "full_suspend_reason",
            "registration_ip_address",
            "suspended_by",
            "can_delete_sso_record",
            "can_be_deleted",
            "last_emailed_age",
            "can_deactivate",
            "avatar_template",
            "time_read",
            "groups",
            "ip_address",
            "staged",
            "flags_received_count",
            "topic_count",
            "can_grant_moderation",
            "can_send_activation_email",
            "topics_entered",
            "last_seen_at",
            "username",
        }
        
        class properties:
            title = schemas.AnyTypeSchema
            id = schemas.IntSchema
            username = schemas.StrSchema
            name = schemas.AnyTypeSchema
            avatar_template = schemas.StrSchema
            active = schemas.BoolSchema
            admin = schemas.BoolSchema
            moderator = schemas.BoolSchema
            last_seen_at = schemas.AnyTypeSchema
            last_emailed_at = schemas.AnyTypeSchema
            created_at = schemas.StrSchema
            last_seen_age = schemas.AnyTypeSchema
            last_emailed_age = schemas.AnyTypeSchema
            created_at_age = schemas.AnyTypeSchema
            trust_level = schemas.IntSchema
            manual_locked_trust_level = schemas.AnyTypeSchema
            time_read = schemas.IntSchema
            staged = schemas.BoolSchema
            days_visited = schemas.IntSchema
            posts_read_count = schemas.IntSchema
            topics_entered = schemas.IntSchema
            post_count = schemas.IntSchema
            can_send_activation_email = schemas.BoolSchema
            can_activate = schemas.BoolSchema
            can_deactivate = schemas.BoolSchema
            ip_address = schemas.StrSchema
            registration_ip_address = schemas.AnyTypeSchema
            can_grant_admin = schemas.BoolSchema
            can_revoke_admin = schemas.BoolSchema
            can_grant_moderation = schemas.BoolSchema
            can_revoke_moderation = schemas.BoolSchema
            can_impersonate = schemas.BoolSchema
            like_count = schemas.IntSchema
            like_given_count = schemas.IntSchema
            topic_count = schemas.IntSchema
            flags_given_count = schemas.IntSchema
            flags_received_count = schemas.IntSchema
            private_topics_count = schemas.IntSchema
            can_delete_all_posts = schemas.BoolSchema
            can_be_deleted = schemas.BoolSchema
            can_be_anonymized = schemas.BoolSchema
            can_be_merged = schemas.BoolSchema
            full_suspend_reason = schemas.AnyTypeSchema
            silence_reason = schemas.AnyTypeSchema
            primary_group_id = schemas.AnyTypeSchema
            badge_count = schemas.IntSchema
            warnings_received_count = schemas.IntSchema
            bounce_score = schemas.AnyTypeSchema
            reset_bounce_score_after = schemas.AnyTypeSchema
            can_view_action_logs = schemas.BoolSchema
            can_disable_second_factor = schemas.BoolSchema
            can_delete_sso_record = schemas.BoolSchema
            api_key_count = schemas.IntSchema
            single_sign_on_record = schemas.AnyTypeSchema
            
            
            class approved_by(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "name",
                        "id",
                        "avatar_template",
                        "username",
                    }
                    
                    class properties:
                        id = schemas.IntSchema
                        username = schemas.StrSchema
                        name = schemas.StrSchema
                        avatar_template = schemas.StrSchema
                        __annotations__ = {
                            "id": id,
                            "username": username,
                            "name": name,
                            "avatar_template": avatar_template,
                        }
                    additional_properties = schemas.NotAnyTypeSchema
                
                name: MetaOapg.properties.name
                id: MetaOapg.properties.id
                avatar_template: MetaOapg.properties.avatar_template
                username: MetaOapg.properties.username
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["avatar_template"]) -> MetaOapg.properties.avatar_template: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["name"], typing_extensions.Literal["id"], typing_extensions.Literal["avatar_template"], typing_extensions.Literal["username"], ]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["avatar_template"]) -> MetaOapg.properties.avatar_template: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name"], typing_extensions.Literal["id"], typing_extensions.Literal["avatar_template"], typing_extensions.Literal["username"], ]):
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    name: typing.Union[MetaOapg.properties.name, str, ],
                    id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
                    avatar_template: typing.Union[MetaOapg.properties.avatar_template, str, ],
                    username: typing.Union[MetaOapg.properties.username, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs,
                ) -> 'approved_by':
                    return super().__new__(
                        cls,
                        *args,
                        name=name,
                        id=id,
                        avatar_template=avatar_template,
                        username=username,
                        _configuration=_configuration,
                    )
            suspended_by = schemas.AnyTypeSchema
            silenced_by = schemas.AnyTypeSchema
            
            
            class groups(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "mentionable_level",
                                "public_admission",
                                "flair_color",
                                "primary_group",
                                "title",
                                "can_see_members",
                                "publish_read_state",
                                "visibility_level",
                                "id",
                                "allow_membership_requests",
                                "messageable_level",
                                "grant_trust_level",
                                "automatic",
                                "bio_raw",
                                "flair_url",
                                "display_name",
                                "public_exit",
                                "members_visibility_level",
                                "bio_excerpt",
                                "flair_bg_color",
                                "default_notification_level",
                                "full_name",
                                "user_count",
                                "membership_request_template",
                                "name",
                                "incoming_email",
                                "has_messages",
                                "can_admin_group",
                                "bio_cooked",
                            }
                            
                            class properties:
                                title = schemas.AnyTypeSchema
                                id = schemas.IntSchema
                                automatic = schemas.BoolSchema
                                name = schemas.StrSchema
                                display_name = schemas.StrSchema
                                user_count = schemas.IntSchema
                                mentionable_level = schemas.IntSchema
                                messageable_level = schemas.IntSchema
                                visibility_level = schemas.IntSchema
                                primary_group = schemas.BoolSchema
                                grant_trust_level = schemas.AnyTypeSchema
                                incoming_email = schemas.AnyTypeSchema
                                has_messages = schemas.BoolSchema
                                flair_url = schemas.AnyTypeSchema
                                flair_bg_color = schemas.AnyTypeSchema
                                flair_color = schemas.AnyTypeSchema
                                flair_group_id = schemas.AnyTypeSchema
                                bio_raw = schemas.AnyTypeSchema
                                bio_cooked = schemas.AnyTypeSchema
                                bio_excerpt = schemas.AnyTypeSchema
                                public_admission = schemas.BoolSchema
                                public_exit = schemas.BoolSchema
                                allow_membership_requests = schemas.BoolSchema
                                full_name = schemas.AnyTypeSchema
                                default_notification_level = schemas.IntSchema
                                membership_request_template = schemas.AnyTypeSchema
                                members_visibility_level = schemas.IntSchema
                                can_see_members = schemas.BoolSchema
                                can_admin_group = schemas.BoolSchema
                                publish_read_state = schemas.BoolSchema
                                __annotations__ = {
                                    "title": title,
                                    "id": id,
                                    "automatic": automatic,
                                    "name": name,
                                    "display_name": display_name,
                                    "user_count": user_count,
                                    "mentionable_level": mentionable_level,
                                    "messageable_level": messageable_level,
                                    "visibility_level": visibility_level,
                                    "primary_group": primary_group,
                                    "grant_trust_level": grant_trust_level,
                                    "incoming_email": incoming_email,
                                    "has_messages": has_messages,
                                    "flair_url": flair_url,
                                    "flair_bg_color": flair_bg_color,
                                    "flair_color": flair_color,
                                    "flair_group_id": flair_group_id,
                                    "bio_raw": bio_raw,
                                    "bio_cooked": bio_cooked,
                                    "bio_excerpt": bio_excerpt,
                                    "public_admission": public_admission,
                                    "public_exit": public_exit,
                                    "allow_membership_requests": allow_membership_requests,
                                    "full_name": full_name,
                                    "default_notification_level": default_notification_level,
                                    "membership_request_template": membership_request_template,
                                    "members_visibility_level": members_visibility_level,
                                    "can_see_members": can_see_members,
                                    "can_admin_group": can_admin_group,
                                    "publish_read_state": publish_read_state,
                                }
                        
                        mentionable_level: MetaOapg.properties.mentionable_level
                        public_admission: MetaOapg.properties.public_admission
                        flair_color: MetaOapg.properties.flair_color
                        primary_group: MetaOapg.properties.primary_group
                        title: MetaOapg.properties.title
                        can_see_members: MetaOapg.properties.can_see_members
                        publish_read_state: MetaOapg.properties.publish_read_state
                        visibility_level: MetaOapg.properties.visibility_level
                        id: MetaOapg.properties.id
                        allow_membership_requests: MetaOapg.properties.allow_membership_requests
                        messageable_level: MetaOapg.properties.messageable_level
                        grant_trust_level: MetaOapg.properties.grant_trust_level
                        automatic: MetaOapg.properties.automatic
                        bio_raw: MetaOapg.properties.bio_raw
                        flair_url: MetaOapg.properties.flair_url
                        display_name: MetaOapg.properties.display_name
                        public_exit: MetaOapg.properties.public_exit
                        members_visibility_level: MetaOapg.properties.members_visibility_level
                        bio_excerpt: MetaOapg.properties.bio_excerpt
                        flair_bg_color: MetaOapg.properties.flair_bg_color
                        default_notification_level: MetaOapg.properties.default_notification_level
                        full_name: MetaOapg.properties.full_name
                        user_count: MetaOapg.properties.user_count
                        membership_request_template: MetaOapg.properties.membership_request_template
                        name: MetaOapg.properties.name
                        incoming_email: MetaOapg.properties.incoming_email
                        has_messages: MetaOapg.properties.has_messages
                        can_admin_group: MetaOapg.properties.can_admin_group
                        bio_cooked: MetaOapg.properties.bio_cooked
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["automatic"]) -> MetaOapg.properties.automatic: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["display_name"]) -> MetaOapg.properties.display_name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["user_count"]) -> MetaOapg.properties.user_count: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["mentionable_level"]) -> MetaOapg.properties.mentionable_level: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["messageable_level"]) -> MetaOapg.properties.messageable_level: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["visibility_level"]) -> MetaOapg.properties.visibility_level: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["primary_group"]) -> MetaOapg.properties.primary_group: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["grant_trust_level"]) -> MetaOapg.properties.grant_trust_level: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["incoming_email"]) -> MetaOapg.properties.incoming_email: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["has_messages"]) -> MetaOapg.properties.has_messages: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["flair_url"]) -> MetaOapg.properties.flair_url: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["flair_bg_color"]) -> MetaOapg.properties.flair_bg_color: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["flair_color"]) -> MetaOapg.properties.flair_color: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["flair_group_id"]) -> MetaOapg.properties.flair_group_id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["bio_raw"]) -> MetaOapg.properties.bio_raw: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["bio_cooked"]) -> MetaOapg.properties.bio_cooked: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["bio_excerpt"]) -> MetaOapg.properties.bio_excerpt: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["public_admission"]) -> MetaOapg.properties.public_admission: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["public_exit"]) -> MetaOapg.properties.public_exit: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["allow_membership_requests"]) -> MetaOapg.properties.allow_membership_requests: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["full_name"]) -> MetaOapg.properties.full_name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["default_notification_level"]) -> MetaOapg.properties.default_notification_level: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["membership_request_template"]) -> MetaOapg.properties.membership_request_template: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["members_visibility_level"]) -> MetaOapg.properties.members_visibility_level: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["can_see_members"]) -> MetaOapg.properties.can_see_members: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["can_admin_group"]) -> MetaOapg.properties.can_admin_group: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["publish_read_state"]) -> MetaOapg.properties.publish_read_state: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "id", "automatic", "name", "display_name", "user_count", "mentionable_level", "messageable_level", "visibility_level", "primary_group", "grant_trust_level", "incoming_email", "has_messages", "flair_url", "flair_bg_color", "flair_color", "flair_group_id", "bio_raw", "bio_cooked", "bio_excerpt", "public_admission", "public_exit", "allow_membership_requests", "full_name", "default_notification_level", "membership_request_template", "members_visibility_level", "can_see_members", "can_admin_group", "publish_read_state", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["automatic"]) -> MetaOapg.properties.automatic: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["display_name"]) -> MetaOapg.properties.display_name: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["user_count"]) -> MetaOapg.properties.user_count: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["mentionable_level"]) -> MetaOapg.properties.mentionable_level: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["messageable_level"]) -> MetaOapg.properties.messageable_level: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["visibility_level"]) -> MetaOapg.properties.visibility_level: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["primary_group"]) -> MetaOapg.properties.primary_group: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["grant_trust_level"]) -> MetaOapg.properties.grant_trust_level: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["incoming_email"]) -> MetaOapg.properties.incoming_email: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["has_messages"]) -> MetaOapg.properties.has_messages: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["flair_url"]) -> MetaOapg.properties.flair_url: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["flair_bg_color"]) -> MetaOapg.properties.flair_bg_color: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["flair_color"]) -> MetaOapg.properties.flair_color: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["flair_group_id"]) -> typing.Union[MetaOapg.properties.flair_group_id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["bio_raw"]) -> MetaOapg.properties.bio_raw: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["bio_cooked"]) -> MetaOapg.properties.bio_cooked: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["bio_excerpt"]) -> MetaOapg.properties.bio_excerpt: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["public_admission"]) -> MetaOapg.properties.public_admission: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["public_exit"]) -> MetaOapg.properties.public_exit: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["allow_membership_requests"]) -> MetaOapg.properties.allow_membership_requests: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["full_name"]) -> MetaOapg.properties.full_name: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["default_notification_level"]) -> MetaOapg.properties.default_notification_level: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["membership_request_template"]) -> MetaOapg.properties.membership_request_template: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["members_visibility_level"]) -> MetaOapg.properties.members_visibility_level: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["can_see_members"]) -> MetaOapg.properties.can_see_members: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["can_admin_group"]) -> MetaOapg.properties.can_admin_group: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["publish_read_state"]) -> MetaOapg.properties.publish_read_state: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "id", "automatic", "name", "display_name", "user_count", "mentionable_level", "messageable_level", "visibility_level", "primary_group", "grant_trust_level", "incoming_email", "has_messages", "flair_url", "flair_bg_color", "flair_color", "flair_group_id", "bio_raw", "bio_cooked", "bio_excerpt", "public_admission", "public_exit", "allow_membership_requests", "full_name", "default_notification_level", "membership_request_template", "members_visibility_level", "can_see_members", "can_admin_group", "publish_read_state", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            mentionable_level: typing.Union[MetaOapg.properties.mentionable_level, decimal.Decimal, int, ],
                            public_admission: typing.Union[MetaOapg.properties.public_admission, bool, ],
                            flair_color: typing.Union[MetaOapg.properties.flair_color, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            primary_group: typing.Union[MetaOapg.properties.primary_group, bool, ],
                            title: typing.Union[MetaOapg.properties.title, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            can_see_members: typing.Union[MetaOapg.properties.can_see_members, bool, ],
                            publish_read_state: typing.Union[MetaOapg.properties.publish_read_state, bool, ],
                            visibility_level: typing.Union[MetaOapg.properties.visibility_level, decimal.Decimal, int, ],
                            id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
                            allow_membership_requests: typing.Union[MetaOapg.properties.allow_membership_requests, bool, ],
                            messageable_level: typing.Union[MetaOapg.properties.messageable_level, decimal.Decimal, int, ],
                            grant_trust_level: typing.Union[MetaOapg.properties.grant_trust_level, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            automatic: typing.Union[MetaOapg.properties.automatic, bool, ],
                            bio_raw: typing.Union[MetaOapg.properties.bio_raw, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            flair_url: typing.Union[MetaOapg.properties.flair_url, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            display_name: typing.Union[MetaOapg.properties.display_name, str, ],
                            public_exit: typing.Union[MetaOapg.properties.public_exit, bool, ],
                            members_visibility_level: typing.Union[MetaOapg.properties.members_visibility_level, decimal.Decimal, int, ],
                            bio_excerpt: typing.Union[MetaOapg.properties.bio_excerpt, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            flair_bg_color: typing.Union[MetaOapg.properties.flair_bg_color, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            default_notification_level: typing.Union[MetaOapg.properties.default_notification_level, decimal.Decimal, int, ],
                            full_name: typing.Union[MetaOapg.properties.full_name, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            user_count: typing.Union[MetaOapg.properties.user_count, decimal.Decimal, int, ],
                            membership_request_template: typing.Union[MetaOapg.properties.membership_request_template, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            name: typing.Union[MetaOapg.properties.name, str, ],
                            incoming_email: typing.Union[MetaOapg.properties.incoming_email, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            has_messages: typing.Union[MetaOapg.properties.has_messages, bool, ],
                            can_admin_group: typing.Union[MetaOapg.properties.can_admin_group, bool, ],
                            bio_cooked: typing.Union[MetaOapg.properties.bio_cooked, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            flair_group_id: typing.Union[MetaOapg.properties.flair_group_id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                mentionable_level=mentionable_level,
                                public_admission=public_admission,
                                flair_color=flair_color,
                                primary_group=primary_group,
                                title=title,
                                can_see_members=can_see_members,
                                publish_read_state=publish_read_state,
                                visibility_level=visibility_level,
                                id=id,
                                allow_membership_requests=allow_membership_requests,
                                messageable_level=messageable_level,
                                grant_trust_level=grant_trust_level,
                                automatic=automatic,
                                bio_raw=bio_raw,
                                flair_url=flair_url,
                                display_name=display_name,
                                public_exit=public_exit,
                                members_visibility_level=members_visibility_level,
                                bio_excerpt=bio_excerpt,
                                flair_bg_color=flair_bg_color,
                                default_notification_level=default_notification_level,
                                full_name=full_name,
                                user_count=user_count,
                                membership_request_template=membership_request_template,
                                name=name,
                                incoming_email=incoming_email,
                                has_messages=has_messages,
                                can_admin_group=can_admin_group,
                                bio_cooked=bio_cooked,
                                flair_group_id=flair_group_id,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'groups':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            external_ids = schemas.DictSchema
            
            
            class associated_accounts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.AnyTypeSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'associated_accounts':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            post_edits_count = schemas.AnyTypeSchema
            
            
            class penalty_counts(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "silenced",
                        "suspended",
                    }
                    
                    class properties:
                        silenced = schemas.IntSchema
                        suspended = schemas.IntSchema
                        __annotations__ = {
                            "silenced": silenced,
                            "suspended": suspended,
                        }
                
                silenced: MetaOapg.properties.silenced
                suspended: MetaOapg.properties.suspended
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["silenced"]) -> MetaOapg.properties.silenced: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["suspended"]) -> MetaOapg.properties.suspended: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["silenced", "suspended", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["silenced"]) -> MetaOapg.properties.silenced: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["suspended"]) -> MetaOapg.properties.suspended: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["silenced", "suspended", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    silenced: typing.Union[MetaOapg.properties.silenced, decimal.Decimal, int, ],
                    suspended: typing.Union[MetaOapg.properties.suspended, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'penalty_counts':
                    return super().__new__(
                        cls,
                        *args,
                        silenced=silenced,
                        suspended=suspended,
                        _configuration=_configuration,
                        **kwargs,
                    )
            next_penalty = schemas.StrSchema
            
            
            class tl3_requirements(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "min_likes_given",
                        "max_flagged_by_users",
                        "trust_level_locked",
                        "min_likes_received",
                        "topics_viewed",
                        "num_likes_received",
                        "num_likes_given",
                        "min_posts_read",
                        "on_grace_period",
                        "num_likes_received_users",
                        "days_visited",
                        "num_likes_received_days",
                        "min_topics_viewed",
                        "num_topics_replied_to",
                        "posts_read_all_time",
                        "min_days_visited",
                        "min_topics_replied_to",
                        "num_flagged_by_users",
                        "penalty_counts",
                        "min_likes_received_users",
                        "num_flagged_posts",
                        "requirements_lost",
                        "min_posts_read_all_time",
                        "max_flagged_posts",
                        "posts_read",
                        "min_topics_viewed_all_time",
                        "requirements_met",
                        "min_likes_received_days",
                        "time_period",
                        "topics_viewed_all_time",
                    }
                    
                    class properties:
                        time_period = schemas.IntSchema
                        requirements_met = schemas.BoolSchema
                        requirements_lost = schemas.BoolSchema
                        trust_level_locked = schemas.BoolSchema
                        on_grace_period = schemas.BoolSchema
                        days_visited = schemas.IntSchema
                        min_days_visited = schemas.IntSchema
                        num_topics_replied_to = schemas.IntSchema
                        min_topics_replied_to = schemas.IntSchema
                        topics_viewed = schemas.IntSchema
                        min_topics_viewed = schemas.IntSchema
                        posts_read = schemas.IntSchema
                        min_posts_read = schemas.IntSchema
                        topics_viewed_all_time = schemas.IntSchema
                        min_topics_viewed_all_time = schemas.IntSchema
                        posts_read_all_time = schemas.IntSchema
                        min_posts_read_all_time = schemas.IntSchema
                        num_flagged_posts = schemas.IntSchema
                        max_flagged_posts = schemas.IntSchema
                        num_flagged_by_users = schemas.IntSchema
                        max_flagged_by_users = schemas.IntSchema
                        num_likes_given = schemas.IntSchema
                        min_likes_given = schemas.IntSchema
                        num_likes_received = schemas.IntSchema
                        min_likes_received = schemas.IntSchema
                        num_likes_received_days = schemas.IntSchema
                        min_likes_received_days = schemas.IntSchema
                        num_likes_received_users = schemas.IntSchema
                        min_likes_received_users = schemas.IntSchema
                        
                        
                        class penalty_counts(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                required = {
                                    "silenced",
                                    "total",
                                    "suspended",
                                }
                                
                                class properties:
                                    silenced = schemas.IntSchema
                                    suspended = schemas.IntSchema
                                    total = schemas.IntSchema
                                    __annotations__ = {
                                        "silenced": silenced,
                                        "suspended": suspended,
                                        "total": total,
                                    }
                            
                            silenced: MetaOapg.properties.silenced
                            total: MetaOapg.properties.total
                            suspended: MetaOapg.properties.suspended
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["silenced"]) -> MetaOapg.properties.silenced: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["suspended"]) -> MetaOapg.properties.suspended: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["silenced", "suspended", "total", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["silenced"]) -> MetaOapg.properties.silenced: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["suspended"]) -> MetaOapg.properties.suspended: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["silenced", "suspended", "total", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                silenced: typing.Union[MetaOapg.properties.silenced, decimal.Decimal, int, ],
                                total: typing.Union[MetaOapg.properties.total, decimal.Decimal, int, ],
                                suspended: typing.Union[MetaOapg.properties.suspended, decimal.Decimal, int, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'penalty_counts':
                                return super().__new__(
                                    cls,
                                    *args,
                                    silenced=silenced,
                                    total=total,
                                    suspended=suspended,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "time_period": time_period,
                            "requirements_met": requirements_met,
                            "requirements_lost": requirements_lost,
                            "trust_level_locked": trust_level_locked,
                            "on_grace_period": on_grace_period,
                            "days_visited": days_visited,
                            "min_days_visited": min_days_visited,
                            "num_topics_replied_to": num_topics_replied_to,
                            "min_topics_replied_to": min_topics_replied_to,
                            "topics_viewed": topics_viewed,
                            "min_topics_viewed": min_topics_viewed,
                            "posts_read": posts_read,
                            "min_posts_read": min_posts_read,
                            "topics_viewed_all_time": topics_viewed_all_time,
                            "min_topics_viewed_all_time": min_topics_viewed_all_time,
                            "posts_read_all_time": posts_read_all_time,
                            "min_posts_read_all_time": min_posts_read_all_time,
                            "num_flagged_posts": num_flagged_posts,
                            "max_flagged_posts": max_flagged_posts,
                            "num_flagged_by_users": num_flagged_by_users,
                            "max_flagged_by_users": max_flagged_by_users,
                            "num_likes_given": num_likes_given,
                            "min_likes_given": min_likes_given,
                            "num_likes_received": num_likes_received,
                            "min_likes_received": min_likes_received,
                            "num_likes_received_days": num_likes_received_days,
                            "min_likes_received_days": min_likes_received_days,
                            "num_likes_received_users": num_likes_received_users,
                            "min_likes_received_users": min_likes_received_users,
                            "penalty_counts": penalty_counts,
                        }
                
                min_likes_given: MetaOapg.properties.min_likes_given
                max_flagged_by_users: MetaOapg.properties.max_flagged_by_users
                trust_level_locked: MetaOapg.properties.trust_level_locked
                min_likes_received: MetaOapg.properties.min_likes_received
                topics_viewed: MetaOapg.properties.topics_viewed
                num_likes_received: MetaOapg.properties.num_likes_received
                num_likes_given: MetaOapg.properties.num_likes_given
                min_posts_read: MetaOapg.properties.min_posts_read
                on_grace_period: MetaOapg.properties.on_grace_period
                num_likes_received_users: MetaOapg.properties.num_likes_received_users
                days_visited: MetaOapg.properties.days_visited
                num_likes_received_days: MetaOapg.properties.num_likes_received_days
                min_topics_viewed: MetaOapg.properties.min_topics_viewed
                num_topics_replied_to: MetaOapg.properties.num_topics_replied_to
                posts_read_all_time: MetaOapg.properties.posts_read_all_time
                min_days_visited: MetaOapg.properties.min_days_visited
                min_topics_replied_to: MetaOapg.properties.min_topics_replied_to
                num_flagged_by_users: MetaOapg.properties.num_flagged_by_users
                penalty_counts: MetaOapg.properties.penalty_counts
                min_likes_received_users: MetaOapg.properties.min_likes_received_users
                num_flagged_posts: MetaOapg.properties.num_flagged_posts
                requirements_lost: MetaOapg.properties.requirements_lost
                min_posts_read_all_time: MetaOapg.properties.min_posts_read_all_time
                max_flagged_posts: MetaOapg.properties.max_flagged_posts
                posts_read: MetaOapg.properties.posts_read
                min_topics_viewed_all_time: MetaOapg.properties.min_topics_viewed_all_time
                requirements_met: MetaOapg.properties.requirements_met
                min_likes_received_days: MetaOapg.properties.min_likes_received_days
                time_period: MetaOapg.properties.time_period
                topics_viewed_all_time: MetaOapg.properties.topics_viewed_all_time
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["time_period"]) -> MetaOapg.properties.time_period: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["requirements_met"]) -> MetaOapg.properties.requirements_met: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["requirements_lost"]) -> MetaOapg.properties.requirements_lost: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["trust_level_locked"]) -> MetaOapg.properties.trust_level_locked: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["on_grace_period"]) -> MetaOapg.properties.on_grace_period: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["days_visited"]) -> MetaOapg.properties.days_visited: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["min_days_visited"]) -> MetaOapg.properties.min_days_visited: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["num_topics_replied_to"]) -> MetaOapg.properties.num_topics_replied_to: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["min_topics_replied_to"]) -> MetaOapg.properties.min_topics_replied_to: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["topics_viewed"]) -> MetaOapg.properties.topics_viewed: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["min_topics_viewed"]) -> MetaOapg.properties.min_topics_viewed: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["posts_read"]) -> MetaOapg.properties.posts_read: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["min_posts_read"]) -> MetaOapg.properties.min_posts_read: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["topics_viewed_all_time"]) -> MetaOapg.properties.topics_viewed_all_time: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["min_topics_viewed_all_time"]) -> MetaOapg.properties.min_topics_viewed_all_time: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["posts_read_all_time"]) -> MetaOapg.properties.posts_read_all_time: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["min_posts_read_all_time"]) -> MetaOapg.properties.min_posts_read_all_time: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["num_flagged_posts"]) -> MetaOapg.properties.num_flagged_posts: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["max_flagged_posts"]) -> MetaOapg.properties.max_flagged_posts: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["num_flagged_by_users"]) -> MetaOapg.properties.num_flagged_by_users: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["max_flagged_by_users"]) -> MetaOapg.properties.max_flagged_by_users: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["num_likes_given"]) -> MetaOapg.properties.num_likes_given: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["min_likes_given"]) -> MetaOapg.properties.min_likes_given: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["num_likes_received"]) -> MetaOapg.properties.num_likes_received: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["min_likes_received"]) -> MetaOapg.properties.min_likes_received: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["num_likes_received_days"]) -> MetaOapg.properties.num_likes_received_days: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["min_likes_received_days"]) -> MetaOapg.properties.min_likes_received_days: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["num_likes_received_users"]) -> MetaOapg.properties.num_likes_received_users: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["min_likes_received_users"]) -> MetaOapg.properties.min_likes_received_users: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["penalty_counts"]) -> MetaOapg.properties.penalty_counts: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["time_period", "requirements_met", "requirements_lost", "trust_level_locked", "on_grace_period", "days_visited", "min_days_visited", "num_topics_replied_to", "min_topics_replied_to", "topics_viewed", "min_topics_viewed", "posts_read", "min_posts_read", "topics_viewed_all_time", "min_topics_viewed_all_time", "posts_read_all_time", "min_posts_read_all_time", "num_flagged_posts", "max_flagged_posts", "num_flagged_by_users", "max_flagged_by_users", "num_likes_given", "min_likes_given", "num_likes_received", "min_likes_received", "num_likes_received_days", "min_likes_received_days", "num_likes_received_users", "min_likes_received_users", "penalty_counts", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["time_period"]) -> MetaOapg.properties.time_period: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["requirements_met"]) -> MetaOapg.properties.requirements_met: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["requirements_lost"]) -> MetaOapg.properties.requirements_lost: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["trust_level_locked"]) -> MetaOapg.properties.trust_level_locked: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["on_grace_period"]) -> MetaOapg.properties.on_grace_period: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["days_visited"]) -> MetaOapg.properties.days_visited: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["min_days_visited"]) -> MetaOapg.properties.min_days_visited: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["num_topics_replied_to"]) -> MetaOapg.properties.num_topics_replied_to: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["min_topics_replied_to"]) -> MetaOapg.properties.min_topics_replied_to: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["topics_viewed"]) -> MetaOapg.properties.topics_viewed: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["min_topics_viewed"]) -> MetaOapg.properties.min_topics_viewed: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["posts_read"]) -> MetaOapg.properties.posts_read: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["min_posts_read"]) -> MetaOapg.properties.min_posts_read: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["topics_viewed_all_time"]) -> MetaOapg.properties.topics_viewed_all_time: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["min_topics_viewed_all_time"]) -> MetaOapg.properties.min_topics_viewed_all_time: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["posts_read_all_time"]) -> MetaOapg.properties.posts_read_all_time: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["min_posts_read_all_time"]) -> MetaOapg.properties.min_posts_read_all_time: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["num_flagged_posts"]) -> MetaOapg.properties.num_flagged_posts: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["max_flagged_posts"]) -> MetaOapg.properties.max_flagged_posts: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["num_flagged_by_users"]) -> MetaOapg.properties.num_flagged_by_users: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["max_flagged_by_users"]) -> MetaOapg.properties.max_flagged_by_users: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["num_likes_given"]) -> MetaOapg.properties.num_likes_given: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["min_likes_given"]) -> MetaOapg.properties.min_likes_given: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["num_likes_received"]) -> MetaOapg.properties.num_likes_received: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["min_likes_received"]) -> MetaOapg.properties.min_likes_received: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["num_likes_received_days"]) -> MetaOapg.properties.num_likes_received_days: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["min_likes_received_days"]) -> MetaOapg.properties.min_likes_received_days: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["num_likes_received_users"]) -> MetaOapg.properties.num_likes_received_users: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["min_likes_received_users"]) -> MetaOapg.properties.min_likes_received_users: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["penalty_counts"]) -> MetaOapg.properties.penalty_counts: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["time_period", "requirements_met", "requirements_lost", "trust_level_locked", "on_grace_period", "days_visited", "min_days_visited", "num_topics_replied_to", "min_topics_replied_to", "topics_viewed", "min_topics_viewed", "posts_read", "min_posts_read", "topics_viewed_all_time", "min_topics_viewed_all_time", "posts_read_all_time", "min_posts_read_all_time", "num_flagged_posts", "max_flagged_posts", "num_flagged_by_users", "max_flagged_by_users", "num_likes_given", "min_likes_given", "num_likes_received", "min_likes_received", "num_likes_received_days", "min_likes_received_days", "num_likes_received_users", "min_likes_received_users", "penalty_counts", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    min_likes_given: typing.Union[MetaOapg.properties.min_likes_given, decimal.Decimal, int, ],
                    max_flagged_by_users: typing.Union[MetaOapg.properties.max_flagged_by_users, decimal.Decimal, int, ],
                    trust_level_locked: typing.Union[MetaOapg.properties.trust_level_locked, bool, ],
                    min_likes_received: typing.Union[MetaOapg.properties.min_likes_received, decimal.Decimal, int, ],
                    topics_viewed: typing.Union[MetaOapg.properties.topics_viewed, decimal.Decimal, int, ],
                    num_likes_received: typing.Union[MetaOapg.properties.num_likes_received, decimal.Decimal, int, ],
                    num_likes_given: typing.Union[MetaOapg.properties.num_likes_given, decimal.Decimal, int, ],
                    min_posts_read: typing.Union[MetaOapg.properties.min_posts_read, decimal.Decimal, int, ],
                    on_grace_period: typing.Union[MetaOapg.properties.on_grace_period, bool, ],
                    num_likes_received_users: typing.Union[MetaOapg.properties.num_likes_received_users, decimal.Decimal, int, ],
                    days_visited: typing.Union[MetaOapg.properties.days_visited, decimal.Decimal, int, ],
                    num_likes_received_days: typing.Union[MetaOapg.properties.num_likes_received_days, decimal.Decimal, int, ],
                    min_topics_viewed: typing.Union[MetaOapg.properties.min_topics_viewed, decimal.Decimal, int, ],
                    num_topics_replied_to: typing.Union[MetaOapg.properties.num_topics_replied_to, decimal.Decimal, int, ],
                    posts_read_all_time: typing.Union[MetaOapg.properties.posts_read_all_time, decimal.Decimal, int, ],
                    min_days_visited: typing.Union[MetaOapg.properties.min_days_visited, decimal.Decimal, int, ],
                    min_topics_replied_to: typing.Union[MetaOapg.properties.min_topics_replied_to, decimal.Decimal, int, ],
                    num_flagged_by_users: typing.Union[MetaOapg.properties.num_flagged_by_users, decimal.Decimal, int, ],
                    penalty_counts: typing.Union[MetaOapg.properties.penalty_counts, dict, frozendict.frozendict, ],
                    min_likes_received_users: typing.Union[MetaOapg.properties.min_likes_received_users, decimal.Decimal, int, ],
                    num_flagged_posts: typing.Union[MetaOapg.properties.num_flagged_posts, decimal.Decimal, int, ],
                    requirements_lost: typing.Union[MetaOapg.properties.requirements_lost, bool, ],
                    min_posts_read_all_time: typing.Union[MetaOapg.properties.min_posts_read_all_time, decimal.Decimal, int, ],
                    max_flagged_posts: typing.Union[MetaOapg.properties.max_flagged_posts, decimal.Decimal, int, ],
                    posts_read: typing.Union[MetaOapg.properties.posts_read, decimal.Decimal, int, ],
                    min_topics_viewed_all_time: typing.Union[MetaOapg.properties.min_topics_viewed_all_time, decimal.Decimal, int, ],
                    requirements_met: typing.Union[MetaOapg.properties.requirements_met, bool, ],
                    min_likes_received_days: typing.Union[MetaOapg.properties.min_likes_received_days, decimal.Decimal, int, ],
                    time_period: typing.Union[MetaOapg.properties.time_period, decimal.Decimal, int, ],
                    topics_viewed_all_time: typing.Union[MetaOapg.properties.topics_viewed_all_time, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'tl3_requirements':
                    return super().__new__(
                        cls,
                        *args,
                        min_likes_given=min_likes_given,
                        max_flagged_by_users=max_flagged_by_users,
                        trust_level_locked=trust_level_locked,
                        min_likes_received=min_likes_received,
                        topics_viewed=topics_viewed,
                        num_likes_received=num_likes_received,
                        num_likes_given=num_likes_given,
                        min_posts_read=min_posts_read,
                        on_grace_period=on_grace_period,
                        num_likes_received_users=num_likes_received_users,
                        days_visited=days_visited,
                        num_likes_received_days=num_likes_received_days,
                        min_topics_viewed=min_topics_viewed,
                        num_topics_replied_to=num_topics_replied_to,
                        posts_read_all_time=posts_read_all_time,
                        min_days_visited=min_days_visited,
                        min_topics_replied_to=min_topics_replied_to,
                        num_flagged_by_users=num_flagged_by_users,
                        penalty_counts=penalty_counts,
                        min_likes_received_users=min_likes_received_users,
                        num_flagged_posts=num_flagged_posts,
                        requirements_lost=requirements_lost,
                        min_posts_read_all_time=min_posts_read_all_time,
                        max_flagged_posts=max_flagged_posts,
                        posts_read=posts_read,
                        min_topics_viewed_all_time=min_topics_viewed_all_time,
                        requirements_met=requirements_met,
                        min_likes_received_days=min_likes_received_days,
                        time_period=time_period,
                        topics_viewed_all_time=topics_viewed_all_time,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "title": title,
                "id": id,
                "username": username,
                "name": name,
                "avatar_template": avatar_template,
                "active": active,
                "admin": admin,
                "moderator": moderator,
                "last_seen_at": last_seen_at,
                "last_emailed_at": last_emailed_at,
                "created_at": created_at,
                "last_seen_age": last_seen_age,
                "last_emailed_age": last_emailed_age,
                "created_at_age": created_at_age,
                "trust_level": trust_level,
                "manual_locked_trust_level": manual_locked_trust_level,
                "time_read": time_read,
                "staged": staged,
                "days_visited": days_visited,
                "posts_read_count": posts_read_count,
                "topics_entered": topics_entered,
                "post_count": post_count,
                "can_send_activation_email": can_send_activation_email,
                "can_activate": can_activate,
                "can_deactivate": can_deactivate,
                "ip_address": ip_address,
                "registration_ip_address": registration_ip_address,
                "can_grant_admin": can_grant_admin,
                "can_revoke_admin": can_revoke_admin,
                "can_grant_moderation": can_grant_moderation,
                "can_revoke_moderation": can_revoke_moderation,
                "can_impersonate": can_impersonate,
                "like_count": like_count,
                "like_given_count": like_given_count,
                "topic_count": topic_count,
                "flags_given_count": flags_given_count,
                "flags_received_count": flags_received_count,
                "private_topics_count": private_topics_count,
                "can_delete_all_posts": can_delete_all_posts,
                "can_be_deleted": can_be_deleted,
                "can_be_anonymized": can_be_anonymized,
                "can_be_merged": can_be_merged,
                "full_suspend_reason": full_suspend_reason,
                "silence_reason": silence_reason,
                "primary_group_id": primary_group_id,
                "badge_count": badge_count,
                "warnings_received_count": warnings_received_count,
                "bounce_score": bounce_score,
                "reset_bounce_score_after": reset_bounce_score_after,
                "can_view_action_logs": can_view_action_logs,
                "can_disable_second_factor": can_disable_second_factor,
                "can_delete_sso_record": can_delete_sso_record,
                "api_key_count": api_key_count,
                "single_sign_on_record": single_sign_on_record,
                "approved_by": approved_by,
                "suspended_by": suspended_by,
                "silenced_by": silenced_by,
                "groups": groups,
                "external_ids": external_ids,
                "associated_accounts": associated_accounts,
                "post_edits_count": post_edits_count,
                "penalty_counts": penalty_counts,
                "next_penalty": next_penalty,
                "tl3_requirements": tl3_requirements,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    can_impersonate: MetaOapg.properties.can_impersonate
    flags_given_count: MetaOapg.properties.flags_given_count
    can_grant_admin: MetaOapg.properties.can_grant_admin
    can_disable_second_factor: MetaOapg.properties.can_disable_second_factor
    moderator: MetaOapg.properties.moderator
    reset_bounce_score_after: MetaOapg.properties.reset_bounce_score_after
    trust_level: MetaOapg.properties.trust_level
    can_revoke_moderation: MetaOapg.properties.can_revoke_moderation
    manual_locked_trust_level: MetaOapg.properties.manual_locked_trust_level
    can_revoke_admin: MetaOapg.properties.can_revoke_admin
    can_activate: MetaOapg.properties.can_activate
    id: MetaOapg.properties.id
    can_delete_all_posts: MetaOapg.properties.can_delete_all_posts
    silenced_by: MetaOapg.properties.silenced_by
    days_visited: MetaOapg.properties.days_visited
    can_be_anonymized: MetaOapg.properties.can_be_anonymized
    single_sign_on_record: MetaOapg.properties.single_sign_on_record
    like_count: MetaOapg.properties.like_count
    active: MetaOapg.properties.active
    like_given_count: MetaOapg.properties.like_given_count
    external_ids: MetaOapg.properties.external_ids
    private_topics_count: MetaOapg.properties.private_topics_count
    approved_by: MetaOapg.properties.approved_by
    bounce_score: MetaOapg.properties.bounce_score
    created_at_age: MetaOapg.properties.created_at_age
    api_key_count: MetaOapg.properties.api_key_count
    name: MetaOapg.properties.name
    last_emailed_at: MetaOapg.properties.last_emailed_at
    post_count: MetaOapg.properties.post_count
    badge_count: MetaOapg.properties.badge_count
    silence_reason: MetaOapg.properties.silence_reason
    primary_group_id: MetaOapg.properties.primary_group_id
    can_view_action_logs: MetaOapg.properties.can_view_action_logs
    can_be_merged: MetaOapg.properties.can_be_merged
    admin: MetaOapg.properties.admin
    created_at: MetaOapg.properties.created_at
    last_seen_age: MetaOapg.properties.last_seen_age
    posts_read_count: MetaOapg.properties.posts_read_count
    title: MetaOapg.properties.title
    warnings_received_count: MetaOapg.properties.warnings_received_count
    full_suspend_reason: MetaOapg.properties.full_suspend_reason
    registration_ip_address: MetaOapg.properties.registration_ip_address
    suspended_by: MetaOapg.properties.suspended_by
    can_delete_sso_record: MetaOapg.properties.can_delete_sso_record
    can_be_deleted: MetaOapg.properties.can_be_deleted
    last_emailed_age: MetaOapg.properties.last_emailed_age
    can_deactivate: MetaOapg.properties.can_deactivate
    avatar_template: MetaOapg.properties.avatar_template
    time_read: MetaOapg.properties.time_read
    groups: MetaOapg.properties.groups
    ip_address: MetaOapg.properties.ip_address
    staged: MetaOapg.properties.staged
    flags_received_count: MetaOapg.properties.flags_received_count
    topic_count: MetaOapg.properties.topic_count
    can_grant_moderation: MetaOapg.properties.can_grant_moderation
    can_send_activation_email: MetaOapg.properties.can_send_activation_email
    topics_entered: MetaOapg.properties.topics_entered
    last_seen_at: MetaOapg.properties.last_seen_at
    username: MetaOapg.properties.username
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_impersonate"]) -> MetaOapg.properties.can_impersonate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flags_given_count"]) -> MetaOapg.properties.flags_given_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_grant_admin"]) -> MetaOapg.properties.can_grant_admin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_disable_second_factor"]) -> MetaOapg.properties.can_disable_second_factor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["moderator"]) -> MetaOapg.properties.moderator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reset_bounce_score_after"]) -> MetaOapg.properties.reset_bounce_score_after: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trust_level"]) -> MetaOapg.properties.trust_level: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_revoke_moderation"]) -> MetaOapg.properties.can_revoke_moderation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["manual_locked_trust_level"]) -> MetaOapg.properties.manual_locked_trust_level: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_revoke_admin"]) -> MetaOapg.properties.can_revoke_admin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_activate"]) -> MetaOapg.properties.can_activate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_delete_all_posts"]) -> MetaOapg.properties.can_delete_all_posts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["silenced_by"]) -> MetaOapg.properties.silenced_by: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["days_visited"]) -> MetaOapg.properties.days_visited: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_be_anonymized"]) -> MetaOapg.properties.can_be_anonymized: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["single_sign_on_record"]) -> MetaOapg.properties.single_sign_on_record: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["like_count"]) -> MetaOapg.properties.like_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["like_given_count"]) -> MetaOapg.properties.like_given_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["external_ids"]) -> MetaOapg.properties.external_ids: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["private_topics_count"]) -> MetaOapg.properties.private_topics_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["approved_by"]) -> MetaOapg.properties.approved_by: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bounce_score"]) -> MetaOapg.properties.bounce_score: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at_age"]) -> MetaOapg.properties.created_at_age: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["api_key_count"]) -> MetaOapg.properties.api_key_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_emailed_at"]) -> MetaOapg.properties.last_emailed_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["post_count"]) -> MetaOapg.properties.post_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["badge_count"]) -> MetaOapg.properties.badge_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["silence_reason"]) -> MetaOapg.properties.silence_reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primary_group_id"]) -> MetaOapg.properties.primary_group_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_view_action_logs"]) -> MetaOapg.properties.can_view_action_logs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_be_merged"]) -> MetaOapg.properties.can_be_merged: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["admin"]) -> MetaOapg.properties.admin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_seen_age"]) -> MetaOapg.properties.last_seen_age: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["posts_read_count"]) -> MetaOapg.properties.posts_read_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["warnings_received_count"]) -> MetaOapg.properties.warnings_received_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["full_suspend_reason"]) -> MetaOapg.properties.full_suspend_reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["registration_ip_address"]) -> MetaOapg.properties.registration_ip_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["suspended_by"]) -> MetaOapg.properties.suspended_by: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_delete_sso_record"]) -> MetaOapg.properties.can_delete_sso_record: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_be_deleted"]) -> MetaOapg.properties.can_be_deleted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_emailed_age"]) -> MetaOapg.properties.last_emailed_age: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_deactivate"]) -> MetaOapg.properties.can_deactivate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["avatar_template"]) -> MetaOapg.properties.avatar_template: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_read"]) -> MetaOapg.properties.time_read: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groups"]) -> MetaOapg.properties.groups: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ip_address"]) -> MetaOapg.properties.ip_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["staged"]) -> MetaOapg.properties.staged: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flags_received_count"]) -> MetaOapg.properties.flags_received_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["topic_count"]) -> MetaOapg.properties.topic_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_grant_moderation"]) -> MetaOapg.properties.can_grant_moderation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_send_activation_email"]) -> MetaOapg.properties.can_send_activation_email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["topics_entered"]) -> MetaOapg.properties.topics_entered: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_seen_at"]) -> MetaOapg.properties.last_seen_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["associated_accounts"]) -> MetaOapg.properties.associated_accounts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["post_edits_count"]) -> MetaOapg.properties.post_edits_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["penalty_counts"]) -> MetaOapg.properties.penalty_counts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["next_penalty"]) -> MetaOapg.properties.next_penalty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tl3_requirements"]) -> MetaOapg.properties.tl3_requirements: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["can_impersonate"], typing_extensions.Literal["flags_given_count"], typing_extensions.Literal["can_grant_admin"], typing_extensions.Literal["can_disable_second_factor"], typing_extensions.Literal["moderator"], typing_extensions.Literal["reset_bounce_score_after"], typing_extensions.Literal["trust_level"], typing_extensions.Literal["can_revoke_moderation"], typing_extensions.Literal["manual_locked_trust_level"], typing_extensions.Literal["can_revoke_admin"], typing_extensions.Literal["can_activate"], typing_extensions.Literal["id"], typing_extensions.Literal["can_delete_all_posts"], typing_extensions.Literal["silenced_by"], typing_extensions.Literal["days_visited"], typing_extensions.Literal["can_be_anonymized"], typing_extensions.Literal["single_sign_on_record"], typing_extensions.Literal["like_count"], typing_extensions.Literal["active"], typing_extensions.Literal["like_given_count"], typing_extensions.Literal["external_ids"], typing_extensions.Literal["private_topics_count"], typing_extensions.Literal["approved_by"], typing_extensions.Literal["bounce_score"], typing_extensions.Literal["created_at_age"], typing_extensions.Literal["api_key_count"], typing_extensions.Literal["name"], typing_extensions.Literal["last_emailed_at"], typing_extensions.Literal["post_count"], typing_extensions.Literal["badge_count"], typing_extensions.Literal["silence_reason"], typing_extensions.Literal["primary_group_id"], typing_extensions.Literal["can_view_action_logs"], typing_extensions.Literal["can_be_merged"], typing_extensions.Literal["admin"], typing_extensions.Literal["created_at"], typing_extensions.Literal["last_seen_age"], typing_extensions.Literal["posts_read_count"], typing_extensions.Literal["title"], typing_extensions.Literal["warnings_received_count"], typing_extensions.Literal["full_suspend_reason"], typing_extensions.Literal["registration_ip_address"], typing_extensions.Literal["suspended_by"], typing_extensions.Literal["can_delete_sso_record"], typing_extensions.Literal["can_be_deleted"], typing_extensions.Literal["last_emailed_age"], typing_extensions.Literal["can_deactivate"], typing_extensions.Literal["avatar_template"], typing_extensions.Literal["time_read"], typing_extensions.Literal["groups"], typing_extensions.Literal["ip_address"], typing_extensions.Literal["staged"], typing_extensions.Literal["flags_received_count"], typing_extensions.Literal["topic_count"], typing_extensions.Literal["can_grant_moderation"], typing_extensions.Literal["can_send_activation_email"], typing_extensions.Literal["topics_entered"], typing_extensions.Literal["last_seen_at"], typing_extensions.Literal["username"], typing_extensions.Literal["associated_accounts"], typing_extensions.Literal["post_edits_count"], typing_extensions.Literal["penalty_counts"], typing_extensions.Literal["next_penalty"], typing_extensions.Literal["tl3_requirements"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_impersonate"]) -> MetaOapg.properties.can_impersonate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flags_given_count"]) -> MetaOapg.properties.flags_given_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_grant_admin"]) -> MetaOapg.properties.can_grant_admin: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_disable_second_factor"]) -> MetaOapg.properties.can_disable_second_factor: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["moderator"]) -> MetaOapg.properties.moderator: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reset_bounce_score_after"]) -> MetaOapg.properties.reset_bounce_score_after: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trust_level"]) -> MetaOapg.properties.trust_level: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_revoke_moderation"]) -> MetaOapg.properties.can_revoke_moderation: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["manual_locked_trust_level"]) -> MetaOapg.properties.manual_locked_trust_level: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_revoke_admin"]) -> MetaOapg.properties.can_revoke_admin: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_activate"]) -> MetaOapg.properties.can_activate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_delete_all_posts"]) -> MetaOapg.properties.can_delete_all_posts: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["silenced_by"]) -> MetaOapg.properties.silenced_by: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["days_visited"]) -> MetaOapg.properties.days_visited: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_be_anonymized"]) -> MetaOapg.properties.can_be_anonymized: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["single_sign_on_record"]) -> MetaOapg.properties.single_sign_on_record: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["like_count"]) -> MetaOapg.properties.like_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["like_given_count"]) -> MetaOapg.properties.like_given_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["external_ids"]) -> MetaOapg.properties.external_ids: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["private_topics_count"]) -> MetaOapg.properties.private_topics_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["approved_by"]) -> MetaOapg.properties.approved_by: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bounce_score"]) -> MetaOapg.properties.bounce_score: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at_age"]) -> MetaOapg.properties.created_at_age: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["api_key_count"]) -> MetaOapg.properties.api_key_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_emailed_at"]) -> MetaOapg.properties.last_emailed_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["post_count"]) -> MetaOapg.properties.post_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["badge_count"]) -> MetaOapg.properties.badge_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["silence_reason"]) -> MetaOapg.properties.silence_reason: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primary_group_id"]) -> MetaOapg.properties.primary_group_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_view_action_logs"]) -> MetaOapg.properties.can_view_action_logs: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_be_merged"]) -> MetaOapg.properties.can_be_merged: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["admin"]) -> MetaOapg.properties.admin: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_seen_age"]) -> MetaOapg.properties.last_seen_age: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["posts_read_count"]) -> MetaOapg.properties.posts_read_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["warnings_received_count"]) -> MetaOapg.properties.warnings_received_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["full_suspend_reason"]) -> MetaOapg.properties.full_suspend_reason: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["registration_ip_address"]) -> MetaOapg.properties.registration_ip_address: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["suspended_by"]) -> MetaOapg.properties.suspended_by: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_delete_sso_record"]) -> MetaOapg.properties.can_delete_sso_record: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_be_deleted"]) -> MetaOapg.properties.can_be_deleted: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_emailed_age"]) -> MetaOapg.properties.last_emailed_age: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_deactivate"]) -> MetaOapg.properties.can_deactivate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["avatar_template"]) -> MetaOapg.properties.avatar_template: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_read"]) -> MetaOapg.properties.time_read: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groups"]) -> MetaOapg.properties.groups: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ip_address"]) -> MetaOapg.properties.ip_address: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["staged"]) -> MetaOapg.properties.staged: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flags_received_count"]) -> MetaOapg.properties.flags_received_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["topic_count"]) -> MetaOapg.properties.topic_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_grant_moderation"]) -> MetaOapg.properties.can_grant_moderation: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_send_activation_email"]) -> MetaOapg.properties.can_send_activation_email: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["topics_entered"]) -> MetaOapg.properties.topics_entered: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_seen_at"]) -> MetaOapg.properties.last_seen_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["associated_accounts"]) -> typing.Union[MetaOapg.properties.associated_accounts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["post_edits_count"]) -> typing.Union[MetaOapg.properties.post_edits_count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["penalty_counts"]) -> typing.Union[MetaOapg.properties.penalty_counts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["next_penalty"]) -> typing.Union[MetaOapg.properties.next_penalty, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tl3_requirements"]) -> typing.Union[MetaOapg.properties.tl3_requirements, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["can_impersonate"], typing_extensions.Literal["flags_given_count"], typing_extensions.Literal["can_grant_admin"], typing_extensions.Literal["can_disable_second_factor"], typing_extensions.Literal["moderator"], typing_extensions.Literal["reset_bounce_score_after"], typing_extensions.Literal["trust_level"], typing_extensions.Literal["can_revoke_moderation"], typing_extensions.Literal["manual_locked_trust_level"], typing_extensions.Literal["can_revoke_admin"], typing_extensions.Literal["can_activate"], typing_extensions.Literal["id"], typing_extensions.Literal["can_delete_all_posts"], typing_extensions.Literal["silenced_by"], typing_extensions.Literal["days_visited"], typing_extensions.Literal["can_be_anonymized"], typing_extensions.Literal["single_sign_on_record"], typing_extensions.Literal["like_count"], typing_extensions.Literal["active"], typing_extensions.Literal["like_given_count"], typing_extensions.Literal["external_ids"], typing_extensions.Literal["private_topics_count"], typing_extensions.Literal["approved_by"], typing_extensions.Literal["bounce_score"], typing_extensions.Literal["created_at_age"], typing_extensions.Literal["api_key_count"], typing_extensions.Literal["name"], typing_extensions.Literal["last_emailed_at"], typing_extensions.Literal["post_count"], typing_extensions.Literal["badge_count"], typing_extensions.Literal["silence_reason"], typing_extensions.Literal["primary_group_id"], typing_extensions.Literal["can_view_action_logs"], typing_extensions.Literal["can_be_merged"], typing_extensions.Literal["admin"], typing_extensions.Literal["created_at"], typing_extensions.Literal["last_seen_age"], typing_extensions.Literal["posts_read_count"], typing_extensions.Literal["title"], typing_extensions.Literal["warnings_received_count"], typing_extensions.Literal["full_suspend_reason"], typing_extensions.Literal["registration_ip_address"], typing_extensions.Literal["suspended_by"], typing_extensions.Literal["can_delete_sso_record"], typing_extensions.Literal["can_be_deleted"], typing_extensions.Literal["last_emailed_age"], typing_extensions.Literal["can_deactivate"], typing_extensions.Literal["avatar_template"], typing_extensions.Literal["time_read"], typing_extensions.Literal["groups"], typing_extensions.Literal["ip_address"], typing_extensions.Literal["staged"], typing_extensions.Literal["flags_received_count"], typing_extensions.Literal["topic_count"], typing_extensions.Literal["can_grant_moderation"], typing_extensions.Literal["can_send_activation_email"], typing_extensions.Literal["topics_entered"], typing_extensions.Literal["last_seen_at"], typing_extensions.Literal["username"], typing_extensions.Literal["associated_accounts"], typing_extensions.Literal["post_edits_count"], typing_extensions.Literal["penalty_counts"], typing_extensions.Literal["next_penalty"], typing_extensions.Literal["tl3_requirements"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        can_impersonate: typing.Union[MetaOapg.properties.can_impersonate, bool, ],
        flags_given_count: typing.Union[MetaOapg.properties.flags_given_count, decimal.Decimal, int, ],
        can_grant_admin: typing.Union[MetaOapg.properties.can_grant_admin, bool, ],
        can_disable_second_factor: typing.Union[MetaOapg.properties.can_disable_second_factor, bool, ],
        moderator: typing.Union[MetaOapg.properties.moderator, bool, ],
        reset_bounce_score_after: typing.Union[MetaOapg.properties.reset_bounce_score_after, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        trust_level: typing.Union[MetaOapg.properties.trust_level, decimal.Decimal, int, ],
        can_revoke_moderation: typing.Union[MetaOapg.properties.can_revoke_moderation, bool, ],
        manual_locked_trust_level: typing.Union[MetaOapg.properties.manual_locked_trust_level, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        can_revoke_admin: typing.Union[MetaOapg.properties.can_revoke_admin, bool, ],
        can_activate: typing.Union[MetaOapg.properties.can_activate, bool, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        can_delete_all_posts: typing.Union[MetaOapg.properties.can_delete_all_posts, bool, ],
        silenced_by: typing.Union[MetaOapg.properties.silenced_by, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        days_visited: typing.Union[MetaOapg.properties.days_visited, decimal.Decimal, int, ],
        can_be_anonymized: typing.Union[MetaOapg.properties.can_be_anonymized, bool, ],
        single_sign_on_record: typing.Union[MetaOapg.properties.single_sign_on_record, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        like_count: typing.Union[MetaOapg.properties.like_count, decimal.Decimal, int, ],
        active: typing.Union[MetaOapg.properties.active, bool, ],
        like_given_count: typing.Union[MetaOapg.properties.like_given_count, decimal.Decimal, int, ],
        external_ids: typing.Union[MetaOapg.properties.external_ids, dict, frozendict.frozendict, ],
        private_topics_count: typing.Union[MetaOapg.properties.private_topics_count, decimal.Decimal, int, ],
        approved_by: typing.Union[MetaOapg.properties.approved_by, dict, frozendict.frozendict, ],
        bounce_score: typing.Union[MetaOapg.properties.bounce_score, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        created_at_age: typing.Union[MetaOapg.properties.created_at_age, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        api_key_count: typing.Union[MetaOapg.properties.api_key_count, decimal.Decimal, int, ],
        name: typing.Union[MetaOapg.properties.name, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        last_emailed_at: typing.Union[MetaOapg.properties.last_emailed_at, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        post_count: typing.Union[MetaOapg.properties.post_count, decimal.Decimal, int, ],
        badge_count: typing.Union[MetaOapg.properties.badge_count, decimal.Decimal, int, ],
        silence_reason: typing.Union[MetaOapg.properties.silence_reason, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        primary_group_id: typing.Union[MetaOapg.properties.primary_group_id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        can_view_action_logs: typing.Union[MetaOapg.properties.can_view_action_logs, bool, ],
        can_be_merged: typing.Union[MetaOapg.properties.can_be_merged, bool, ],
        admin: typing.Union[MetaOapg.properties.admin, bool, ],
        created_at: typing.Union[MetaOapg.properties.created_at, str, ],
        last_seen_age: typing.Union[MetaOapg.properties.last_seen_age, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        posts_read_count: typing.Union[MetaOapg.properties.posts_read_count, decimal.Decimal, int, ],
        title: typing.Union[MetaOapg.properties.title, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        warnings_received_count: typing.Union[MetaOapg.properties.warnings_received_count, decimal.Decimal, int, ],
        full_suspend_reason: typing.Union[MetaOapg.properties.full_suspend_reason, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        registration_ip_address: typing.Union[MetaOapg.properties.registration_ip_address, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        suspended_by: typing.Union[MetaOapg.properties.suspended_by, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        can_delete_sso_record: typing.Union[MetaOapg.properties.can_delete_sso_record, bool, ],
        can_be_deleted: typing.Union[MetaOapg.properties.can_be_deleted, bool, ],
        last_emailed_age: typing.Union[MetaOapg.properties.last_emailed_age, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        can_deactivate: typing.Union[MetaOapg.properties.can_deactivate, bool, ],
        avatar_template: typing.Union[MetaOapg.properties.avatar_template, str, ],
        time_read: typing.Union[MetaOapg.properties.time_read, decimal.Decimal, int, ],
        groups: typing.Union[MetaOapg.properties.groups, list, tuple, ],
        ip_address: typing.Union[MetaOapg.properties.ip_address, str, ],
        staged: typing.Union[MetaOapg.properties.staged, bool, ],
        flags_received_count: typing.Union[MetaOapg.properties.flags_received_count, decimal.Decimal, int, ],
        topic_count: typing.Union[MetaOapg.properties.topic_count, decimal.Decimal, int, ],
        can_grant_moderation: typing.Union[MetaOapg.properties.can_grant_moderation, bool, ],
        can_send_activation_email: typing.Union[MetaOapg.properties.can_send_activation_email, bool, ],
        topics_entered: typing.Union[MetaOapg.properties.topics_entered, decimal.Decimal, int, ],
        last_seen_at: typing.Union[MetaOapg.properties.last_seen_at, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        username: typing.Union[MetaOapg.properties.username, str, ],
        associated_accounts: typing.Union[MetaOapg.properties.associated_accounts, list, tuple, schemas.Unset] = schemas.unset,
        post_edits_count: typing.Union[MetaOapg.properties.post_edits_count, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        penalty_counts: typing.Union[MetaOapg.properties.penalty_counts, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        next_penalty: typing.Union[MetaOapg.properties.next_penalty, str, schemas.Unset] = schemas.unset,
        tl3_requirements: typing.Union[MetaOapg.properties.tl3_requirements, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs,
    ) -> 'UsersGetUserByIdJsonResponse':
        return super().__new__(
            cls,
            *args,
            can_impersonate=can_impersonate,
            flags_given_count=flags_given_count,
            can_grant_admin=can_grant_admin,
            can_disable_second_factor=can_disable_second_factor,
            moderator=moderator,
            reset_bounce_score_after=reset_bounce_score_after,
            trust_level=trust_level,
            can_revoke_moderation=can_revoke_moderation,
            manual_locked_trust_level=manual_locked_trust_level,
            can_revoke_admin=can_revoke_admin,
            can_activate=can_activate,
            id=id,
            can_delete_all_posts=can_delete_all_posts,
            silenced_by=silenced_by,
            days_visited=days_visited,
            can_be_anonymized=can_be_anonymized,
            single_sign_on_record=single_sign_on_record,
            like_count=like_count,
            active=active,
            like_given_count=like_given_count,
            external_ids=external_ids,
            private_topics_count=private_topics_count,
            approved_by=approved_by,
            bounce_score=bounce_score,
            created_at_age=created_at_age,
            api_key_count=api_key_count,
            name=name,
            last_emailed_at=last_emailed_at,
            post_count=post_count,
            badge_count=badge_count,
            silence_reason=silence_reason,
            primary_group_id=primary_group_id,
            can_view_action_logs=can_view_action_logs,
            can_be_merged=can_be_merged,
            admin=admin,
            created_at=created_at,
            last_seen_age=last_seen_age,
            posts_read_count=posts_read_count,
            title=title,
            warnings_received_count=warnings_received_count,
            full_suspend_reason=full_suspend_reason,
            registration_ip_address=registration_ip_address,
            suspended_by=suspended_by,
            can_delete_sso_record=can_delete_sso_record,
            can_be_deleted=can_be_deleted,
            last_emailed_age=last_emailed_age,
            can_deactivate=can_deactivate,
            avatar_template=avatar_template,
            time_read=time_read,
            groups=groups,
            ip_address=ip_address,
            staged=staged,
            flags_received_count=flags_received_count,
            topic_count=topic_count,
            can_grant_moderation=can_grant_moderation,
            can_send_activation_email=can_send_activation_email,
            topics_entered=topics_entered,
            last_seen_at=last_seen_at,
            username=username,
            associated_accounts=associated_accounts,
            post_edits_count=post_edits_count,
            penalty_counts=penalty_counts,
            next_penalty=next_penalty,
            tl3_requirements=tl3_requirements,
            _configuration=_configuration,
        )
