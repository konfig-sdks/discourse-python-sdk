# coding: utf-8

"""
    Discourse API Documentation

    This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 

    The version of the OpenAPI document: latest
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from discourse_python_sdk import schemas  # noqa: F401


class CategoriesListResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "category_list",
        }
        
        class properties:
            
            
            class category_list(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "can_create_topic",
                        "can_create_category",
                        "categories",
                    }
                    
                    class properties:
                        can_create_category = schemas.BoolSchema
                        can_create_topic = schemas.BoolSchema
                        
                        
                        class categories(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        required = {
                                            "uploaded_background",
                                            "color",
                                            "topics_year",
                                            "uploaded_background_dark",
                                            "navigate_to_first_post_after_read",
                                            "description",
                                            "topics_month",
                                            "topic_template",
                                            "show_subcategory_list",
                                            "topics_week",
                                            "uploaded_logo",
                                            "description_excerpt",
                                            "sort_ascending",
                                            "num_featured_topics",
                                            "topics_day",
                                            "id",
                                            "default_view",
                                            "sort_order",
                                            "slug",
                                            "subcategory_list_style",
                                            "has_children",
                                            "default_top_period",
                                            "can_edit",
                                            "description_text",
                                            "permission",
                                            "topic_count",
                                            "uploaded_logo_dark",
                                            "read_restricted",
                                            "topics_all_time",
                                            "minimum_required_tags",
                                            "subcategory_ids",
                                            "topic_url",
                                            "default_list_filter",
                                            "name",
                                            "notification_level",
                                            "position",
                                            "post_count",
                                            "text_color",
                                        }
                                        
                                        class properties:
                                            description = schemas.AnyTypeSchema
                                            id = schemas.IntSchema
                                            name = schemas.StrSchema
                                            color = schemas.StrSchema
                                            text_color = schemas.StrSchema
                                            slug = schemas.StrSchema
                                            topic_count = schemas.IntSchema
                                            post_count = schemas.IntSchema
                                            position = schemas.IntSchema
                                            description_text = schemas.AnyTypeSchema
                                            description_excerpt = schemas.AnyTypeSchema
                                            topic_url = schemas.AnyTypeSchema
                                            read_restricted = schemas.BoolSchema
                                            permission = schemas.IntSchema
                                            notification_level = schemas.IntSchema
                                            can_edit = schemas.BoolSchema
                                            topic_template = schemas.AnyTypeSchema
                                            has_children = schemas.BoolSchema
                                            sort_order = schemas.AnyTypeSchema
                                            sort_ascending = schemas.AnyTypeSchema
                                            show_subcategory_list = schemas.BoolSchema
                                            num_featured_topics = schemas.IntSchema
                                            default_view = schemas.AnyTypeSchema
                                            subcategory_list_style = schemas.StrSchema
                                            default_top_period = schemas.StrSchema
                                            default_list_filter = schemas.StrSchema
                                            minimum_required_tags = schemas.IntSchema
                                            navigate_to_first_post_after_read = schemas.BoolSchema
                                            topics_day = schemas.IntSchema
                                            topics_week = schemas.IntSchema
                                            topics_month = schemas.IntSchema
                                            topics_year = schemas.IntSchema
                                            topics_all_time = schemas.IntSchema
                                            is_uncategorized = schemas.BoolSchema
                                            
                                            
                                            class subcategory_ids(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.AnyTypeSchema
                                            
                                                def __new__(
                                                    cls,
                                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'subcategory_ids':
                                                    return super().__new__(
                                                        cls,
                                                        arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            
                                            
                                            class subcategory_list(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    items = schemas.AnyTypeSchema
                                            
                                                def __new__(
                                                    cls,
                                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'subcategory_list':
                                                    return super().__new__(
                                                        cls,
                                                        arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            uploaded_logo = schemas.AnyTypeSchema
                                            uploaded_logo_dark = schemas.AnyTypeSchema
                                            uploaded_background = schemas.AnyTypeSchema
                                            uploaded_background_dark = schemas.AnyTypeSchema
                                            __annotations__ = {
                                                "description": description,
                                                "id": id,
                                                "name": name,
                                                "color": color,
                                                "text_color": text_color,
                                                "slug": slug,
                                                "topic_count": topic_count,
                                                "post_count": post_count,
                                                "position": position,
                                                "description_text": description_text,
                                                "description_excerpt": description_excerpt,
                                                "topic_url": topic_url,
                                                "read_restricted": read_restricted,
                                                "permission": permission,
                                                "notification_level": notification_level,
                                                "can_edit": can_edit,
                                                "topic_template": topic_template,
                                                "has_children": has_children,
                                                "sort_order": sort_order,
                                                "sort_ascending": sort_ascending,
                                                "show_subcategory_list": show_subcategory_list,
                                                "num_featured_topics": num_featured_topics,
                                                "default_view": default_view,
                                                "subcategory_list_style": subcategory_list_style,
                                                "default_top_period": default_top_period,
                                                "default_list_filter": default_list_filter,
                                                "minimum_required_tags": minimum_required_tags,
                                                "navigate_to_first_post_after_read": navigate_to_first_post_after_read,
                                                "topics_day": topics_day,
                                                "topics_week": topics_week,
                                                "topics_month": topics_month,
                                                "topics_year": topics_year,
                                                "topics_all_time": topics_all_time,
                                                "is_uncategorized": is_uncategorized,
                                                "subcategory_ids": subcategory_ids,
                                                "subcategory_list": subcategory_list,
                                                "uploaded_logo": uploaded_logo,
                                                "uploaded_logo_dark": uploaded_logo_dark,
                                                "uploaded_background": uploaded_background,
                                                "uploaded_background_dark": uploaded_background_dark,
                                            }
                                    
                                    uploaded_background: MetaOapg.properties.uploaded_background
                                    color: MetaOapg.properties.color
                                    topics_year: MetaOapg.properties.topics_year
                                    uploaded_background_dark: MetaOapg.properties.uploaded_background_dark
                                    navigate_to_first_post_after_read: MetaOapg.properties.navigate_to_first_post_after_read
                                    description: MetaOapg.properties.description
                                    topics_month: MetaOapg.properties.topics_month
                                    topic_template: MetaOapg.properties.topic_template
                                    show_subcategory_list: MetaOapg.properties.show_subcategory_list
                                    topics_week: MetaOapg.properties.topics_week
                                    uploaded_logo: MetaOapg.properties.uploaded_logo
                                    description_excerpt: MetaOapg.properties.description_excerpt
                                    sort_ascending: MetaOapg.properties.sort_ascending
                                    num_featured_topics: MetaOapg.properties.num_featured_topics
                                    topics_day: MetaOapg.properties.topics_day
                                    id: MetaOapg.properties.id
                                    default_view: MetaOapg.properties.default_view
                                    sort_order: MetaOapg.properties.sort_order
                                    slug: MetaOapg.properties.slug
                                    subcategory_list_style: MetaOapg.properties.subcategory_list_style
                                    has_children: MetaOapg.properties.has_children
                                    default_top_period: MetaOapg.properties.default_top_period
                                    can_edit: MetaOapg.properties.can_edit
                                    description_text: MetaOapg.properties.description_text
                                    permission: MetaOapg.properties.permission
                                    topic_count: MetaOapg.properties.topic_count
                                    uploaded_logo_dark: MetaOapg.properties.uploaded_logo_dark
                                    read_restricted: MetaOapg.properties.read_restricted
                                    topics_all_time: MetaOapg.properties.topics_all_time
                                    minimum_required_tags: MetaOapg.properties.minimum_required_tags
                                    subcategory_ids: MetaOapg.properties.subcategory_ids
                                    topic_url: MetaOapg.properties.topic_url
                                    default_list_filter: MetaOapg.properties.default_list_filter
                                    name: MetaOapg.properties.name
                                    notification_level: MetaOapg.properties.notification_level
                                    position: MetaOapg.properties.position
                                    post_count: MetaOapg.properties.post_count
                                    text_color: MetaOapg.properties.text_color
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["text_color"]) -> MetaOapg.properties.text_color: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["topic_count"]) -> MetaOapg.properties.topic_count: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["post_count"]) -> MetaOapg.properties.post_count: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["position"]) -> MetaOapg.properties.position: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["description_text"]) -> MetaOapg.properties.description_text: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["description_excerpt"]) -> MetaOapg.properties.description_excerpt: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["topic_url"]) -> MetaOapg.properties.topic_url: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["read_restricted"]) -> MetaOapg.properties.read_restricted: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["permission"]) -> MetaOapg.properties.permission: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["notification_level"]) -> MetaOapg.properties.notification_level: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["can_edit"]) -> MetaOapg.properties.can_edit: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["topic_template"]) -> MetaOapg.properties.topic_template: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["has_children"]) -> MetaOapg.properties.has_children: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["sort_order"]) -> MetaOapg.properties.sort_order: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["sort_ascending"]) -> MetaOapg.properties.sort_ascending: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["show_subcategory_list"]) -> MetaOapg.properties.show_subcategory_list: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["num_featured_topics"]) -> MetaOapg.properties.num_featured_topics: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["default_view"]) -> MetaOapg.properties.default_view: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["subcategory_list_style"]) -> MetaOapg.properties.subcategory_list_style: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["default_top_period"]) -> MetaOapg.properties.default_top_period: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["default_list_filter"]) -> MetaOapg.properties.default_list_filter: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["minimum_required_tags"]) -> MetaOapg.properties.minimum_required_tags: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["navigate_to_first_post_after_read"]) -> MetaOapg.properties.navigate_to_first_post_after_read: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["topics_day"]) -> MetaOapg.properties.topics_day: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["topics_week"]) -> MetaOapg.properties.topics_week: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["topics_month"]) -> MetaOapg.properties.topics_month: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["topics_year"]) -> MetaOapg.properties.topics_year: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["topics_all_time"]) -> MetaOapg.properties.topics_all_time: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["is_uncategorized"]) -> MetaOapg.properties.is_uncategorized: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["subcategory_ids"]) -> MetaOapg.properties.subcategory_ids: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["subcategory_list"]) -> MetaOapg.properties.subcategory_list: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["uploaded_logo"]) -> MetaOapg.properties.uploaded_logo: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["uploaded_logo_dark"]) -> MetaOapg.properties.uploaded_logo_dark: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["uploaded_background"]) -> MetaOapg.properties.uploaded_background: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["uploaded_background_dark"]) -> MetaOapg.properties.uploaded_background_dark: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "id", "name", "color", "text_color", "slug", "topic_count", "post_count", "position", "description_text", "description_excerpt", "topic_url", "read_restricted", "permission", "notification_level", "can_edit", "topic_template", "has_children", "sort_order", "sort_ascending", "show_subcategory_list", "num_featured_topics", "default_view", "subcategory_list_style", "default_top_period", "default_list_filter", "minimum_required_tags", "navigate_to_first_post_after_read", "topics_day", "topics_week", "topics_month", "topics_year", "topics_all_time", "is_uncategorized", "subcategory_ids", "subcategory_list", "uploaded_logo", "uploaded_logo_dark", "uploaded_background", "uploaded_background_dark", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["text_color"]) -> MetaOapg.properties.text_color: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["topic_count"]) -> MetaOapg.properties.topic_count: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["post_count"]) -> MetaOapg.properties.post_count: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["position"]) -> MetaOapg.properties.position: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["description_text"]) -> MetaOapg.properties.description_text: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["description_excerpt"]) -> MetaOapg.properties.description_excerpt: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["topic_url"]) -> MetaOapg.properties.topic_url: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["read_restricted"]) -> MetaOapg.properties.read_restricted: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["permission"]) -> MetaOapg.properties.permission: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["notification_level"]) -> MetaOapg.properties.notification_level: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["can_edit"]) -> MetaOapg.properties.can_edit: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["topic_template"]) -> MetaOapg.properties.topic_template: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["has_children"]) -> MetaOapg.properties.has_children: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["sort_order"]) -> MetaOapg.properties.sort_order: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["sort_ascending"]) -> MetaOapg.properties.sort_ascending: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["show_subcategory_list"]) -> MetaOapg.properties.show_subcategory_list: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["num_featured_topics"]) -> MetaOapg.properties.num_featured_topics: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["default_view"]) -> MetaOapg.properties.default_view: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["subcategory_list_style"]) -> MetaOapg.properties.subcategory_list_style: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["default_top_period"]) -> MetaOapg.properties.default_top_period: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["default_list_filter"]) -> MetaOapg.properties.default_list_filter: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["minimum_required_tags"]) -> MetaOapg.properties.minimum_required_tags: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["navigate_to_first_post_after_read"]) -> MetaOapg.properties.navigate_to_first_post_after_read: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["topics_day"]) -> MetaOapg.properties.topics_day: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["topics_week"]) -> MetaOapg.properties.topics_week: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["topics_month"]) -> MetaOapg.properties.topics_month: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["topics_year"]) -> MetaOapg.properties.topics_year: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["topics_all_time"]) -> MetaOapg.properties.topics_all_time: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["is_uncategorized"]) -> typing.Union[MetaOapg.properties.is_uncategorized, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["subcategory_ids"]) -> MetaOapg.properties.subcategory_ids: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["subcategory_list"]) -> typing.Union[MetaOapg.properties.subcategory_list, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["uploaded_logo"]) -> MetaOapg.properties.uploaded_logo: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["uploaded_logo_dark"]) -> MetaOapg.properties.uploaded_logo_dark: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["uploaded_background"]) -> MetaOapg.properties.uploaded_background: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["uploaded_background_dark"]) -> MetaOapg.properties.uploaded_background_dark: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "id", "name", "color", "text_color", "slug", "topic_count", "post_count", "position", "description_text", "description_excerpt", "topic_url", "read_restricted", "permission", "notification_level", "can_edit", "topic_template", "has_children", "sort_order", "sort_ascending", "show_subcategory_list", "num_featured_topics", "default_view", "subcategory_list_style", "default_top_period", "default_list_filter", "minimum_required_tags", "navigate_to_first_post_after_read", "topics_day", "topics_week", "topics_month", "topics_year", "topics_all_time", "is_uncategorized", "subcategory_ids", "subcategory_list", "uploaded_logo", "uploaded_logo_dark", "uploaded_background", "uploaded_background_dark", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        uploaded_background: typing.Union[MetaOapg.properties.uploaded_background, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        color: typing.Union[MetaOapg.properties.color, str, ],
                                        topics_year: typing.Union[MetaOapg.properties.topics_year, decimal.Decimal, int, ],
                                        uploaded_background_dark: typing.Union[MetaOapg.properties.uploaded_background_dark, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        navigate_to_first_post_after_read: typing.Union[MetaOapg.properties.navigate_to_first_post_after_read, bool, ],
                                        description: typing.Union[MetaOapg.properties.description, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        topics_month: typing.Union[MetaOapg.properties.topics_month, decimal.Decimal, int, ],
                                        topic_template: typing.Union[MetaOapg.properties.topic_template, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        show_subcategory_list: typing.Union[MetaOapg.properties.show_subcategory_list, bool, ],
                                        topics_week: typing.Union[MetaOapg.properties.topics_week, decimal.Decimal, int, ],
                                        uploaded_logo: typing.Union[MetaOapg.properties.uploaded_logo, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        description_excerpt: typing.Union[MetaOapg.properties.description_excerpt, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        sort_ascending: typing.Union[MetaOapg.properties.sort_ascending, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        num_featured_topics: typing.Union[MetaOapg.properties.num_featured_topics, decimal.Decimal, int, ],
                                        topics_day: typing.Union[MetaOapg.properties.topics_day, decimal.Decimal, int, ],
                                        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
                                        default_view: typing.Union[MetaOapg.properties.default_view, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        sort_order: typing.Union[MetaOapg.properties.sort_order, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        slug: typing.Union[MetaOapg.properties.slug, str, ],
                                        subcategory_list_style: typing.Union[MetaOapg.properties.subcategory_list_style, str, ],
                                        has_children: typing.Union[MetaOapg.properties.has_children, bool, ],
                                        default_top_period: typing.Union[MetaOapg.properties.default_top_period, str, ],
                                        can_edit: typing.Union[MetaOapg.properties.can_edit, bool, ],
                                        description_text: typing.Union[MetaOapg.properties.description_text, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        permission: typing.Union[MetaOapg.properties.permission, decimal.Decimal, int, ],
                                        topic_count: typing.Union[MetaOapg.properties.topic_count, decimal.Decimal, int, ],
                                        uploaded_logo_dark: typing.Union[MetaOapg.properties.uploaded_logo_dark, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        read_restricted: typing.Union[MetaOapg.properties.read_restricted, bool, ],
                                        topics_all_time: typing.Union[MetaOapg.properties.topics_all_time, decimal.Decimal, int, ],
                                        minimum_required_tags: typing.Union[MetaOapg.properties.minimum_required_tags, decimal.Decimal, int, ],
                                        subcategory_ids: typing.Union[MetaOapg.properties.subcategory_ids, list, tuple, ],
                                        topic_url: typing.Union[MetaOapg.properties.topic_url, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        default_list_filter: typing.Union[MetaOapg.properties.default_list_filter, str, ],
                                        name: typing.Union[MetaOapg.properties.name, str, ],
                                        notification_level: typing.Union[MetaOapg.properties.notification_level, decimal.Decimal, int, ],
                                        position: typing.Union[MetaOapg.properties.position, decimal.Decimal, int, ],
                                        post_count: typing.Union[MetaOapg.properties.post_count, decimal.Decimal, int, ],
                                        text_color: typing.Union[MetaOapg.properties.text_color, str, ],
                                        is_uncategorized: typing.Union[MetaOapg.properties.is_uncategorized, bool, schemas.Unset] = schemas.unset,
                                        subcategory_list: typing.Union[MetaOapg.properties.subcategory_list, list, tuple, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            uploaded_background=uploaded_background,
                                            color=color,
                                            topics_year=topics_year,
                                            uploaded_background_dark=uploaded_background_dark,
                                            navigate_to_first_post_after_read=navigate_to_first_post_after_read,
                                            description=description,
                                            topics_month=topics_month,
                                            topic_template=topic_template,
                                            show_subcategory_list=show_subcategory_list,
                                            topics_week=topics_week,
                                            uploaded_logo=uploaded_logo,
                                            description_excerpt=description_excerpt,
                                            sort_ascending=sort_ascending,
                                            num_featured_topics=num_featured_topics,
                                            topics_day=topics_day,
                                            id=id,
                                            default_view=default_view,
                                            sort_order=sort_order,
                                            slug=slug,
                                            subcategory_list_style=subcategory_list_style,
                                            has_children=has_children,
                                            default_top_period=default_top_period,
                                            can_edit=can_edit,
                                            description_text=description_text,
                                            permission=permission,
                                            topic_count=topic_count,
                                            uploaded_logo_dark=uploaded_logo_dark,
                                            read_restricted=read_restricted,
                                            topics_all_time=topics_all_time,
                                            minimum_required_tags=minimum_required_tags,
                                            subcategory_ids=subcategory_ids,
                                            topic_url=topic_url,
                                            default_list_filter=default_list_filter,
                                            name=name,
                                            notification_level=notification_level,
                                            position=position,
                                            post_count=post_count,
                                            text_color=text_color,
                                            is_uncategorized=is_uncategorized,
                                            subcategory_list=subcategory_list,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'categories':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "can_create_category": can_create_category,
                            "can_create_topic": can_create_topic,
                            "categories": categories,
                        }
                
                can_create_topic: MetaOapg.properties.can_create_topic
                can_create_category: MetaOapg.properties.can_create_category
                categories: MetaOapg.properties.categories
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_create_category"]) -> MetaOapg.properties.can_create_category: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_create_topic"]) -> MetaOapg.properties.can_create_topic: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["categories"]) -> MetaOapg.properties.categories: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["can_create_category", "can_create_topic", "categories", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_create_category"]) -> MetaOapg.properties.can_create_category: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_create_topic"]) -> MetaOapg.properties.can_create_topic: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["categories"]) -> MetaOapg.properties.categories: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["can_create_category", "can_create_topic", "categories", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    can_create_topic: typing.Union[MetaOapg.properties.can_create_topic, bool, ],
                    can_create_category: typing.Union[MetaOapg.properties.can_create_category, bool, ],
                    categories: typing.Union[MetaOapg.properties.categories, list, tuple, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'category_list':
                    return super().__new__(
                        cls,
                        *args,
                        can_create_topic=can_create_topic,
                        can_create_category=can_create_category,
                        categories=categories,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "category_list": category_list,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    category_list: MetaOapg.properties.category_list
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category_list"]) -> MetaOapg.properties.category_list: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["category_list"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category_list"]) -> MetaOapg.properties.category_list: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["category_list"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        category_list: typing.Union[MetaOapg.properties.category_list, dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs,
    ) -> 'CategoriesListResponse':
        return super().__new__(
            cls,
            *args,
            category_list=category_list,
            _configuration=_configuration,
        )
