# coding: utf-8

"""
    Discourse API Documentation

    This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 

    The version of the OpenAPI document: latest
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from discourse_python_sdk import schemas  # noqa: F401


class CategoriesListTopicsResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "topic_list",
        }
        
        class properties:
            
            
            class topic_list(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "can_create_topic",
                        "per_page",
                        "topics",
                    }
                    
                    class properties:
                        can_create_topic = schemas.BoolSchema
                        per_page = schemas.IntSchema
                        
                        
                        class top_tags(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'top_tags':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class topics(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        required = {
                                            "unpinned",
                                            "pinned",
                                            "featured_link",
                                            "created_at",
                                            "bumped",
                                            "title",
                                            "liked",
                                            "archived",
                                            "has_summary",
                                            "fancy_title",
                                            "category_id",
                                            "id",
                                            "bumped_at",
                                            "slug",
                                            "views",
                                            "last_posted_at",
                                            "like_count",
                                            "visible",
                                            "bookmarked",
                                            "image_url",
                                            "last_poster_username",
                                            "posters",
                                            "pinned_globally",
                                            "reply_count",
                                            "archetype",
                                            "highest_post_number",
                                            "closed",
                                            "excerpt",
                                            "unseen",
                                            "posts_count",
                                        }
                                        
                                        class properties:
                                            title = schemas.StrSchema
                                            id = schemas.IntSchema
                                            fancy_title = schemas.StrSchema
                                            slug = schemas.StrSchema
                                            posts_count = schemas.IntSchema
                                            reply_count = schemas.IntSchema
                                            highest_post_number = schemas.IntSchema
                                            image_url = schemas.AnyTypeSchema
                                            created_at = schemas.StrSchema
                                            last_posted_at = schemas.StrSchema
                                            bumped = schemas.BoolSchema
                                            bumped_at = schemas.StrSchema
                                            archetype = schemas.StrSchema
                                            unseen = schemas.BoolSchema
                                            pinned = schemas.BoolSchema
                                            unpinned = schemas.AnyTypeSchema
                                            excerpt = schemas.StrSchema
                                            visible = schemas.BoolSchema
                                            closed = schemas.BoolSchema
                                            archived = schemas.BoolSchema
                                            bookmarked = schemas.AnyTypeSchema
                                            liked = schemas.AnyTypeSchema
                                            views = schemas.IntSchema
                                            like_count = schemas.IntSchema
                                            has_summary = schemas.BoolSchema
                                            last_poster_username = schemas.StrSchema
                                            category_id = schemas.IntSchema
                                            pinned_globally = schemas.BoolSchema
                                            featured_link = schemas.AnyTypeSchema
                                            
                                            
                                            class posters(
                                                schemas.ListSchema
                                            ):
                                            
                                            
                                                class MetaOapg:
                                                    
                                                    
                                                    class items(
                                                        schemas.DictSchema
                                                    ):
                                                    
                                                    
                                                        class MetaOapg:
                                                            required = {
                                                                "primary_group_id",
                                                                "user_id",
                                                                "description",
                                                                "extras",
                                                            }
                                                            
                                                            class properties:
                                                                description = schemas.StrSchema
                                                                extras = schemas.StrSchema
                                                                user_id = schemas.IntSchema
                                                                primary_group_id = schemas.AnyTypeSchema
                                                                __annotations__ = {
                                                                    "description": description,
                                                                    "extras": extras,
                                                                    "user_id": user_id,
                                                                    "primary_group_id": primary_group_id,
                                                                }
                                                        
                                                        primary_group_id: MetaOapg.properties.primary_group_id
                                                        user_id: MetaOapg.properties.user_id
                                                        description: MetaOapg.properties.description
                                                        extras: MetaOapg.properties.extras
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["extras"]) -> MetaOapg.properties.extras: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: typing_extensions.Literal["primary_group_id"]) -> MetaOapg.properties.primary_group_id: ...
                                                        
                                                        @typing.overload
                                                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                                        
                                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "extras", "user_id", "primary_group_id", ], str]):
                                                            # dict_instance[name] accessor
                                                            return super().__getitem__(name)
                                                        
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["extras"]) -> MetaOapg.properties.extras: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: typing_extensions.Literal["primary_group_id"]) -> MetaOapg.properties.primary_group_id: ...
                                                        
                                                        @typing.overload
                                                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                                        
                                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "extras", "user_id", "primary_group_id", ], str]):
                                                            return super().get_item_oapg(name)
                                                        
                                                    
                                                        def __new__(
                                                            cls,
                                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                                            primary_group_id: typing.Union[MetaOapg.properties.primary_group_id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                                            user_id: typing.Union[MetaOapg.properties.user_id, decimal.Decimal, int, ],
                                                            description: typing.Union[MetaOapg.properties.description, str, ],
                                                            extras: typing.Union[MetaOapg.properties.extras, str, ],
                                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                                        ) -> 'items':
                                                            return super().__new__(
                                                                cls,
                                                                *args,
                                                                primary_group_id=primary_group_id,
                                                                user_id=user_id,
                                                                description=description,
                                                                extras=extras,
                                                                _configuration=_configuration,
                                                                **kwargs,
                                                            )
                                            
                                                def __new__(
                                                    cls,
                                                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                                ) -> 'posters':
                                                    return super().__new__(
                                                        cls,
                                                        arg,
                                                        _configuration=_configuration,
                                                    )
                                            
                                                def __getitem__(self, i: int) -> MetaOapg.items:
                                                    return super().__getitem__(i)
                                            __annotations__ = {
                                                "title": title,
                                                "id": id,
                                                "fancy_title": fancy_title,
                                                "slug": slug,
                                                "posts_count": posts_count,
                                                "reply_count": reply_count,
                                                "highest_post_number": highest_post_number,
                                                "image_url": image_url,
                                                "created_at": created_at,
                                                "last_posted_at": last_posted_at,
                                                "bumped": bumped,
                                                "bumped_at": bumped_at,
                                                "archetype": archetype,
                                                "unseen": unseen,
                                                "pinned": pinned,
                                                "unpinned": unpinned,
                                                "excerpt": excerpt,
                                                "visible": visible,
                                                "closed": closed,
                                                "archived": archived,
                                                "bookmarked": bookmarked,
                                                "liked": liked,
                                                "views": views,
                                                "like_count": like_count,
                                                "has_summary": has_summary,
                                                "last_poster_username": last_poster_username,
                                                "category_id": category_id,
                                                "pinned_globally": pinned_globally,
                                                "featured_link": featured_link,
                                                "posters": posters,
                                            }
                                    
                                    unpinned: MetaOapg.properties.unpinned
                                    pinned: MetaOapg.properties.pinned
                                    featured_link: MetaOapg.properties.featured_link
                                    created_at: MetaOapg.properties.created_at
                                    bumped: MetaOapg.properties.bumped
                                    title: MetaOapg.properties.title
                                    liked: MetaOapg.properties.liked
                                    archived: MetaOapg.properties.archived
                                    has_summary: MetaOapg.properties.has_summary
                                    fancy_title: MetaOapg.properties.fancy_title
                                    category_id: MetaOapg.properties.category_id
                                    id: MetaOapg.properties.id
                                    bumped_at: MetaOapg.properties.bumped_at
                                    slug: MetaOapg.properties.slug
                                    views: MetaOapg.properties.views
                                    last_posted_at: MetaOapg.properties.last_posted_at
                                    like_count: MetaOapg.properties.like_count
                                    visible: MetaOapg.properties.visible
                                    bookmarked: MetaOapg.properties.bookmarked
                                    image_url: MetaOapg.properties.image_url
                                    last_poster_username: MetaOapg.properties.last_poster_username
                                    posters: MetaOapg.properties.posters
                                    pinned_globally: MetaOapg.properties.pinned_globally
                                    reply_count: MetaOapg.properties.reply_count
                                    archetype: MetaOapg.properties.archetype
                                    highest_post_number: MetaOapg.properties.highest_post_number
                                    closed: MetaOapg.properties.closed
                                    excerpt: MetaOapg.properties.excerpt
                                    unseen: MetaOapg.properties.unseen
                                    posts_count: MetaOapg.properties.posts_count
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["fancy_title"]) -> MetaOapg.properties.fancy_title: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["posts_count"]) -> MetaOapg.properties.posts_count: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["reply_count"]) -> MetaOapg.properties.reply_count: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["highest_post_number"]) -> MetaOapg.properties.highest_post_number: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["image_url"]) -> MetaOapg.properties.image_url: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["last_posted_at"]) -> MetaOapg.properties.last_posted_at: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["bumped"]) -> MetaOapg.properties.bumped: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["bumped_at"]) -> MetaOapg.properties.bumped_at: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["archetype"]) -> MetaOapg.properties.archetype: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["unseen"]) -> MetaOapg.properties.unseen: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["pinned"]) -> MetaOapg.properties.pinned: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["unpinned"]) -> MetaOapg.properties.unpinned: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["excerpt"]) -> MetaOapg.properties.excerpt: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["visible"]) -> MetaOapg.properties.visible: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["closed"]) -> MetaOapg.properties.closed: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["archived"]) -> MetaOapg.properties.archived: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["bookmarked"]) -> MetaOapg.properties.bookmarked: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["liked"]) -> MetaOapg.properties.liked: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["views"]) -> MetaOapg.properties.views: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["like_count"]) -> MetaOapg.properties.like_count: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["has_summary"]) -> MetaOapg.properties.has_summary: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["last_poster_username"]) -> MetaOapg.properties.last_poster_username: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["category_id"]) -> MetaOapg.properties.category_id: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["pinned_globally"]) -> MetaOapg.properties.pinned_globally: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["featured_link"]) -> MetaOapg.properties.featured_link: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["posters"]) -> MetaOapg.properties.posters: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "id", "fancy_title", "slug", "posts_count", "reply_count", "highest_post_number", "image_url", "created_at", "last_posted_at", "bumped", "bumped_at", "archetype", "unseen", "pinned", "unpinned", "excerpt", "visible", "closed", "archived", "bookmarked", "liked", "views", "like_count", "has_summary", "last_poster_username", "category_id", "pinned_globally", "featured_link", "posters", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["fancy_title"]) -> MetaOapg.properties.fancy_title: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["posts_count"]) -> MetaOapg.properties.posts_count: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["reply_count"]) -> MetaOapg.properties.reply_count: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["highest_post_number"]) -> MetaOapg.properties.highest_post_number: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["image_url"]) -> MetaOapg.properties.image_url: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["last_posted_at"]) -> MetaOapg.properties.last_posted_at: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["bumped"]) -> MetaOapg.properties.bumped: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["bumped_at"]) -> MetaOapg.properties.bumped_at: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["archetype"]) -> MetaOapg.properties.archetype: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["unseen"]) -> MetaOapg.properties.unseen: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["pinned"]) -> MetaOapg.properties.pinned: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["unpinned"]) -> MetaOapg.properties.unpinned: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["excerpt"]) -> MetaOapg.properties.excerpt: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["visible"]) -> MetaOapg.properties.visible: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["closed"]) -> MetaOapg.properties.closed: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["archived"]) -> MetaOapg.properties.archived: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["bookmarked"]) -> MetaOapg.properties.bookmarked: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["liked"]) -> MetaOapg.properties.liked: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["views"]) -> MetaOapg.properties.views: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["like_count"]) -> MetaOapg.properties.like_count: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["has_summary"]) -> MetaOapg.properties.has_summary: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["last_poster_username"]) -> MetaOapg.properties.last_poster_username: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["category_id"]) -> MetaOapg.properties.category_id: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["pinned_globally"]) -> MetaOapg.properties.pinned_globally: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["featured_link"]) -> MetaOapg.properties.featured_link: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["posters"]) -> MetaOapg.properties.posters: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "id", "fancy_title", "slug", "posts_count", "reply_count", "highest_post_number", "image_url", "created_at", "last_posted_at", "bumped", "bumped_at", "archetype", "unseen", "pinned", "unpinned", "excerpt", "visible", "closed", "archived", "bookmarked", "liked", "views", "like_count", "has_summary", "last_poster_username", "category_id", "pinned_globally", "featured_link", "posters", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        unpinned: typing.Union[MetaOapg.properties.unpinned, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        pinned: typing.Union[MetaOapg.properties.pinned, bool, ],
                                        featured_link: typing.Union[MetaOapg.properties.featured_link, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        created_at: typing.Union[MetaOapg.properties.created_at, str, ],
                                        bumped: typing.Union[MetaOapg.properties.bumped, bool, ],
                                        title: typing.Union[MetaOapg.properties.title, str, ],
                                        liked: typing.Union[MetaOapg.properties.liked, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        archived: typing.Union[MetaOapg.properties.archived, bool, ],
                                        has_summary: typing.Union[MetaOapg.properties.has_summary, bool, ],
                                        fancy_title: typing.Union[MetaOapg.properties.fancy_title, str, ],
                                        category_id: typing.Union[MetaOapg.properties.category_id, decimal.Decimal, int, ],
                                        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
                                        bumped_at: typing.Union[MetaOapg.properties.bumped_at, str, ],
                                        slug: typing.Union[MetaOapg.properties.slug, str, ],
                                        views: typing.Union[MetaOapg.properties.views, decimal.Decimal, int, ],
                                        last_posted_at: typing.Union[MetaOapg.properties.last_posted_at, str, ],
                                        like_count: typing.Union[MetaOapg.properties.like_count, decimal.Decimal, int, ],
                                        visible: typing.Union[MetaOapg.properties.visible, bool, ],
                                        bookmarked: typing.Union[MetaOapg.properties.bookmarked, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        image_url: typing.Union[MetaOapg.properties.image_url, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        last_poster_username: typing.Union[MetaOapg.properties.last_poster_username, str, ],
                                        posters: typing.Union[MetaOapg.properties.posters, list, tuple, ],
                                        pinned_globally: typing.Union[MetaOapg.properties.pinned_globally, bool, ],
                                        reply_count: typing.Union[MetaOapg.properties.reply_count, decimal.Decimal, int, ],
                                        archetype: typing.Union[MetaOapg.properties.archetype, str, ],
                                        highest_post_number: typing.Union[MetaOapg.properties.highest_post_number, decimal.Decimal, int, ],
                                        closed: typing.Union[MetaOapg.properties.closed, bool, ],
                                        excerpt: typing.Union[MetaOapg.properties.excerpt, str, ],
                                        unseen: typing.Union[MetaOapg.properties.unseen, bool, ],
                                        posts_count: typing.Union[MetaOapg.properties.posts_count, decimal.Decimal, int, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            unpinned=unpinned,
                                            pinned=pinned,
                                            featured_link=featured_link,
                                            created_at=created_at,
                                            bumped=bumped,
                                            title=title,
                                            liked=liked,
                                            archived=archived,
                                            has_summary=has_summary,
                                            fancy_title=fancy_title,
                                            category_id=category_id,
                                            id=id,
                                            bumped_at=bumped_at,
                                            slug=slug,
                                            views=views,
                                            last_posted_at=last_posted_at,
                                            like_count=like_count,
                                            visible=visible,
                                            bookmarked=bookmarked,
                                            image_url=image_url,
                                            last_poster_username=last_poster_username,
                                            posters=posters,
                                            pinned_globally=pinned_globally,
                                            reply_count=reply_count,
                                            archetype=archetype,
                                            highest_post_number=highest_post_number,
                                            closed=closed,
                                            excerpt=excerpt,
                                            unseen=unseen,
                                            posts_count=posts_count,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'topics':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "can_create_topic": can_create_topic,
                            "per_page": per_page,
                            "top_tags": top_tags,
                            "topics": topics,
                        }
                
                can_create_topic: MetaOapg.properties.can_create_topic
                per_page: MetaOapg.properties.per_page
                topics: MetaOapg.properties.topics
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_create_topic"]) -> MetaOapg.properties.can_create_topic: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["per_page"]) -> MetaOapg.properties.per_page: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["top_tags"]) -> MetaOapg.properties.top_tags: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["topics"]) -> MetaOapg.properties.topics: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["can_create_topic", "per_page", "top_tags", "topics", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_create_topic"]) -> MetaOapg.properties.can_create_topic: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["per_page"]) -> MetaOapg.properties.per_page: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["top_tags"]) -> typing.Union[MetaOapg.properties.top_tags, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["topics"]) -> MetaOapg.properties.topics: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["can_create_topic", "per_page", "top_tags", "topics", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    can_create_topic: typing.Union[MetaOapg.properties.can_create_topic, bool, ],
                    per_page: typing.Union[MetaOapg.properties.per_page, decimal.Decimal, int, ],
                    topics: typing.Union[MetaOapg.properties.topics, list, tuple, ],
                    top_tags: typing.Union[MetaOapg.properties.top_tags, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'topic_list':
                    return super().__new__(
                        cls,
                        *args,
                        can_create_topic=can_create_topic,
                        per_page=per_page,
                        topics=topics,
                        top_tags=top_tags,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class users(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "name",
                                "id",
                                "avatar_template",
                                "username",
                            }
                            
                            class properties:
                                id = schemas.IntSchema
                                username = schemas.StrSchema
                                name = schemas.StrSchema
                                avatar_template = schemas.StrSchema
                                __annotations__ = {
                                    "id": id,
                                    "username": username,
                                    "name": name,
                                    "avatar_template": avatar_template,
                                }
                        
                        name: MetaOapg.properties.name
                        id: MetaOapg.properties.id
                        avatar_template: MetaOapg.properties.avatar_template
                        username: MetaOapg.properties.username
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["avatar_template"]) -> MetaOapg.properties.avatar_template: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "username", "name", "avatar_template", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["avatar_template"]) -> MetaOapg.properties.avatar_template: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "username", "name", "avatar_template", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            name: typing.Union[MetaOapg.properties.name, str, ],
                            id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
                            avatar_template: typing.Union[MetaOapg.properties.avatar_template, str, ],
                            username: typing.Union[MetaOapg.properties.username, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                name=name,
                                id=id,
                                avatar_template=avatar_template,
                                username=username,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'users':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class primary_groups(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.AnyTypeSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'primary_groups':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "topic_list": topic_list,
                "users": users,
                "primary_groups": primary_groups,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    topic_list: MetaOapg.properties.topic_list
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["topic_list"]) -> MetaOapg.properties.topic_list: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["users"]) -> MetaOapg.properties.users: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primary_groups"]) -> MetaOapg.properties.primary_groups: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["topic_list"], typing_extensions.Literal["users"], typing_extensions.Literal["primary_groups"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["topic_list"]) -> MetaOapg.properties.topic_list: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["users"]) -> typing.Union[MetaOapg.properties.users, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primary_groups"]) -> typing.Union[MetaOapg.properties.primary_groups, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["topic_list"], typing_extensions.Literal["users"], typing_extensions.Literal["primary_groups"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        topic_list: typing.Union[MetaOapg.properties.topic_list, dict, frozendict.frozendict, ],
        users: typing.Union[MetaOapg.properties.users, list, tuple, schemas.Unset] = schemas.unset,
        primary_groups: typing.Union[MetaOapg.properties.primary_groups, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs,
    ) -> 'CategoriesListTopicsResponse':
        return super().__new__(
            cls,
            *args,
            topic_list=topic_list,
            users=users,
            primary_groups=primary_groups,
            _configuration=_configuration,
        )
