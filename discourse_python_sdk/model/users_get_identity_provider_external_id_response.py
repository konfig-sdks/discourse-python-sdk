# coding: utf-8

"""
    Discourse API Documentation

    This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 

    The version of the OpenAPI document: latest
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from discourse_python_sdk import schemas  # noqa: F401


class UsersGetIdentityProviderExternalIdResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "user",
            "user_badges",
        }
        
        class properties:
            
            
            class user_badges(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.AnyTypeSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'user_badges':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class user(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "group_users",
                        "recent_time_read",
                        "flair_color",
                        "moderator",
                        "trust_level",
                        "tracked_category_ids",
                        "muted_tags",
                        "can_send_private_messages",
                        "user_notification_schedule",
                        "id",
                        "second_factor_enabled",
                        "can_delete_all_posts",
                        "can_change_location",
                        "uploaded_avatar_id",
                        "ignored",
                        "regular_category_ids",
                        "watching_first_post_tags",
                        "can_send_private_message_to_user",
                        "tracked_tags",
                        "custom_fields",
                        "can_edit_email",
                        "can_mute_user",
                        "profile_view_count",
                        "can_change_tracking_preferences",
                        "featured_user_badge_ids",
                        "can_edit_name",
                        "name",
                        "system_avatar_upload_id",
                        "allowed_pm_usernames",
                        "post_count",
                        "badge_count",
                        "primary_group_id",
                        "use_logo_small_as_avatar",
                        "user_api_keys",
                        "admin",
                        "created_at",
                        "locale",
                        "title",
                        "can_change_website",
                        "muted_category_ids",
                        "watched_tags",
                        "muted_usernames",
                        "can_be_deleted",
                        "can_change_bio",
                        "mailing_list_posts_per_day",
                        "system_avatar_template",
                        "has_title_badges",
                        "featured_topic",
                        "muted",
                        "avatar_template",
                        "last_posted_at",
                        "can_upload_profile_header",
                        "can_upload_user_card_background",
                        "time_read",
                        "can_edit",
                        "groups",
                        "user_option",
                        "flair_url",
                        "ignored_usernames",
                        "invited_by",
                        "staged",
                        "watched_first_post_category_ids",
                        "flair_bg_color",
                        "pending_count",
                        "primary_group_name",
                        "can_edit_username",
                        "can_ignore_user",
                        "user_auth_tokens",
                        "flair_group_id",
                        "last_seen_at",
                        "flair_name",
                        "username",
                        "watched_category_ids",
                    }
                    
                    class properties:
                        title = schemas.AnyTypeSchema
                        id = schemas.IntSchema
                        username = schemas.StrSchema
                        name = schemas.StrSchema
                        avatar_template = schemas.StrSchema
                        last_posted_at = schemas.AnyTypeSchema
                        last_seen_at = schemas.AnyTypeSchema
                        created_at = schemas.StrSchema
                        ignored = schemas.BoolSchema
                        muted = schemas.BoolSchema
                        can_ignore_user = schemas.BoolSchema
                        can_mute_user = schemas.BoolSchema
                        can_send_private_messages = schemas.BoolSchema
                        can_send_private_message_to_user = schemas.BoolSchema
                        trust_level = schemas.IntSchema
                        moderator = schemas.BoolSchema
                        admin = schemas.BoolSchema
                        badge_count = schemas.IntSchema
                        second_factor_backup_enabled = schemas.BoolSchema
                        
                        
                        class user_fields(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                required = {
                                    "1",
                                    "2",
                                }
                                
                                class properties:
                                    _1 = schemas.AnyTypeSchema
                                    _2 = schemas.AnyTypeSchema
                                    __annotations__ = {
                                        "1": _1,
                                        "2": _2,
                                    }
                            
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["1"]) -> MetaOapg.properties._1: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["2"]) -> MetaOapg.properties._2: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["1", "2", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["1"]) -> MetaOapg.properties._1: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["2"]) -> MetaOapg.properties._2: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["1", "2", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'user_fields':
                                return super().__new__(
                                    cls,
                                    *args,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class custom_fields(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    first_name = schemas.AnyTypeSchema
                                    __annotations__ = {
                                        "first_name": first_name,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["first_name"]) -> MetaOapg.properties.first_name: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["first_name", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["first_name"]) -> typing.Union[MetaOapg.properties.first_name, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["first_name", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                first_name: typing.Union[MetaOapg.properties.first_name, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'custom_fields':
                                return super().__new__(
                                    cls,
                                    *args,
                                    first_name=first_name,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        time_read = schemas.IntSchema
                        recent_time_read = schemas.IntSchema
                        primary_group_id = schemas.AnyTypeSchema
                        primary_group_name = schemas.AnyTypeSchema
                        flair_group_id = schemas.AnyTypeSchema
                        flair_name = schemas.AnyTypeSchema
                        flair_url = schemas.AnyTypeSchema
                        flair_bg_color = schemas.AnyTypeSchema
                        flair_color = schemas.AnyTypeSchema
                        featured_topic = schemas.AnyTypeSchema
                        staged = schemas.BoolSchema
                        can_edit = schemas.BoolSchema
                        can_edit_username = schemas.BoolSchema
                        can_edit_email = schemas.BoolSchema
                        can_edit_name = schemas.BoolSchema
                        uploaded_avatar_id = schemas.AnyTypeSchema
                        has_title_badges = schemas.BoolSchema
                        pending_count = schemas.IntSchema
                        pending_posts_count = schemas.IntSchema
                        profile_view_count = schemas.IntSchema
                        second_factor_enabled = schemas.BoolSchema
                        can_upload_profile_header = schemas.BoolSchema
                        can_upload_user_card_background = schemas.BoolSchema
                        post_count = schemas.IntSchema
                        can_be_deleted = schemas.BoolSchema
                        can_delete_all_posts = schemas.BoolSchema
                        locale = schemas.AnyTypeSchema
                        
                        
                        class muted_category_ids(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'muted_category_ids':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class regular_category_ids(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'regular_category_ids':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class watched_tags(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'watched_tags':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class watching_first_post_tags(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'watching_first_post_tags':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class tracked_tags(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'tracked_tags':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class muted_tags(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'muted_tags':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class tracked_category_ids(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'tracked_category_ids':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class watched_category_ids(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'watched_category_ids':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class watched_first_post_category_ids(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'watched_first_post_category_ids':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        system_avatar_upload_id = schemas.AnyTypeSchema
                        system_avatar_template = schemas.StrSchema
                        
                        
                        class muted_usernames(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'muted_usernames':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class ignored_usernames(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'ignored_usernames':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class allowed_pm_usernames(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'allowed_pm_usernames':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        mailing_list_posts_per_day = schemas.IntSchema
                        can_change_bio = schemas.BoolSchema
                        can_change_location = schemas.BoolSchema
                        can_change_website = schemas.BoolSchema
                        can_change_tracking_preferences = schemas.BoolSchema
                        user_api_keys = schemas.AnyTypeSchema
                        
                        
                        class user_passkeys(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'user_passkeys':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class sidebar_tags(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'sidebar_tags':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class sidebar_category_ids(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'sidebar_category_ids':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        display_sidebar_tags = schemas.BoolSchema
                        
                        
                        class user_auth_tokens(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        required = {
                                            "is_active",
                                            "os",
                                            "browser",
                                            "icon",
                                            "created_at",
                                            "client_ip",
                                            "location",
                                            "id",
                                            "device",
                                            "seen_at",
                                        }
                                        
                                        class properties:
                                            id = schemas.IntSchema
                                            client_ip = schemas.StrSchema
                                            location = schemas.StrSchema
                                            browser = schemas.StrSchema
                                            device = schemas.StrSchema
                                            os = schemas.StrSchema
                                            icon = schemas.StrSchema
                                            created_at = schemas.StrSchema
                                            seen_at = schemas.StrSchema
                                            is_active = schemas.BoolSchema
                                            __annotations__ = {
                                                "id": id,
                                                "client_ip": client_ip,
                                                "location": location,
                                                "browser": browser,
                                                "device": device,
                                                "os": os,
                                                "icon": icon,
                                                "created_at": created_at,
                                                "seen_at": seen_at,
                                                "is_active": is_active,
                                            }
                                    
                                    is_active: MetaOapg.properties.is_active
                                    os: MetaOapg.properties.os
                                    browser: MetaOapg.properties.browser
                                    icon: MetaOapg.properties.icon
                                    created_at: MetaOapg.properties.created_at
                                    client_ip: MetaOapg.properties.client_ip
                                    location: MetaOapg.properties.location
                                    id: MetaOapg.properties.id
                                    device: MetaOapg.properties.device
                                    seen_at: MetaOapg.properties.seen_at
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["client_ip"]) -> MetaOapg.properties.client_ip: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["location"]) -> MetaOapg.properties.location: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["browser"]) -> MetaOapg.properties.browser: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["device"]) -> MetaOapg.properties.device: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["os"]) -> MetaOapg.properties.os: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["icon"]) -> MetaOapg.properties.icon: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["seen_at"]) -> MetaOapg.properties.seen_at: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["is_active"]) -> MetaOapg.properties.is_active: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "client_ip", "location", "browser", "device", "os", "icon", "created_at", "seen_at", "is_active", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["client_ip"]) -> MetaOapg.properties.client_ip: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> MetaOapg.properties.location: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["browser"]) -> MetaOapg.properties.browser: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["device"]) -> MetaOapg.properties.device: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["os"]) -> MetaOapg.properties.os: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["icon"]) -> MetaOapg.properties.icon: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["seen_at"]) -> MetaOapg.properties.seen_at: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["is_active"]) -> MetaOapg.properties.is_active: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "client_ip", "location", "browser", "device", "os", "icon", "created_at", "seen_at", "is_active", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        is_active: typing.Union[MetaOapg.properties.is_active, bool, ],
                                        os: typing.Union[MetaOapg.properties.os, str, ],
                                        browser: typing.Union[MetaOapg.properties.browser, str, ],
                                        icon: typing.Union[MetaOapg.properties.icon, str, ],
                                        created_at: typing.Union[MetaOapg.properties.created_at, str, ],
                                        client_ip: typing.Union[MetaOapg.properties.client_ip, str, ],
                                        location: typing.Union[MetaOapg.properties.location, str, ],
                                        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
                                        device: typing.Union[MetaOapg.properties.device, str, ],
                                        seen_at: typing.Union[MetaOapg.properties.seen_at, str, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            is_active=is_active,
                                            os=os,
                                            browser=browser,
                                            icon=icon,
                                            created_at=created_at,
                                            client_ip=client_ip,
                                            location=location,
                                            id=id,
                                            device=device,
                                            seen_at=seen_at,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'user_auth_tokens':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class user_notification_schedule(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                required = {
                                    "day_0_end_time",
                                    "day_5_start_time",
                                    "day_0_start_time",
                                    "day_2_start_time",
                                    "day_6_end_time",
                                    "day_1_end_time",
                                    "enabled",
                                    "day_5_end_time",
                                    "day_6_start_time",
                                    "day_2_end_time",
                                    "day_3_start_time",
                                    "day_1_start_time",
                                    "day_4_end_time",
                                    "day_4_start_time",
                                    "day_3_end_time",
                                }
                                
                                class properties:
                                    enabled = schemas.BoolSchema
                                    day_0_start_time = schemas.IntSchema
                                    day_0_end_time = schemas.IntSchema
                                    day_1_start_time = schemas.IntSchema
                                    day_1_end_time = schemas.IntSchema
                                    day_2_start_time = schemas.IntSchema
                                    day_2_end_time = schemas.IntSchema
                                    day_3_start_time = schemas.IntSchema
                                    day_3_end_time = schemas.IntSchema
                                    day_4_start_time = schemas.IntSchema
                                    day_4_end_time = schemas.IntSchema
                                    day_5_start_time = schemas.IntSchema
                                    day_5_end_time = schemas.IntSchema
                                    day_6_start_time = schemas.IntSchema
                                    day_6_end_time = schemas.IntSchema
                                    __annotations__ = {
                                        "enabled": enabled,
                                        "day_0_start_time": day_0_start_time,
                                        "day_0_end_time": day_0_end_time,
                                        "day_1_start_time": day_1_start_time,
                                        "day_1_end_time": day_1_end_time,
                                        "day_2_start_time": day_2_start_time,
                                        "day_2_end_time": day_2_end_time,
                                        "day_3_start_time": day_3_start_time,
                                        "day_3_end_time": day_3_end_time,
                                        "day_4_start_time": day_4_start_time,
                                        "day_4_end_time": day_4_end_time,
                                        "day_5_start_time": day_5_start_time,
                                        "day_5_end_time": day_5_end_time,
                                        "day_6_start_time": day_6_start_time,
                                        "day_6_end_time": day_6_end_time,
                                    }
                            
                            day_0_end_time: MetaOapg.properties.day_0_end_time
                            day_5_start_time: MetaOapg.properties.day_5_start_time
                            day_0_start_time: MetaOapg.properties.day_0_start_time
                            day_2_start_time: MetaOapg.properties.day_2_start_time
                            day_6_end_time: MetaOapg.properties.day_6_end_time
                            day_1_end_time: MetaOapg.properties.day_1_end_time
                            enabled: MetaOapg.properties.enabled
                            day_5_end_time: MetaOapg.properties.day_5_end_time
                            day_6_start_time: MetaOapg.properties.day_6_start_time
                            day_2_end_time: MetaOapg.properties.day_2_end_time
                            day_3_start_time: MetaOapg.properties.day_3_start_time
                            day_1_start_time: MetaOapg.properties.day_1_start_time
                            day_4_end_time: MetaOapg.properties.day_4_end_time
                            day_4_start_time: MetaOapg.properties.day_4_start_time
                            day_3_end_time: MetaOapg.properties.day_3_end_time
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["enabled"]) -> MetaOapg.properties.enabled: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["day_0_start_time"]) -> MetaOapg.properties.day_0_start_time: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["day_0_end_time"]) -> MetaOapg.properties.day_0_end_time: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["day_1_start_time"]) -> MetaOapg.properties.day_1_start_time: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["day_1_end_time"]) -> MetaOapg.properties.day_1_end_time: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["day_2_start_time"]) -> MetaOapg.properties.day_2_start_time: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["day_2_end_time"]) -> MetaOapg.properties.day_2_end_time: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["day_3_start_time"]) -> MetaOapg.properties.day_3_start_time: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["day_3_end_time"]) -> MetaOapg.properties.day_3_end_time: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["day_4_start_time"]) -> MetaOapg.properties.day_4_start_time: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["day_4_end_time"]) -> MetaOapg.properties.day_4_end_time: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["day_5_start_time"]) -> MetaOapg.properties.day_5_start_time: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["day_5_end_time"]) -> MetaOapg.properties.day_5_end_time: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["day_6_start_time"]) -> MetaOapg.properties.day_6_start_time: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["day_6_end_time"]) -> MetaOapg.properties.day_6_end_time: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["enabled", "day_0_start_time", "day_0_end_time", "day_1_start_time", "day_1_end_time", "day_2_start_time", "day_2_end_time", "day_3_start_time", "day_3_end_time", "day_4_start_time", "day_4_end_time", "day_5_start_time", "day_5_end_time", "day_6_start_time", "day_6_end_time", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["enabled"]) -> MetaOapg.properties.enabled: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["day_0_start_time"]) -> MetaOapg.properties.day_0_start_time: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["day_0_end_time"]) -> MetaOapg.properties.day_0_end_time: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["day_1_start_time"]) -> MetaOapg.properties.day_1_start_time: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["day_1_end_time"]) -> MetaOapg.properties.day_1_end_time: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["day_2_start_time"]) -> MetaOapg.properties.day_2_start_time: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["day_2_end_time"]) -> MetaOapg.properties.day_2_end_time: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["day_3_start_time"]) -> MetaOapg.properties.day_3_start_time: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["day_3_end_time"]) -> MetaOapg.properties.day_3_end_time: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["day_4_start_time"]) -> MetaOapg.properties.day_4_start_time: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["day_4_end_time"]) -> MetaOapg.properties.day_4_end_time: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["day_5_start_time"]) -> MetaOapg.properties.day_5_start_time: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["day_5_end_time"]) -> MetaOapg.properties.day_5_end_time: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["day_6_start_time"]) -> MetaOapg.properties.day_6_start_time: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["day_6_end_time"]) -> MetaOapg.properties.day_6_end_time: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["enabled", "day_0_start_time", "day_0_end_time", "day_1_start_time", "day_1_end_time", "day_2_start_time", "day_2_end_time", "day_3_start_time", "day_3_end_time", "day_4_start_time", "day_4_end_time", "day_5_start_time", "day_5_end_time", "day_6_start_time", "day_6_end_time", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                day_0_end_time: typing.Union[MetaOapg.properties.day_0_end_time, decimal.Decimal, int, ],
                                day_5_start_time: typing.Union[MetaOapg.properties.day_5_start_time, decimal.Decimal, int, ],
                                day_0_start_time: typing.Union[MetaOapg.properties.day_0_start_time, decimal.Decimal, int, ],
                                day_2_start_time: typing.Union[MetaOapg.properties.day_2_start_time, decimal.Decimal, int, ],
                                day_6_end_time: typing.Union[MetaOapg.properties.day_6_end_time, decimal.Decimal, int, ],
                                day_1_end_time: typing.Union[MetaOapg.properties.day_1_end_time, decimal.Decimal, int, ],
                                enabled: typing.Union[MetaOapg.properties.enabled, bool, ],
                                day_5_end_time: typing.Union[MetaOapg.properties.day_5_end_time, decimal.Decimal, int, ],
                                day_6_start_time: typing.Union[MetaOapg.properties.day_6_start_time, decimal.Decimal, int, ],
                                day_2_end_time: typing.Union[MetaOapg.properties.day_2_end_time, decimal.Decimal, int, ],
                                day_3_start_time: typing.Union[MetaOapg.properties.day_3_start_time, decimal.Decimal, int, ],
                                day_1_start_time: typing.Union[MetaOapg.properties.day_1_start_time, decimal.Decimal, int, ],
                                day_4_end_time: typing.Union[MetaOapg.properties.day_4_end_time, decimal.Decimal, int, ],
                                day_4_start_time: typing.Union[MetaOapg.properties.day_4_start_time, decimal.Decimal, int, ],
                                day_3_end_time: typing.Union[MetaOapg.properties.day_3_end_time, decimal.Decimal, int, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'user_notification_schedule':
                                return super().__new__(
                                    cls,
                                    *args,
                                    day_0_end_time=day_0_end_time,
                                    day_5_start_time=day_5_start_time,
                                    day_0_start_time=day_0_start_time,
                                    day_2_start_time=day_2_start_time,
                                    day_6_end_time=day_6_end_time,
                                    day_1_end_time=day_1_end_time,
                                    enabled=enabled,
                                    day_5_end_time=day_5_end_time,
                                    day_6_start_time=day_6_start_time,
                                    day_2_end_time=day_2_end_time,
                                    day_3_start_time=day_3_start_time,
                                    day_1_start_time=day_1_start_time,
                                    day_4_end_time=day_4_end_time,
                                    day_4_start_time=day_4_start_time,
                                    day_3_end_time=day_3_end_time,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        use_logo_small_as_avatar = schemas.BoolSchema
                        
                        
                        class featured_user_badge_ids(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'featured_user_badge_ids':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        invited_by = schemas.AnyTypeSchema
                        
                        
                        class groups(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        required = {
                                            "mentionable_level",
                                            "public_admission",
                                            "flair_color",
                                            "primary_group",
                                            "title",
                                            "can_see_members",
                                            "publish_read_state",
                                            "visibility_level",
                                            "id",
                                            "allow_membership_requests",
                                            "messageable_level",
                                            "grant_trust_level",
                                            "automatic",
                                            "bio_raw",
                                            "flair_url",
                                            "display_name",
                                            "public_exit",
                                            "members_visibility_level",
                                            "bio_excerpt",
                                            "flair_bg_color",
                                            "default_notification_level",
                                            "full_name",
                                            "user_count",
                                            "membership_request_template",
                                            "name",
                                            "incoming_email",
                                            "has_messages",
                                            "can_admin_group",
                                            "bio_cooked",
                                        }
                                        
                                        class properties:
                                            title = schemas.AnyTypeSchema
                                            id = schemas.IntSchema
                                            automatic = schemas.BoolSchema
                                            name = schemas.StrSchema
                                            display_name = schemas.StrSchema
                                            user_count = schemas.IntSchema
                                            mentionable_level = schemas.IntSchema
                                            messageable_level = schemas.IntSchema
                                            visibility_level = schemas.IntSchema
                                            primary_group = schemas.BoolSchema
                                            grant_trust_level = schemas.AnyTypeSchema
                                            incoming_email = schemas.AnyTypeSchema
                                            has_messages = schemas.BoolSchema
                                            flair_url = schemas.AnyTypeSchema
                                            flair_bg_color = schemas.AnyTypeSchema
                                            flair_color = schemas.AnyTypeSchema
                                            bio_raw = schemas.AnyTypeSchema
                                            bio_cooked = schemas.AnyTypeSchema
                                            bio_excerpt = schemas.AnyTypeSchema
                                            public_admission = schemas.BoolSchema
                                            public_exit = schemas.BoolSchema
                                            allow_membership_requests = schemas.BoolSchema
                                            full_name = schemas.AnyTypeSchema
                                            default_notification_level = schemas.IntSchema
                                            membership_request_template = schemas.AnyTypeSchema
                                            members_visibility_level = schemas.IntSchema
                                            can_see_members = schemas.BoolSchema
                                            can_admin_group = schemas.BoolSchema
                                            publish_read_state = schemas.BoolSchema
                                            __annotations__ = {
                                                "title": title,
                                                "id": id,
                                                "automatic": automatic,
                                                "name": name,
                                                "display_name": display_name,
                                                "user_count": user_count,
                                                "mentionable_level": mentionable_level,
                                                "messageable_level": messageable_level,
                                                "visibility_level": visibility_level,
                                                "primary_group": primary_group,
                                                "grant_trust_level": grant_trust_level,
                                                "incoming_email": incoming_email,
                                                "has_messages": has_messages,
                                                "flair_url": flair_url,
                                                "flair_bg_color": flair_bg_color,
                                                "flair_color": flair_color,
                                                "bio_raw": bio_raw,
                                                "bio_cooked": bio_cooked,
                                                "bio_excerpt": bio_excerpt,
                                                "public_admission": public_admission,
                                                "public_exit": public_exit,
                                                "allow_membership_requests": allow_membership_requests,
                                                "full_name": full_name,
                                                "default_notification_level": default_notification_level,
                                                "membership_request_template": membership_request_template,
                                                "members_visibility_level": members_visibility_level,
                                                "can_see_members": can_see_members,
                                                "can_admin_group": can_admin_group,
                                                "publish_read_state": publish_read_state,
                                            }
                                    
                                    mentionable_level: MetaOapg.properties.mentionable_level
                                    public_admission: MetaOapg.properties.public_admission
                                    flair_color: MetaOapg.properties.flair_color
                                    primary_group: MetaOapg.properties.primary_group
                                    title: MetaOapg.properties.title
                                    can_see_members: MetaOapg.properties.can_see_members
                                    publish_read_state: MetaOapg.properties.publish_read_state
                                    visibility_level: MetaOapg.properties.visibility_level
                                    id: MetaOapg.properties.id
                                    allow_membership_requests: MetaOapg.properties.allow_membership_requests
                                    messageable_level: MetaOapg.properties.messageable_level
                                    grant_trust_level: MetaOapg.properties.grant_trust_level
                                    automatic: MetaOapg.properties.automatic
                                    bio_raw: MetaOapg.properties.bio_raw
                                    flair_url: MetaOapg.properties.flair_url
                                    display_name: MetaOapg.properties.display_name
                                    public_exit: MetaOapg.properties.public_exit
                                    members_visibility_level: MetaOapg.properties.members_visibility_level
                                    bio_excerpt: MetaOapg.properties.bio_excerpt
                                    flair_bg_color: MetaOapg.properties.flair_bg_color
                                    default_notification_level: MetaOapg.properties.default_notification_level
                                    full_name: MetaOapg.properties.full_name
                                    user_count: MetaOapg.properties.user_count
                                    membership_request_template: MetaOapg.properties.membership_request_template
                                    name: MetaOapg.properties.name
                                    incoming_email: MetaOapg.properties.incoming_email
                                    has_messages: MetaOapg.properties.has_messages
                                    can_admin_group: MetaOapg.properties.can_admin_group
                                    bio_cooked: MetaOapg.properties.bio_cooked
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["automatic"]) -> MetaOapg.properties.automatic: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["display_name"]) -> MetaOapg.properties.display_name: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["user_count"]) -> MetaOapg.properties.user_count: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["mentionable_level"]) -> MetaOapg.properties.mentionable_level: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["messageable_level"]) -> MetaOapg.properties.messageable_level: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["visibility_level"]) -> MetaOapg.properties.visibility_level: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["primary_group"]) -> MetaOapg.properties.primary_group: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["grant_trust_level"]) -> MetaOapg.properties.grant_trust_level: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["incoming_email"]) -> MetaOapg.properties.incoming_email: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["has_messages"]) -> MetaOapg.properties.has_messages: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["flair_url"]) -> MetaOapg.properties.flair_url: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["flair_bg_color"]) -> MetaOapg.properties.flair_bg_color: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["flair_color"]) -> MetaOapg.properties.flair_color: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["bio_raw"]) -> MetaOapg.properties.bio_raw: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["bio_cooked"]) -> MetaOapg.properties.bio_cooked: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["bio_excerpt"]) -> MetaOapg.properties.bio_excerpt: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["public_admission"]) -> MetaOapg.properties.public_admission: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["public_exit"]) -> MetaOapg.properties.public_exit: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["allow_membership_requests"]) -> MetaOapg.properties.allow_membership_requests: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["full_name"]) -> MetaOapg.properties.full_name: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["default_notification_level"]) -> MetaOapg.properties.default_notification_level: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["membership_request_template"]) -> MetaOapg.properties.membership_request_template: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["members_visibility_level"]) -> MetaOapg.properties.members_visibility_level: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["can_see_members"]) -> MetaOapg.properties.can_see_members: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["can_admin_group"]) -> MetaOapg.properties.can_admin_group: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["publish_read_state"]) -> MetaOapg.properties.publish_read_state: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "id", "automatic", "name", "display_name", "user_count", "mentionable_level", "messageable_level", "visibility_level", "primary_group", "grant_trust_level", "incoming_email", "has_messages", "flair_url", "flair_bg_color", "flair_color", "bio_raw", "bio_cooked", "bio_excerpt", "public_admission", "public_exit", "allow_membership_requests", "full_name", "default_notification_level", "membership_request_template", "members_visibility_level", "can_see_members", "can_admin_group", "publish_read_state", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["automatic"]) -> MetaOapg.properties.automatic: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["display_name"]) -> MetaOapg.properties.display_name: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["user_count"]) -> MetaOapg.properties.user_count: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["mentionable_level"]) -> MetaOapg.properties.mentionable_level: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["messageable_level"]) -> MetaOapg.properties.messageable_level: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["visibility_level"]) -> MetaOapg.properties.visibility_level: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["primary_group"]) -> MetaOapg.properties.primary_group: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["grant_trust_level"]) -> MetaOapg.properties.grant_trust_level: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["incoming_email"]) -> MetaOapg.properties.incoming_email: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["has_messages"]) -> MetaOapg.properties.has_messages: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["flair_url"]) -> MetaOapg.properties.flair_url: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["flair_bg_color"]) -> MetaOapg.properties.flair_bg_color: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["flair_color"]) -> MetaOapg.properties.flair_color: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["bio_raw"]) -> MetaOapg.properties.bio_raw: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["bio_cooked"]) -> MetaOapg.properties.bio_cooked: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["bio_excerpt"]) -> MetaOapg.properties.bio_excerpt: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["public_admission"]) -> MetaOapg.properties.public_admission: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["public_exit"]) -> MetaOapg.properties.public_exit: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["allow_membership_requests"]) -> MetaOapg.properties.allow_membership_requests: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["full_name"]) -> MetaOapg.properties.full_name: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["default_notification_level"]) -> MetaOapg.properties.default_notification_level: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["membership_request_template"]) -> MetaOapg.properties.membership_request_template: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["members_visibility_level"]) -> MetaOapg.properties.members_visibility_level: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["can_see_members"]) -> MetaOapg.properties.can_see_members: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["can_admin_group"]) -> MetaOapg.properties.can_admin_group: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["publish_read_state"]) -> MetaOapg.properties.publish_read_state: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "id", "automatic", "name", "display_name", "user_count", "mentionable_level", "messageable_level", "visibility_level", "primary_group", "grant_trust_level", "incoming_email", "has_messages", "flair_url", "flair_bg_color", "flair_color", "bio_raw", "bio_cooked", "bio_excerpt", "public_admission", "public_exit", "allow_membership_requests", "full_name", "default_notification_level", "membership_request_template", "members_visibility_level", "can_see_members", "can_admin_group", "publish_read_state", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        mentionable_level: typing.Union[MetaOapg.properties.mentionable_level, decimal.Decimal, int, ],
                                        public_admission: typing.Union[MetaOapg.properties.public_admission, bool, ],
                                        flair_color: typing.Union[MetaOapg.properties.flair_color, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        primary_group: typing.Union[MetaOapg.properties.primary_group, bool, ],
                                        title: typing.Union[MetaOapg.properties.title, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        can_see_members: typing.Union[MetaOapg.properties.can_see_members, bool, ],
                                        publish_read_state: typing.Union[MetaOapg.properties.publish_read_state, bool, ],
                                        visibility_level: typing.Union[MetaOapg.properties.visibility_level, decimal.Decimal, int, ],
                                        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
                                        allow_membership_requests: typing.Union[MetaOapg.properties.allow_membership_requests, bool, ],
                                        messageable_level: typing.Union[MetaOapg.properties.messageable_level, decimal.Decimal, int, ],
                                        grant_trust_level: typing.Union[MetaOapg.properties.grant_trust_level, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        automatic: typing.Union[MetaOapg.properties.automatic, bool, ],
                                        bio_raw: typing.Union[MetaOapg.properties.bio_raw, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        flair_url: typing.Union[MetaOapg.properties.flair_url, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        display_name: typing.Union[MetaOapg.properties.display_name, str, ],
                                        public_exit: typing.Union[MetaOapg.properties.public_exit, bool, ],
                                        members_visibility_level: typing.Union[MetaOapg.properties.members_visibility_level, decimal.Decimal, int, ],
                                        bio_excerpt: typing.Union[MetaOapg.properties.bio_excerpt, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        flair_bg_color: typing.Union[MetaOapg.properties.flair_bg_color, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        default_notification_level: typing.Union[MetaOapg.properties.default_notification_level, decimal.Decimal, int, ],
                                        full_name: typing.Union[MetaOapg.properties.full_name, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        user_count: typing.Union[MetaOapg.properties.user_count, decimal.Decimal, int, ],
                                        membership_request_template: typing.Union[MetaOapg.properties.membership_request_template, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        name: typing.Union[MetaOapg.properties.name, str, ],
                                        incoming_email: typing.Union[MetaOapg.properties.incoming_email, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        has_messages: typing.Union[MetaOapg.properties.has_messages, bool, ],
                                        can_admin_group: typing.Union[MetaOapg.properties.can_admin_group, bool, ],
                                        bio_cooked: typing.Union[MetaOapg.properties.bio_cooked, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            mentionable_level=mentionable_level,
                                            public_admission=public_admission,
                                            flair_color=flair_color,
                                            primary_group=primary_group,
                                            title=title,
                                            can_see_members=can_see_members,
                                            publish_read_state=publish_read_state,
                                            visibility_level=visibility_level,
                                            id=id,
                                            allow_membership_requests=allow_membership_requests,
                                            messageable_level=messageable_level,
                                            grant_trust_level=grant_trust_level,
                                            automatic=automatic,
                                            bio_raw=bio_raw,
                                            flair_url=flair_url,
                                            display_name=display_name,
                                            public_exit=public_exit,
                                            members_visibility_level=members_visibility_level,
                                            bio_excerpt=bio_excerpt,
                                            flair_bg_color=flair_bg_color,
                                            default_notification_level=default_notification_level,
                                            full_name=full_name,
                                            user_count=user_count,
                                            membership_request_template=membership_request_template,
                                            name=name,
                                            incoming_email=incoming_email,
                                            has_messages=has_messages,
                                            can_admin_group=can_admin_group,
                                            bio_cooked=bio_cooked,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'groups':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class group_users(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                
                                class items(
                                    schemas.DictSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        required = {
                                            "group_id",
                                            "user_id",
                                            "notification_level",
                                        }
                                        
                                        class properties:
                                            group_id = schemas.IntSchema
                                            user_id = schemas.IntSchema
                                            notification_level = schemas.IntSchema
                                            owner = schemas.BoolSchema
                                            __annotations__ = {
                                                "group_id": group_id,
                                                "user_id": user_id,
                                                "notification_level": notification_level,
                                                "owner": owner,
                                            }
                                    
                                    group_id: MetaOapg.properties.group_id
                                    user_id: MetaOapg.properties.user_id
                                    notification_level: MetaOapg.properties.notification_level
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["group_id"]) -> MetaOapg.properties.group_id: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["notification_level"]) -> MetaOapg.properties.notification_level: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> MetaOapg.properties.owner: ...
                                    
                                    @typing.overload
                                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                    
                                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["group_id", "user_id", "notification_level", "owner", ], str]):
                                        # dict_instance[name] accessor
                                        return super().__getitem__(name)
                                    
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["group_id"]) -> MetaOapg.properties.group_id: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["notification_level"]) -> MetaOapg.properties.notification_level: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> typing.Union[MetaOapg.properties.owner, schemas.Unset]: ...
                                    
                                    @typing.overload
                                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                    
                                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["group_id", "user_id", "notification_level", "owner", ], str]):
                                        return super().get_item_oapg(name)
                                    
                                
                                    def __new__(
                                        cls,
                                        *args: typing.Union[dict, frozendict.frozendict, ],
                                        group_id: typing.Union[MetaOapg.properties.group_id, decimal.Decimal, int, ],
                                        user_id: typing.Union[MetaOapg.properties.user_id, decimal.Decimal, int, ],
                                        notification_level: typing.Union[MetaOapg.properties.notification_level, decimal.Decimal, int, ],
                                        owner: typing.Union[MetaOapg.properties.owner, bool, schemas.Unset] = schemas.unset,
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'items':
                                        return super().__new__(
                                            cls,
                                            *args,
                                            group_id=group_id,
                                            user_id=user_id,
                                            notification_level=notification_level,
                                            owner=owner,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'group_users':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class user_option(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                required = {
                                    "email_messages_level",
                                    "title_count_mode",
                                    "timezone",
                                    "email_level",
                                    "dynamic_favicon",
                                    "theme_key_seq",
                                    "theme_ids",
                                    "topics_unread_when_closed",
                                    "email_digests",
                                    "hide_profile_and_presence",
                                    "color_scheme_id",
                                    "skip_new_user_tips",
                                    "homepage_id",
                                    "digest_after_minutes",
                                    "auto_track_topics_after_msecs",
                                    "new_topic_duration_minutes",
                                    "allow_private_messages",
                                    "notification_level_when_replying",
                                    "text_size_seq",
                                    "enable_allowed_pm_users",
                                    "like_notification_frequency",
                                    "dark_scheme_id",
                                    "automatically_unpin_topics",
                                    "enable_quoting",
                                    "email_in_reply_to",
                                    "enable_defer",
                                    "text_size",
                                    "mailing_list_mode_frequency",
                                    "user_id",
                                    "mailing_list_mode",
                                    "include_tl0_in_digests",
                                    "email_previous_replies",
                                    "external_links_in_new_tab",
                                }
                                
                                class properties:
                                    user_id = schemas.IntSchema
                                    mailing_list_mode = schemas.BoolSchema
                                    mailing_list_mode_frequency = schemas.IntSchema
                                    email_digests = schemas.BoolSchema
                                    email_level = schemas.IntSchema
                                    email_messages_level = schemas.IntSchema
                                    external_links_in_new_tab = schemas.BoolSchema
                                    bookmark_auto_delete_preference = schemas.IntSchema
                                    color_scheme_id = schemas.AnyTypeSchema
                                    dark_scheme_id = schemas.AnyTypeSchema
                                    dynamic_favicon = schemas.BoolSchema
                                    enable_quoting = schemas.BoolSchema
                                    enable_defer = schemas.BoolSchema
                                    digest_after_minutes = schemas.IntSchema
                                    automatically_unpin_topics = schemas.BoolSchema
                                    auto_track_topics_after_msecs = schemas.IntSchema
                                    notification_level_when_replying = schemas.IntSchema
                                    new_topic_duration_minutes = schemas.IntSchema
                                    email_previous_replies = schemas.IntSchema
                                    email_in_reply_to = schemas.BoolSchema
                                    like_notification_frequency = schemas.IntSchema
                                    include_tl0_in_digests = schemas.BoolSchema
                                    
                                    
                                    class theme_ids(
                                        schemas.ListSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            items = schemas.AnyTypeSchema
                                    
                                        def __new__(
                                            cls,
                                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'theme_ids':
                                            return super().__new__(
                                                cls,
                                                arg,
                                                _configuration=_configuration,
                                            )
                                    
                                        def __getitem__(self, i: int) -> MetaOapg.items:
                                            return super().__getitem__(i)
                                    theme_key_seq = schemas.IntSchema
                                    allow_private_messages = schemas.BoolSchema
                                    enable_allowed_pm_users = schemas.BoolSchema
                                    homepage_id = schemas.AnyTypeSchema
                                    hide_profile_and_presence = schemas.BoolSchema
                                    text_size = schemas.StrSchema
                                    text_size_seq = schemas.IntSchema
                                    title_count_mode = schemas.StrSchema
                                    timezone = schemas.AnyTypeSchema
                                    skip_new_user_tips = schemas.BoolSchema
                                    default_calendar = schemas.StrSchema
                                    oldest_search_log_date = schemas.AnyTypeSchema
                                    sidebar_link_to_filtered_list = schemas.BoolSchema
                                    sidebar_show_count_of_new_items = schemas.BoolSchema
                                    watched_precedence_over_muted = schemas.AnyTypeSchema
                                    seen_popups = schemas.AnyTypeSchema
                                    topics_unread_when_closed = schemas.BoolSchema
                                    __annotations__ = {
                                        "user_id": user_id,
                                        "mailing_list_mode": mailing_list_mode,
                                        "mailing_list_mode_frequency": mailing_list_mode_frequency,
                                        "email_digests": email_digests,
                                        "email_level": email_level,
                                        "email_messages_level": email_messages_level,
                                        "external_links_in_new_tab": external_links_in_new_tab,
                                        "bookmark_auto_delete_preference": bookmark_auto_delete_preference,
                                        "color_scheme_id": color_scheme_id,
                                        "dark_scheme_id": dark_scheme_id,
                                        "dynamic_favicon": dynamic_favicon,
                                        "enable_quoting": enable_quoting,
                                        "enable_defer": enable_defer,
                                        "digest_after_minutes": digest_after_minutes,
                                        "automatically_unpin_topics": automatically_unpin_topics,
                                        "auto_track_topics_after_msecs": auto_track_topics_after_msecs,
                                        "notification_level_when_replying": notification_level_when_replying,
                                        "new_topic_duration_minutes": new_topic_duration_minutes,
                                        "email_previous_replies": email_previous_replies,
                                        "email_in_reply_to": email_in_reply_to,
                                        "like_notification_frequency": like_notification_frequency,
                                        "include_tl0_in_digests": include_tl0_in_digests,
                                        "theme_ids": theme_ids,
                                        "theme_key_seq": theme_key_seq,
                                        "allow_private_messages": allow_private_messages,
                                        "enable_allowed_pm_users": enable_allowed_pm_users,
                                        "homepage_id": homepage_id,
                                        "hide_profile_and_presence": hide_profile_and_presence,
                                        "text_size": text_size,
                                        "text_size_seq": text_size_seq,
                                        "title_count_mode": title_count_mode,
                                        "timezone": timezone,
                                        "skip_new_user_tips": skip_new_user_tips,
                                        "default_calendar": default_calendar,
                                        "oldest_search_log_date": oldest_search_log_date,
                                        "sidebar_link_to_filtered_list": sidebar_link_to_filtered_list,
                                        "sidebar_show_count_of_new_items": sidebar_show_count_of_new_items,
                                        "watched_precedence_over_muted": watched_precedence_over_muted,
                                        "seen_popups": seen_popups,
                                        "topics_unread_when_closed": topics_unread_when_closed,
                                    }
                            
                            email_messages_level: MetaOapg.properties.email_messages_level
                            title_count_mode: MetaOapg.properties.title_count_mode
                            timezone: MetaOapg.properties.timezone
                            email_level: MetaOapg.properties.email_level
                            dynamic_favicon: MetaOapg.properties.dynamic_favicon
                            theme_key_seq: MetaOapg.properties.theme_key_seq
                            theme_ids: MetaOapg.properties.theme_ids
                            topics_unread_when_closed: MetaOapg.properties.topics_unread_when_closed
                            email_digests: MetaOapg.properties.email_digests
                            hide_profile_and_presence: MetaOapg.properties.hide_profile_and_presence
                            color_scheme_id: MetaOapg.properties.color_scheme_id
                            skip_new_user_tips: MetaOapg.properties.skip_new_user_tips
                            homepage_id: MetaOapg.properties.homepage_id
                            digest_after_minutes: MetaOapg.properties.digest_after_minutes
                            auto_track_topics_after_msecs: MetaOapg.properties.auto_track_topics_after_msecs
                            new_topic_duration_minutes: MetaOapg.properties.new_topic_duration_minutes
                            allow_private_messages: MetaOapg.properties.allow_private_messages
                            notification_level_when_replying: MetaOapg.properties.notification_level_when_replying
                            text_size_seq: MetaOapg.properties.text_size_seq
                            enable_allowed_pm_users: MetaOapg.properties.enable_allowed_pm_users
                            like_notification_frequency: MetaOapg.properties.like_notification_frequency
                            dark_scheme_id: MetaOapg.properties.dark_scheme_id
                            automatically_unpin_topics: MetaOapg.properties.automatically_unpin_topics
                            enable_quoting: MetaOapg.properties.enable_quoting
                            email_in_reply_to: MetaOapg.properties.email_in_reply_to
                            enable_defer: MetaOapg.properties.enable_defer
                            text_size: MetaOapg.properties.text_size
                            mailing_list_mode_frequency: MetaOapg.properties.mailing_list_mode_frequency
                            user_id: MetaOapg.properties.user_id
                            mailing_list_mode: MetaOapg.properties.mailing_list_mode
                            include_tl0_in_digests: MetaOapg.properties.include_tl0_in_digests
                            email_previous_replies: MetaOapg.properties.email_previous_replies
                            external_links_in_new_tab: MetaOapg.properties.external_links_in_new_tab
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["mailing_list_mode"]) -> MetaOapg.properties.mailing_list_mode: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["mailing_list_mode_frequency"]) -> MetaOapg.properties.mailing_list_mode_frequency: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["email_digests"]) -> MetaOapg.properties.email_digests: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["email_level"]) -> MetaOapg.properties.email_level: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["email_messages_level"]) -> MetaOapg.properties.email_messages_level: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["external_links_in_new_tab"]) -> MetaOapg.properties.external_links_in_new_tab: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["bookmark_auto_delete_preference"]) -> MetaOapg.properties.bookmark_auto_delete_preference: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["color_scheme_id"]) -> MetaOapg.properties.color_scheme_id: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["dark_scheme_id"]) -> MetaOapg.properties.dark_scheme_id: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["dynamic_favicon"]) -> MetaOapg.properties.dynamic_favicon: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["enable_quoting"]) -> MetaOapg.properties.enable_quoting: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["enable_defer"]) -> MetaOapg.properties.enable_defer: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["digest_after_minutes"]) -> MetaOapg.properties.digest_after_minutes: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["automatically_unpin_topics"]) -> MetaOapg.properties.automatically_unpin_topics: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["auto_track_topics_after_msecs"]) -> MetaOapg.properties.auto_track_topics_after_msecs: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["notification_level_when_replying"]) -> MetaOapg.properties.notification_level_when_replying: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["new_topic_duration_minutes"]) -> MetaOapg.properties.new_topic_duration_minutes: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["email_previous_replies"]) -> MetaOapg.properties.email_previous_replies: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["email_in_reply_to"]) -> MetaOapg.properties.email_in_reply_to: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["like_notification_frequency"]) -> MetaOapg.properties.like_notification_frequency: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["include_tl0_in_digests"]) -> MetaOapg.properties.include_tl0_in_digests: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["theme_ids"]) -> MetaOapg.properties.theme_ids: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["theme_key_seq"]) -> MetaOapg.properties.theme_key_seq: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["allow_private_messages"]) -> MetaOapg.properties.allow_private_messages: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["enable_allowed_pm_users"]) -> MetaOapg.properties.enable_allowed_pm_users: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["homepage_id"]) -> MetaOapg.properties.homepage_id: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["hide_profile_and_presence"]) -> MetaOapg.properties.hide_profile_and_presence: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["text_size"]) -> MetaOapg.properties.text_size: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["text_size_seq"]) -> MetaOapg.properties.text_size_seq: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["title_count_mode"]) -> MetaOapg.properties.title_count_mode: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["skip_new_user_tips"]) -> MetaOapg.properties.skip_new_user_tips: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["default_calendar"]) -> MetaOapg.properties.default_calendar: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["oldest_search_log_date"]) -> MetaOapg.properties.oldest_search_log_date: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["sidebar_link_to_filtered_list"]) -> MetaOapg.properties.sidebar_link_to_filtered_list: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["sidebar_show_count_of_new_items"]) -> MetaOapg.properties.sidebar_show_count_of_new_items: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["watched_precedence_over_muted"]) -> MetaOapg.properties.watched_precedence_over_muted: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["seen_popups"]) -> MetaOapg.properties.seen_popups: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["topics_unread_when_closed"]) -> MetaOapg.properties.topics_unread_when_closed: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["user_id", "mailing_list_mode", "mailing_list_mode_frequency", "email_digests", "email_level", "email_messages_level", "external_links_in_new_tab", "bookmark_auto_delete_preference", "color_scheme_id", "dark_scheme_id", "dynamic_favicon", "enable_quoting", "enable_defer", "digest_after_minutes", "automatically_unpin_topics", "auto_track_topics_after_msecs", "notification_level_when_replying", "new_topic_duration_minutes", "email_previous_replies", "email_in_reply_to", "like_notification_frequency", "include_tl0_in_digests", "theme_ids", "theme_key_seq", "allow_private_messages", "enable_allowed_pm_users", "homepage_id", "hide_profile_and_presence", "text_size", "text_size_seq", "title_count_mode", "timezone", "skip_new_user_tips", "default_calendar", "oldest_search_log_date", "sidebar_link_to_filtered_list", "sidebar_show_count_of_new_items", "watched_precedence_over_muted", "seen_popups", "topics_unread_when_closed", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["mailing_list_mode"]) -> MetaOapg.properties.mailing_list_mode: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["mailing_list_mode_frequency"]) -> MetaOapg.properties.mailing_list_mode_frequency: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["email_digests"]) -> MetaOapg.properties.email_digests: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["email_level"]) -> MetaOapg.properties.email_level: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["email_messages_level"]) -> MetaOapg.properties.email_messages_level: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["external_links_in_new_tab"]) -> MetaOapg.properties.external_links_in_new_tab: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["bookmark_auto_delete_preference"]) -> typing.Union[MetaOapg.properties.bookmark_auto_delete_preference, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["color_scheme_id"]) -> MetaOapg.properties.color_scheme_id: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["dark_scheme_id"]) -> MetaOapg.properties.dark_scheme_id: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["dynamic_favicon"]) -> MetaOapg.properties.dynamic_favicon: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["enable_quoting"]) -> MetaOapg.properties.enable_quoting: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["enable_defer"]) -> MetaOapg.properties.enable_defer: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["digest_after_minutes"]) -> MetaOapg.properties.digest_after_minutes: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["automatically_unpin_topics"]) -> MetaOapg.properties.automatically_unpin_topics: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["auto_track_topics_after_msecs"]) -> MetaOapg.properties.auto_track_topics_after_msecs: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["notification_level_when_replying"]) -> MetaOapg.properties.notification_level_when_replying: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["new_topic_duration_minutes"]) -> MetaOapg.properties.new_topic_duration_minutes: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["email_previous_replies"]) -> MetaOapg.properties.email_previous_replies: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["email_in_reply_to"]) -> MetaOapg.properties.email_in_reply_to: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["like_notification_frequency"]) -> MetaOapg.properties.like_notification_frequency: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["include_tl0_in_digests"]) -> MetaOapg.properties.include_tl0_in_digests: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["theme_ids"]) -> MetaOapg.properties.theme_ids: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["theme_key_seq"]) -> MetaOapg.properties.theme_key_seq: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["allow_private_messages"]) -> MetaOapg.properties.allow_private_messages: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["enable_allowed_pm_users"]) -> MetaOapg.properties.enable_allowed_pm_users: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["homepage_id"]) -> MetaOapg.properties.homepage_id: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["hide_profile_and_presence"]) -> MetaOapg.properties.hide_profile_and_presence: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["text_size"]) -> MetaOapg.properties.text_size: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["text_size_seq"]) -> MetaOapg.properties.text_size_seq: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["title_count_mode"]) -> MetaOapg.properties.title_count_mode: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["skip_new_user_tips"]) -> MetaOapg.properties.skip_new_user_tips: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["default_calendar"]) -> typing.Union[MetaOapg.properties.default_calendar, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["oldest_search_log_date"]) -> typing.Union[MetaOapg.properties.oldest_search_log_date, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["sidebar_link_to_filtered_list"]) -> typing.Union[MetaOapg.properties.sidebar_link_to_filtered_list, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["sidebar_show_count_of_new_items"]) -> typing.Union[MetaOapg.properties.sidebar_show_count_of_new_items, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["watched_precedence_over_muted"]) -> typing.Union[MetaOapg.properties.watched_precedence_over_muted, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["seen_popups"]) -> typing.Union[MetaOapg.properties.seen_popups, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["topics_unread_when_closed"]) -> MetaOapg.properties.topics_unread_when_closed: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["user_id", "mailing_list_mode", "mailing_list_mode_frequency", "email_digests", "email_level", "email_messages_level", "external_links_in_new_tab", "bookmark_auto_delete_preference", "color_scheme_id", "dark_scheme_id", "dynamic_favicon", "enable_quoting", "enable_defer", "digest_after_minutes", "automatically_unpin_topics", "auto_track_topics_after_msecs", "notification_level_when_replying", "new_topic_duration_minutes", "email_previous_replies", "email_in_reply_to", "like_notification_frequency", "include_tl0_in_digests", "theme_ids", "theme_key_seq", "allow_private_messages", "enable_allowed_pm_users", "homepage_id", "hide_profile_and_presence", "text_size", "text_size_seq", "title_count_mode", "timezone", "skip_new_user_tips", "default_calendar", "oldest_search_log_date", "sidebar_link_to_filtered_list", "sidebar_show_count_of_new_items", "watched_precedence_over_muted", "seen_popups", "topics_unread_when_closed", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                email_messages_level: typing.Union[MetaOapg.properties.email_messages_level, decimal.Decimal, int, ],
                                title_count_mode: typing.Union[MetaOapg.properties.title_count_mode, str, ],
                                timezone: typing.Union[MetaOapg.properties.timezone, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                email_level: typing.Union[MetaOapg.properties.email_level, decimal.Decimal, int, ],
                                dynamic_favicon: typing.Union[MetaOapg.properties.dynamic_favicon, bool, ],
                                theme_key_seq: typing.Union[MetaOapg.properties.theme_key_seq, decimal.Decimal, int, ],
                                theme_ids: typing.Union[MetaOapg.properties.theme_ids, list, tuple, ],
                                topics_unread_when_closed: typing.Union[MetaOapg.properties.topics_unread_when_closed, bool, ],
                                email_digests: typing.Union[MetaOapg.properties.email_digests, bool, ],
                                hide_profile_and_presence: typing.Union[MetaOapg.properties.hide_profile_and_presence, bool, ],
                                color_scheme_id: typing.Union[MetaOapg.properties.color_scheme_id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                skip_new_user_tips: typing.Union[MetaOapg.properties.skip_new_user_tips, bool, ],
                                homepage_id: typing.Union[MetaOapg.properties.homepage_id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                digest_after_minutes: typing.Union[MetaOapg.properties.digest_after_minutes, decimal.Decimal, int, ],
                                auto_track_topics_after_msecs: typing.Union[MetaOapg.properties.auto_track_topics_after_msecs, decimal.Decimal, int, ],
                                new_topic_duration_minutes: typing.Union[MetaOapg.properties.new_topic_duration_minutes, decimal.Decimal, int, ],
                                allow_private_messages: typing.Union[MetaOapg.properties.allow_private_messages, bool, ],
                                notification_level_when_replying: typing.Union[MetaOapg.properties.notification_level_when_replying, decimal.Decimal, int, ],
                                text_size_seq: typing.Union[MetaOapg.properties.text_size_seq, decimal.Decimal, int, ],
                                enable_allowed_pm_users: typing.Union[MetaOapg.properties.enable_allowed_pm_users, bool, ],
                                like_notification_frequency: typing.Union[MetaOapg.properties.like_notification_frequency, decimal.Decimal, int, ],
                                dark_scheme_id: typing.Union[MetaOapg.properties.dark_scheme_id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                automatically_unpin_topics: typing.Union[MetaOapg.properties.automatically_unpin_topics, bool, ],
                                enable_quoting: typing.Union[MetaOapg.properties.enable_quoting, bool, ],
                                email_in_reply_to: typing.Union[MetaOapg.properties.email_in_reply_to, bool, ],
                                enable_defer: typing.Union[MetaOapg.properties.enable_defer, bool, ],
                                text_size: typing.Union[MetaOapg.properties.text_size, str, ],
                                mailing_list_mode_frequency: typing.Union[MetaOapg.properties.mailing_list_mode_frequency, decimal.Decimal, int, ],
                                user_id: typing.Union[MetaOapg.properties.user_id, decimal.Decimal, int, ],
                                mailing_list_mode: typing.Union[MetaOapg.properties.mailing_list_mode, bool, ],
                                include_tl0_in_digests: typing.Union[MetaOapg.properties.include_tl0_in_digests, bool, ],
                                email_previous_replies: typing.Union[MetaOapg.properties.email_previous_replies, decimal.Decimal, int, ],
                                external_links_in_new_tab: typing.Union[MetaOapg.properties.external_links_in_new_tab, bool, ],
                                bookmark_auto_delete_preference: typing.Union[MetaOapg.properties.bookmark_auto_delete_preference, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                default_calendar: typing.Union[MetaOapg.properties.default_calendar, str, schemas.Unset] = schemas.unset,
                                oldest_search_log_date: typing.Union[MetaOapg.properties.oldest_search_log_date, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                                sidebar_link_to_filtered_list: typing.Union[MetaOapg.properties.sidebar_link_to_filtered_list, bool, schemas.Unset] = schemas.unset,
                                sidebar_show_count_of_new_items: typing.Union[MetaOapg.properties.sidebar_show_count_of_new_items, bool, schemas.Unset] = schemas.unset,
                                watched_precedence_over_muted: typing.Union[MetaOapg.properties.watched_precedence_over_muted, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                                seen_popups: typing.Union[MetaOapg.properties.seen_popups, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'user_option':
                                return super().__new__(
                                    cls,
                                    *args,
                                    email_messages_level=email_messages_level,
                                    title_count_mode=title_count_mode,
                                    timezone=timezone,
                                    email_level=email_level,
                                    dynamic_favicon=dynamic_favicon,
                                    theme_key_seq=theme_key_seq,
                                    theme_ids=theme_ids,
                                    topics_unread_when_closed=topics_unread_when_closed,
                                    email_digests=email_digests,
                                    hide_profile_and_presence=hide_profile_and_presence,
                                    color_scheme_id=color_scheme_id,
                                    skip_new_user_tips=skip_new_user_tips,
                                    homepage_id=homepage_id,
                                    digest_after_minutes=digest_after_minutes,
                                    auto_track_topics_after_msecs=auto_track_topics_after_msecs,
                                    new_topic_duration_minutes=new_topic_duration_minutes,
                                    allow_private_messages=allow_private_messages,
                                    notification_level_when_replying=notification_level_when_replying,
                                    text_size_seq=text_size_seq,
                                    enable_allowed_pm_users=enable_allowed_pm_users,
                                    like_notification_frequency=like_notification_frequency,
                                    dark_scheme_id=dark_scheme_id,
                                    automatically_unpin_topics=automatically_unpin_topics,
                                    enable_quoting=enable_quoting,
                                    email_in_reply_to=email_in_reply_to,
                                    enable_defer=enable_defer,
                                    text_size=text_size,
                                    mailing_list_mode_frequency=mailing_list_mode_frequency,
                                    user_id=user_id,
                                    mailing_list_mode=mailing_list_mode,
                                    include_tl0_in_digests=include_tl0_in_digests,
                                    email_previous_replies=email_previous_replies,
                                    external_links_in_new_tab=external_links_in_new_tab,
                                    bookmark_auto_delete_preference=bookmark_auto_delete_preference,
                                    default_calendar=default_calendar,
                                    oldest_search_log_date=oldest_search_log_date,
                                    sidebar_link_to_filtered_list=sidebar_link_to_filtered_list,
                                    sidebar_show_count_of_new_items=sidebar_show_count_of_new_items,
                                    watched_precedence_over_muted=watched_precedence_over_muted,
                                    seen_popups=seen_popups,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "title": title,
                            "id": id,
                            "username": username,
                            "name": name,
                            "avatar_template": avatar_template,
                            "last_posted_at": last_posted_at,
                            "last_seen_at": last_seen_at,
                            "created_at": created_at,
                            "ignored": ignored,
                            "muted": muted,
                            "can_ignore_user": can_ignore_user,
                            "can_mute_user": can_mute_user,
                            "can_send_private_messages": can_send_private_messages,
                            "can_send_private_message_to_user": can_send_private_message_to_user,
                            "trust_level": trust_level,
                            "moderator": moderator,
                            "admin": admin,
                            "badge_count": badge_count,
                            "second_factor_backup_enabled": second_factor_backup_enabled,
                            "user_fields": user_fields,
                            "custom_fields": custom_fields,
                            "time_read": time_read,
                            "recent_time_read": recent_time_read,
                            "primary_group_id": primary_group_id,
                            "primary_group_name": primary_group_name,
                            "flair_group_id": flair_group_id,
                            "flair_name": flair_name,
                            "flair_url": flair_url,
                            "flair_bg_color": flair_bg_color,
                            "flair_color": flair_color,
                            "featured_topic": featured_topic,
                            "staged": staged,
                            "can_edit": can_edit,
                            "can_edit_username": can_edit_username,
                            "can_edit_email": can_edit_email,
                            "can_edit_name": can_edit_name,
                            "uploaded_avatar_id": uploaded_avatar_id,
                            "has_title_badges": has_title_badges,
                            "pending_count": pending_count,
                            "pending_posts_count": pending_posts_count,
                            "profile_view_count": profile_view_count,
                            "second_factor_enabled": second_factor_enabled,
                            "can_upload_profile_header": can_upload_profile_header,
                            "can_upload_user_card_background": can_upload_user_card_background,
                            "post_count": post_count,
                            "can_be_deleted": can_be_deleted,
                            "can_delete_all_posts": can_delete_all_posts,
                            "locale": locale,
                            "muted_category_ids": muted_category_ids,
                            "regular_category_ids": regular_category_ids,
                            "watched_tags": watched_tags,
                            "watching_first_post_tags": watching_first_post_tags,
                            "tracked_tags": tracked_tags,
                            "muted_tags": muted_tags,
                            "tracked_category_ids": tracked_category_ids,
                            "watched_category_ids": watched_category_ids,
                            "watched_first_post_category_ids": watched_first_post_category_ids,
                            "system_avatar_upload_id": system_avatar_upload_id,
                            "system_avatar_template": system_avatar_template,
                            "muted_usernames": muted_usernames,
                            "ignored_usernames": ignored_usernames,
                            "allowed_pm_usernames": allowed_pm_usernames,
                            "mailing_list_posts_per_day": mailing_list_posts_per_day,
                            "can_change_bio": can_change_bio,
                            "can_change_location": can_change_location,
                            "can_change_website": can_change_website,
                            "can_change_tracking_preferences": can_change_tracking_preferences,
                            "user_api_keys": user_api_keys,
                            "user_passkeys": user_passkeys,
                            "sidebar_tags": sidebar_tags,
                            "sidebar_category_ids": sidebar_category_ids,
                            "display_sidebar_tags": display_sidebar_tags,
                            "user_auth_tokens": user_auth_tokens,
                            "user_notification_schedule": user_notification_schedule,
                            "use_logo_small_as_avatar": use_logo_small_as_avatar,
                            "featured_user_badge_ids": featured_user_badge_ids,
                            "invited_by": invited_by,
                            "groups": groups,
                            "group_users": group_users,
                            "user_option": user_option,
                        }
                
                group_users: MetaOapg.properties.group_users
                recent_time_read: MetaOapg.properties.recent_time_read
                flair_color: MetaOapg.properties.flair_color
                moderator: MetaOapg.properties.moderator
                trust_level: MetaOapg.properties.trust_level
                tracked_category_ids: MetaOapg.properties.tracked_category_ids
                muted_tags: MetaOapg.properties.muted_tags
                can_send_private_messages: MetaOapg.properties.can_send_private_messages
                user_notification_schedule: MetaOapg.properties.user_notification_schedule
                id: MetaOapg.properties.id
                second_factor_enabled: MetaOapg.properties.second_factor_enabled
                can_delete_all_posts: MetaOapg.properties.can_delete_all_posts
                can_change_location: MetaOapg.properties.can_change_location
                uploaded_avatar_id: MetaOapg.properties.uploaded_avatar_id
                ignored: MetaOapg.properties.ignored
                regular_category_ids: MetaOapg.properties.regular_category_ids
                watching_first_post_tags: MetaOapg.properties.watching_first_post_tags
                can_send_private_message_to_user: MetaOapg.properties.can_send_private_message_to_user
                tracked_tags: MetaOapg.properties.tracked_tags
                custom_fields: MetaOapg.properties.custom_fields
                can_edit_email: MetaOapg.properties.can_edit_email
                can_mute_user: MetaOapg.properties.can_mute_user
                profile_view_count: MetaOapg.properties.profile_view_count
                can_change_tracking_preferences: MetaOapg.properties.can_change_tracking_preferences
                featured_user_badge_ids: MetaOapg.properties.featured_user_badge_ids
                can_edit_name: MetaOapg.properties.can_edit_name
                name: MetaOapg.properties.name
                system_avatar_upload_id: MetaOapg.properties.system_avatar_upload_id
                allowed_pm_usernames: MetaOapg.properties.allowed_pm_usernames
                post_count: MetaOapg.properties.post_count
                badge_count: MetaOapg.properties.badge_count
                primary_group_id: MetaOapg.properties.primary_group_id
                use_logo_small_as_avatar: MetaOapg.properties.use_logo_small_as_avatar
                user_api_keys: MetaOapg.properties.user_api_keys
                admin: MetaOapg.properties.admin
                created_at: MetaOapg.properties.created_at
                locale: MetaOapg.properties.locale
                title: MetaOapg.properties.title
                can_change_website: MetaOapg.properties.can_change_website
                muted_category_ids: MetaOapg.properties.muted_category_ids
                watched_tags: MetaOapg.properties.watched_tags
                muted_usernames: MetaOapg.properties.muted_usernames
                can_be_deleted: MetaOapg.properties.can_be_deleted
                can_change_bio: MetaOapg.properties.can_change_bio
                mailing_list_posts_per_day: MetaOapg.properties.mailing_list_posts_per_day
                system_avatar_template: MetaOapg.properties.system_avatar_template
                has_title_badges: MetaOapg.properties.has_title_badges
                featured_topic: MetaOapg.properties.featured_topic
                muted: MetaOapg.properties.muted
                avatar_template: MetaOapg.properties.avatar_template
                last_posted_at: MetaOapg.properties.last_posted_at
                can_upload_profile_header: MetaOapg.properties.can_upload_profile_header
                can_upload_user_card_background: MetaOapg.properties.can_upload_user_card_background
                time_read: MetaOapg.properties.time_read
                can_edit: MetaOapg.properties.can_edit
                groups: MetaOapg.properties.groups
                user_option: MetaOapg.properties.user_option
                flair_url: MetaOapg.properties.flair_url
                ignored_usernames: MetaOapg.properties.ignored_usernames
                invited_by: MetaOapg.properties.invited_by
                staged: MetaOapg.properties.staged
                watched_first_post_category_ids: MetaOapg.properties.watched_first_post_category_ids
                flair_bg_color: MetaOapg.properties.flair_bg_color
                pending_count: MetaOapg.properties.pending_count
                primary_group_name: MetaOapg.properties.primary_group_name
                can_edit_username: MetaOapg.properties.can_edit_username
                can_ignore_user: MetaOapg.properties.can_ignore_user
                user_auth_tokens: MetaOapg.properties.user_auth_tokens
                flair_group_id: MetaOapg.properties.flair_group_id
                last_seen_at: MetaOapg.properties.last_seen_at
                flair_name: MetaOapg.properties.flair_name
                username: MetaOapg.properties.username
                watched_category_ids: MetaOapg.properties.watched_category_ids
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["avatar_template"]) -> MetaOapg.properties.avatar_template: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["last_posted_at"]) -> MetaOapg.properties.last_posted_at: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["last_seen_at"]) -> MetaOapg.properties.last_seen_at: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["ignored"]) -> MetaOapg.properties.ignored: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["muted"]) -> MetaOapg.properties.muted: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_ignore_user"]) -> MetaOapg.properties.can_ignore_user: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_mute_user"]) -> MetaOapg.properties.can_mute_user: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_send_private_messages"]) -> MetaOapg.properties.can_send_private_messages: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_send_private_message_to_user"]) -> MetaOapg.properties.can_send_private_message_to_user: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["trust_level"]) -> MetaOapg.properties.trust_level: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["moderator"]) -> MetaOapg.properties.moderator: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["admin"]) -> MetaOapg.properties.admin: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["badge_count"]) -> MetaOapg.properties.badge_count: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["second_factor_backup_enabled"]) -> MetaOapg.properties.second_factor_backup_enabled: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["user_fields"]) -> MetaOapg.properties.user_fields: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["custom_fields"]) -> MetaOapg.properties.custom_fields: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["time_read"]) -> MetaOapg.properties.time_read: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["recent_time_read"]) -> MetaOapg.properties.recent_time_read: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["primary_group_id"]) -> MetaOapg.properties.primary_group_id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["primary_group_name"]) -> MetaOapg.properties.primary_group_name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["flair_group_id"]) -> MetaOapg.properties.flair_group_id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["flair_name"]) -> MetaOapg.properties.flair_name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["flair_url"]) -> MetaOapg.properties.flair_url: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["flair_bg_color"]) -> MetaOapg.properties.flair_bg_color: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["flair_color"]) -> MetaOapg.properties.flair_color: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["featured_topic"]) -> MetaOapg.properties.featured_topic: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["staged"]) -> MetaOapg.properties.staged: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_edit"]) -> MetaOapg.properties.can_edit: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_edit_username"]) -> MetaOapg.properties.can_edit_username: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_edit_email"]) -> MetaOapg.properties.can_edit_email: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_edit_name"]) -> MetaOapg.properties.can_edit_name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["uploaded_avatar_id"]) -> MetaOapg.properties.uploaded_avatar_id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["has_title_badges"]) -> MetaOapg.properties.has_title_badges: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["pending_count"]) -> MetaOapg.properties.pending_count: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["pending_posts_count"]) -> MetaOapg.properties.pending_posts_count: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["profile_view_count"]) -> MetaOapg.properties.profile_view_count: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["second_factor_enabled"]) -> MetaOapg.properties.second_factor_enabled: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_upload_profile_header"]) -> MetaOapg.properties.can_upload_profile_header: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_upload_user_card_background"]) -> MetaOapg.properties.can_upload_user_card_background: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["post_count"]) -> MetaOapg.properties.post_count: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_be_deleted"]) -> MetaOapg.properties.can_be_deleted: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_delete_all_posts"]) -> MetaOapg.properties.can_delete_all_posts: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["locale"]) -> MetaOapg.properties.locale: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["muted_category_ids"]) -> MetaOapg.properties.muted_category_ids: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["regular_category_ids"]) -> MetaOapg.properties.regular_category_ids: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["watched_tags"]) -> MetaOapg.properties.watched_tags: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["watching_first_post_tags"]) -> MetaOapg.properties.watching_first_post_tags: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["tracked_tags"]) -> MetaOapg.properties.tracked_tags: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["muted_tags"]) -> MetaOapg.properties.muted_tags: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["tracked_category_ids"]) -> MetaOapg.properties.tracked_category_ids: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["watched_category_ids"]) -> MetaOapg.properties.watched_category_ids: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["watched_first_post_category_ids"]) -> MetaOapg.properties.watched_first_post_category_ids: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["system_avatar_upload_id"]) -> MetaOapg.properties.system_avatar_upload_id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["system_avatar_template"]) -> MetaOapg.properties.system_avatar_template: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["muted_usernames"]) -> MetaOapg.properties.muted_usernames: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["ignored_usernames"]) -> MetaOapg.properties.ignored_usernames: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["allowed_pm_usernames"]) -> MetaOapg.properties.allowed_pm_usernames: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["mailing_list_posts_per_day"]) -> MetaOapg.properties.mailing_list_posts_per_day: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_change_bio"]) -> MetaOapg.properties.can_change_bio: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_change_location"]) -> MetaOapg.properties.can_change_location: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_change_website"]) -> MetaOapg.properties.can_change_website: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_change_tracking_preferences"]) -> MetaOapg.properties.can_change_tracking_preferences: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["user_api_keys"]) -> MetaOapg.properties.user_api_keys: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["user_passkeys"]) -> MetaOapg.properties.user_passkeys: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sidebar_tags"]) -> MetaOapg.properties.sidebar_tags: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["sidebar_category_ids"]) -> MetaOapg.properties.sidebar_category_ids: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["display_sidebar_tags"]) -> MetaOapg.properties.display_sidebar_tags: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["user_auth_tokens"]) -> MetaOapg.properties.user_auth_tokens: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["user_notification_schedule"]) -> MetaOapg.properties.user_notification_schedule: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["use_logo_small_as_avatar"]) -> MetaOapg.properties.use_logo_small_as_avatar: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["featured_user_badge_ids"]) -> MetaOapg.properties.featured_user_badge_ids: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["invited_by"]) -> MetaOapg.properties.invited_by: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["groups"]) -> MetaOapg.properties.groups: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["group_users"]) -> MetaOapg.properties.group_users: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["user_option"]) -> MetaOapg.properties.user_option: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "id", "username", "name", "avatar_template", "last_posted_at", "last_seen_at", "created_at", "ignored", "muted", "can_ignore_user", "can_mute_user", "can_send_private_messages", "can_send_private_message_to_user", "trust_level", "moderator", "admin", "badge_count", "second_factor_backup_enabled", "user_fields", "custom_fields", "time_read", "recent_time_read", "primary_group_id", "primary_group_name", "flair_group_id", "flair_name", "flair_url", "flair_bg_color", "flair_color", "featured_topic", "staged", "can_edit", "can_edit_username", "can_edit_email", "can_edit_name", "uploaded_avatar_id", "has_title_badges", "pending_count", "pending_posts_count", "profile_view_count", "second_factor_enabled", "can_upload_profile_header", "can_upload_user_card_background", "post_count", "can_be_deleted", "can_delete_all_posts", "locale", "muted_category_ids", "regular_category_ids", "watched_tags", "watching_first_post_tags", "tracked_tags", "muted_tags", "tracked_category_ids", "watched_category_ids", "watched_first_post_category_ids", "system_avatar_upload_id", "system_avatar_template", "muted_usernames", "ignored_usernames", "allowed_pm_usernames", "mailing_list_posts_per_day", "can_change_bio", "can_change_location", "can_change_website", "can_change_tracking_preferences", "user_api_keys", "user_passkeys", "sidebar_tags", "sidebar_category_ids", "display_sidebar_tags", "user_auth_tokens", "user_notification_schedule", "use_logo_small_as_avatar", "featured_user_badge_ids", "invited_by", "groups", "group_users", "user_option", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["avatar_template"]) -> MetaOapg.properties.avatar_template: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["last_posted_at"]) -> MetaOapg.properties.last_posted_at: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["last_seen_at"]) -> MetaOapg.properties.last_seen_at: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["ignored"]) -> MetaOapg.properties.ignored: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["muted"]) -> MetaOapg.properties.muted: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_ignore_user"]) -> MetaOapg.properties.can_ignore_user: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_mute_user"]) -> MetaOapg.properties.can_mute_user: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_send_private_messages"]) -> MetaOapg.properties.can_send_private_messages: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_send_private_message_to_user"]) -> MetaOapg.properties.can_send_private_message_to_user: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["trust_level"]) -> MetaOapg.properties.trust_level: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["moderator"]) -> MetaOapg.properties.moderator: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["admin"]) -> MetaOapg.properties.admin: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["badge_count"]) -> MetaOapg.properties.badge_count: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["second_factor_backup_enabled"]) -> typing.Union[MetaOapg.properties.second_factor_backup_enabled, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["user_fields"]) -> typing.Union[MetaOapg.properties.user_fields, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["custom_fields"]) -> MetaOapg.properties.custom_fields: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["time_read"]) -> MetaOapg.properties.time_read: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["recent_time_read"]) -> MetaOapg.properties.recent_time_read: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["primary_group_id"]) -> MetaOapg.properties.primary_group_id: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["primary_group_name"]) -> MetaOapg.properties.primary_group_name: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["flair_group_id"]) -> MetaOapg.properties.flair_group_id: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["flair_name"]) -> MetaOapg.properties.flair_name: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["flair_url"]) -> MetaOapg.properties.flair_url: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["flair_bg_color"]) -> MetaOapg.properties.flair_bg_color: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["flair_color"]) -> MetaOapg.properties.flair_color: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["featured_topic"]) -> MetaOapg.properties.featured_topic: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["staged"]) -> MetaOapg.properties.staged: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_edit"]) -> MetaOapg.properties.can_edit: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_edit_username"]) -> MetaOapg.properties.can_edit_username: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_edit_email"]) -> MetaOapg.properties.can_edit_email: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_edit_name"]) -> MetaOapg.properties.can_edit_name: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["uploaded_avatar_id"]) -> MetaOapg.properties.uploaded_avatar_id: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["has_title_badges"]) -> MetaOapg.properties.has_title_badges: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["pending_count"]) -> MetaOapg.properties.pending_count: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["pending_posts_count"]) -> typing.Union[MetaOapg.properties.pending_posts_count, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["profile_view_count"]) -> MetaOapg.properties.profile_view_count: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["second_factor_enabled"]) -> MetaOapg.properties.second_factor_enabled: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_upload_profile_header"]) -> MetaOapg.properties.can_upload_profile_header: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_upload_user_card_background"]) -> MetaOapg.properties.can_upload_user_card_background: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["post_count"]) -> MetaOapg.properties.post_count: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_be_deleted"]) -> MetaOapg.properties.can_be_deleted: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_delete_all_posts"]) -> MetaOapg.properties.can_delete_all_posts: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["locale"]) -> MetaOapg.properties.locale: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["muted_category_ids"]) -> MetaOapg.properties.muted_category_ids: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["regular_category_ids"]) -> MetaOapg.properties.regular_category_ids: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["watched_tags"]) -> MetaOapg.properties.watched_tags: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["watching_first_post_tags"]) -> MetaOapg.properties.watching_first_post_tags: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["tracked_tags"]) -> MetaOapg.properties.tracked_tags: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["muted_tags"]) -> MetaOapg.properties.muted_tags: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["tracked_category_ids"]) -> MetaOapg.properties.tracked_category_ids: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["watched_category_ids"]) -> MetaOapg.properties.watched_category_ids: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["watched_first_post_category_ids"]) -> MetaOapg.properties.watched_first_post_category_ids: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["system_avatar_upload_id"]) -> MetaOapg.properties.system_avatar_upload_id: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["system_avatar_template"]) -> MetaOapg.properties.system_avatar_template: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["muted_usernames"]) -> MetaOapg.properties.muted_usernames: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["ignored_usernames"]) -> MetaOapg.properties.ignored_usernames: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["allowed_pm_usernames"]) -> MetaOapg.properties.allowed_pm_usernames: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["mailing_list_posts_per_day"]) -> MetaOapg.properties.mailing_list_posts_per_day: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_change_bio"]) -> MetaOapg.properties.can_change_bio: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_change_location"]) -> MetaOapg.properties.can_change_location: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_change_website"]) -> MetaOapg.properties.can_change_website: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_change_tracking_preferences"]) -> MetaOapg.properties.can_change_tracking_preferences: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["user_api_keys"]) -> MetaOapg.properties.user_api_keys: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["user_passkeys"]) -> typing.Union[MetaOapg.properties.user_passkeys, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sidebar_tags"]) -> typing.Union[MetaOapg.properties.sidebar_tags, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["sidebar_category_ids"]) -> typing.Union[MetaOapg.properties.sidebar_category_ids, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["display_sidebar_tags"]) -> typing.Union[MetaOapg.properties.display_sidebar_tags, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["user_auth_tokens"]) -> MetaOapg.properties.user_auth_tokens: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["user_notification_schedule"]) -> MetaOapg.properties.user_notification_schedule: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["use_logo_small_as_avatar"]) -> MetaOapg.properties.use_logo_small_as_avatar: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["featured_user_badge_ids"]) -> MetaOapg.properties.featured_user_badge_ids: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["invited_by"]) -> MetaOapg.properties.invited_by: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["groups"]) -> MetaOapg.properties.groups: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["group_users"]) -> MetaOapg.properties.group_users: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["user_option"]) -> MetaOapg.properties.user_option: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "id", "username", "name", "avatar_template", "last_posted_at", "last_seen_at", "created_at", "ignored", "muted", "can_ignore_user", "can_mute_user", "can_send_private_messages", "can_send_private_message_to_user", "trust_level", "moderator", "admin", "badge_count", "second_factor_backup_enabled", "user_fields", "custom_fields", "time_read", "recent_time_read", "primary_group_id", "primary_group_name", "flair_group_id", "flair_name", "flair_url", "flair_bg_color", "flair_color", "featured_topic", "staged", "can_edit", "can_edit_username", "can_edit_email", "can_edit_name", "uploaded_avatar_id", "has_title_badges", "pending_count", "pending_posts_count", "profile_view_count", "second_factor_enabled", "can_upload_profile_header", "can_upload_user_card_background", "post_count", "can_be_deleted", "can_delete_all_posts", "locale", "muted_category_ids", "regular_category_ids", "watched_tags", "watching_first_post_tags", "tracked_tags", "muted_tags", "tracked_category_ids", "watched_category_ids", "watched_first_post_category_ids", "system_avatar_upload_id", "system_avatar_template", "muted_usernames", "ignored_usernames", "allowed_pm_usernames", "mailing_list_posts_per_day", "can_change_bio", "can_change_location", "can_change_website", "can_change_tracking_preferences", "user_api_keys", "user_passkeys", "sidebar_tags", "sidebar_category_ids", "display_sidebar_tags", "user_auth_tokens", "user_notification_schedule", "use_logo_small_as_avatar", "featured_user_badge_ids", "invited_by", "groups", "group_users", "user_option", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    group_users: typing.Union[MetaOapg.properties.group_users, list, tuple, ],
                    recent_time_read: typing.Union[MetaOapg.properties.recent_time_read, decimal.Decimal, int, ],
                    flair_color: typing.Union[MetaOapg.properties.flair_color, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    moderator: typing.Union[MetaOapg.properties.moderator, bool, ],
                    trust_level: typing.Union[MetaOapg.properties.trust_level, decimal.Decimal, int, ],
                    tracked_category_ids: typing.Union[MetaOapg.properties.tracked_category_ids, list, tuple, ],
                    muted_tags: typing.Union[MetaOapg.properties.muted_tags, list, tuple, ],
                    can_send_private_messages: typing.Union[MetaOapg.properties.can_send_private_messages, bool, ],
                    user_notification_schedule: typing.Union[MetaOapg.properties.user_notification_schedule, dict, frozendict.frozendict, ],
                    id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
                    second_factor_enabled: typing.Union[MetaOapg.properties.second_factor_enabled, bool, ],
                    can_delete_all_posts: typing.Union[MetaOapg.properties.can_delete_all_posts, bool, ],
                    can_change_location: typing.Union[MetaOapg.properties.can_change_location, bool, ],
                    uploaded_avatar_id: typing.Union[MetaOapg.properties.uploaded_avatar_id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    ignored: typing.Union[MetaOapg.properties.ignored, bool, ],
                    regular_category_ids: typing.Union[MetaOapg.properties.regular_category_ids, list, tuple, ],
                    watching_first_post_tags: typing.Union[MetaOapg.properties.watching_first_post_tags, list, tuple, ],
                    can_send_private_message_to_user: typing.Union[MetaOapg.properties.can_send_private_message_to_user, bool, ],
                    tracked_tags: typing.Union[MetaOapg.properties.tracked_tags, list, tuple, ],
                    custom_fields: typing.Union[MetaOapg.properties.custom_fields, dict, frozendict.frozendict, ],
                    can_edit_email: typing.Union[MetaOapg.properties.can_edit_email, bool, ],
                    can_mute_user: typing.Union[MetaOapg.properties.can_mute_user, bool, ],
                    profile_view_count: typing.Union[MetaOapg.properties.profile_view_count, decimal.Decimal, int, ],
                    can_change_tracking_preferences: typing.Union[MetaOapg.properties.can_change_tracking_preferences, bool, ],
                    featured_user_badge_ids: typing.Union[MetaOapg.properties.featured_user_badge_ids, list, tuple, ],
                    can_edit_name: typing.Union[MetaOapg.properties.can_edit_name, bool, ],
                    name: typing.Union[MetaOapg.properties.name, str, ],
                    system_avatar_upload_id: typing.Union[MetaOapg.properties.system_avatar_upload_id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    allowed_pm_usernames: typing.Union[MetaOapg.properties.allowed_pm_usernames, list, tuple, ],
                    post_count: typing.Union[MetaOapg.properties.post_count, decimal.Decimal, int, ],
                    badge_count: typing.Union[MetaOapg.properties.badge_count, decimal.Decimal, int, ],
                    primary_group_id: typing.Union[MetaOapg.properties.primary_group_id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    use_logo_small_as_avatar: typing.Union[MetaOapg.properties.use_logo_small_as_avatar, bool, ],
                    user_api_keys: typing.Union[MetaOapg.properties.user_api_keys, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    admin: typing.Union[MetaOapg.properties.admin, bool, ],
                    created_at: typing.Union[MetaOapg.properties.created_at, str, ],
                    locale: typing.Union[MetaOapg.properties.locale, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    title: typing.Union[MetaOapg.properties.title, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    can_change_website: typing.Union[MetaOapg.properties.can_change_website, bool, ],
                    muted_category_ids: typing.Union[MetaOapg.properties.muted_category_ids, list, tuple, ],
                    watched_tags: typing.Union[MetaOapg.properties.watched_tags, list, tuple, ],
                    muted_usernames: typing.Union[MetaOapg.properties.muted_usernames, list, tuple, ],
                    can_be_deleted: typing.Union[MetaOapg.properties.can_be_deleted, bool, ],
                    can_change_bio: typing.Union[MetaOapg.properties.can_change_bio, bool, ],
                    mailing_list_posts_per_day: typing.Union[MetaOapg.properties.mailing_list_posts_per_day, decimal.Decimal, int, ],
                    system_avatar_template: typing.Union[MetaOapg.properties.system_avatar_template, str, ],
                    has_title_badges: typing.Union[MetaOapg.properties.has_title_badges, bool, ],
                    featured_topic: typing.Union[MetaOapg.properties.featured_topic, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    muted: typing.Union[MetaOapg.properties.muted, bool, ],
                    avatar_template: typing.Union[MetaOapg.properties.avatar_template, str, ],
                    last_posted_at: typing.Union[MetaOapg.properties.last_posted_at, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    can_upload_profile_header: typing.Union[MetaOapg.properties.can_upload_profile_header, bool, ],
                    can_upload_user_card_background: typing.Union[MetaOapg.properties.can_upload_user_card_background, bool, ],
                    time_read: typing.Union[MetaOapg.properties.time_read, decimal.Decimal, int, ],
                    can_edit: typing.Union[MetaOapg.properties.can_edit, bool, ],
                    groups: typing.Union[MetaOapg.properties.groups, list, tuple, ],
                    user_option: typing.Union[MetaOapg.properties.user_option, dict, frozendict.frozendict, ],
                    flair_url: typing.Union[MetaOapg.properties.flair_url, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    ignored_usernames: typing.Union[MetaOapg.properties.ignored_usernames, list, tuple, ],
                    invited_by: typing.Union[MetaOapg.properties.invited_by, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    staged: typing.Union[MetaOapg.properties.staged, bool, ],
                    watched_first_post_category_ids: typing.Union[MetaOapg.properties.watched_first_post_category_ids, list, tuple, ],
                    flair_bg_color: typing.Union[MetaOapg.properties.flair_bg_color, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    pending_count: typing.Union[MetaOapg.properties.pending_count, decimal.Decimal, int, ],
                    primary_group_name: typing.Union[MetaOapg.properties.primary_group_name, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    can_edit_username: typing.Union[MetaOapg.properties.can_edit_username, bool, ],
                    can_ignore_user: typing.Union[MetaOapg.properties.can_ignore_user, bool, ],
                    user_auth_tokens: typing.Union[MetaOapg.properties.user_auth_tokens, list, tuple, ],
                    flair_group_id: typing.Union[MetaOapg.properties.flair_group_id, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    last_seen_at: typing.Union[MetaOapg.properties.last_seen_at, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    flair_name: typing.Union[MetaOapg.properties.flair_name, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    username: typing.Union[MetaOapg.properties.username, str, ],
                    watched_category_ids: typing.Union[MetaOapg.properties.watched_category_ids, list, tuple, ],
                    second_factor_backup_enabled: typing.Union[MetaOapg.properties.second_factor_backup_enabled, bool, schemas.Unset] = schemas.unset,
                    user_fields: typing.Union[MetaOapg.properties.user_fields, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    pending_posts_count: typing.Union[MetaOapg.properties.pending_posts_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    user_passkeys: typing.Union[MetaOapg.properties.user_passkeys, list, tuple, schemas.Unset] = schemas.unset,
                    sidebar_tags: typing.Union[MetaOapg.properties.sidebar_tags, list, tuple, schemas.Unset] = schemas.unset,
                    sidebar_category_ids: typing.Union[MetaOapg.properties.sidebar_category_ids, list, tuple, schemas.Unset] = schemas.unset,
                    display_sidebar_tags: typing.Union[MetaOapg.properties.display_sidebar_tags, bool, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'user':
                    return super().__new__(
                        cls,
                        *args,
                        group_users=group_users,
                        recent_time_read=recent_time_read,
                        flair_color=flair_color,
                        moderator=moderator,
                        trust_level=trust_level,
                        tracked_category_ids=tracked_category_ids,
                        muted_tags=muted_tags,
                        can_send_private_messages=can_send_private_messages,
                        user_notification_schedule=user_notification_schedule,
                        id=id,
                        second_factor_enabled=second_factor_enabled,
                        can_delete_all_posts=can_delete_all_posts,
                        can_change_location=can_change_location,
                        uploaded_avatar_id=uploaded_avatar_id,
                        ignored=ignored,
                        regular_category_ids=regular_category_ids,
                        watching_first_post_tags=watching_first_post_tags,
                        can_send_private_message_to_user=can_send_private_message_to_user,
                        tracked_tags=tracked_tags,
                        custom_fields=custom_fields,
                        can_edit_email=can_edit_email,
                        can_mute_user=can_mute_user,
                        profile_view_count=profile_view_count,
                        can_change_tracking_preferences=can_change_tracking_preferences,
                        featured_user_badge_ids=featured_user_badge_ids,
                        can_edit_name=can_edit_name,
                        name=name,
                        system_avatar_upload_id=system_avatar_upload_id,
                        allowed_pm_usernames=allowed_pm_usernames,
                        post_count=post_count,
                        badge_count=badge_count,
                        primary_group_id=primary_group_id,
                        use_logo_small_as_avatar=use_logo_small_as_avatar,
                        user_api_keys=user_api_keys,
                        admin=admin,
                        created_at=created_at,
                        locale=locale,
                        title=title,
                        can_change_website=can_change_website,
                        muted_category_ids=muted_category_ids,
                        watched_tags=watched_tags,
                        muted_usernames=muted_usernames,
                        can_be_deleted=can_be_deleted,
                        can_change_bio=can_change_bio,
                        mailing_list_posts_per_day=mailing_list_posts_per_day,
                        system_avatar_template=system_avatar_template,
                        has_title_badges=has_title_badges,
                        featured_topic=featured_topic,
                        muted=muted,
                        avatar_template=avatar_template,
                        last_posted_at=last_posted_at,
                        can_upload_profile_header=can_upload_profile_header,
                        can_upload_user_card_background=can_upload_user_card_background,
                        time_read=time_read,
                        can_edit=can_edit,
                        groups=groups,
                        user_option=user_option,
                        flair_url=flair_url,
                        ignored_usernames=ignored_usernames,
                        invited_by=invited_by,
                        staged=staged,
                        watched_first_post_category_ids=watched_first_post_category_ids,
                        flair_bg_color=flair_bg_color,
                        pending_count=pending_count,
                        primary_group_name=primary_group_name,
                        can_edit_username=can_edit_username,
                        can_ignore_user=can_ignore_user,
                        user_auth_tokens=user_auth_tokens,
                        flair_group_id=flair_group_id,
                        last_seen_at=last_seen_at,
                        flair_name=flair_name,
                        username=username,
                        watched_category_ids=watched_category_ids,
                        second_factor_backup_enabled=second_factor_backup_enabled,
                        user_fields=user_fields,
                        pending_posts_count=pending_posts_count,
                        user_passkeys=user_passkeys,
                        sidebar_tags=sidebar_tags,
                        sidebar_category_ids=sidebar_category_ids,
                        display_sidebar_tags=display_sidebar_tags,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "user_badges": user_badges,
                "user": user,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    user: MetaOapg.properties.user
    user_badges: MetaOapg.properties.user_badges
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_badges"]) -> MetaOapg.properties.user_badges: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["user"], typing_extensions.Literal["user_badges"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> MetaOapg.properties.user: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_badges"]) -> MetaOapg.properties.user_badges: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["user"], typing_extensions.Literal["user_badges"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        user: typing.Union[MetaOapg.properties.user, dict, frozendict.frozendict, ],
        user_badges: typing.Union[MetaOapg.properties.user_badges, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs,
    ) -> 'UsersGetIdentityProviderExternalIdResponse':
        return super().__new__(
            cls,
            *args,
            user=user,
            user_badges=user_badges,
            _configuration=_configuration,
        )
