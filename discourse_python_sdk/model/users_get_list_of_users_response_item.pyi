# coding: utf-8

"""
    Discourse API Documentation

    This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 

    The version of the OpenAPI document: latest
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from discourse_python_sdk import schemas  # noqa: F401


class UsersGetListOfUsersResponseItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "days_visited",
            "time_read",
            "moderator",
            "active",
            "admin",
            "created_at",
            "trust_level",
            "last_seen_age",
            "posts_read_count",
            "staged",
            "title",
            "manual_locked_trust_level",
            "created_at_age",
            "name",
            "last_emailed_age",
            "topics_entered",
            "last_emailed_at",
            "id",
            "post_count",
            "last_seen_at",
            "avatar_template",
            "username",
        }
        
        class properties:
            title = schemas.AnyTypeSchema
            id = schemas.IntSchema
            username = schemas.StrSchema
            name = schemas.AnyTypeSchema
            avatar_template = schemas.StrSchema
            active = schemas.BoolSchema
            admin = schemas.BoolSchema
            moderator = schemas.BoolSchema
            last_seen_at = schemas.AnyTypeSchema
            last_emailed_at = schemas.AnyTypeSchema
            created_at = schemas.StrSchema
            last_seen_age = schemas.AnyTypeSchema
            last_emailed_age = schemas.AnyTypeSchema
            created_at_age = schemas.AnyTypeSchema
            trust_level = schemas.IntSchema
            manual_locked_trust_level = schemas.AnyTypeSchema
            time_read = schemas.IntSchema
            staged = schemas.BoolSchema
            days_visited = schemas.IntSchema
            posts_read_count = schemas.IntSchema
            topics_entered = schemas.IntSchema
            post_count = schemas.IntSchema
            email = schemas.StrSchema
        
            @staticmethod
            def secondary_emails() -> typing.Type['UsersGetListOfUsersResponseItemSecondaryEmails']:
                return UsersGetListOfUsersResponseItemSecondaryEmails
            __annotations__ = {
                "title": title,
                "id": id,
                "username": username,
                "name": name,
                "avatar_template": avatar_template,
                "active": active,
                "admin": admin,
                "moderator": moderator,
                "last_seen_at": last_seen_at,
                "last_emailed_at": last_emailed_at,
                "created_at": created_at,
                "last_seen_age": last_seen_age,
                "last_emailed_age": last_emailed_age,
                "created_at_age": created_at_age,
                "trust_level": trust_level,
                "manual_locked_trust_level": manual_locked_trust_level,
                "time_read": time_read,
                "staged": staged,
                "days_visited": days_visited,
                "posts_read_count": posts_read_count,
                "topics_entered": topics_entered,
                "post_count": post_count,
                "email": email,
                "secondary_emails": secondary_emails,
            }
    
    days_visited: MetaOapg.properties.days_visited
    time_read: MetaOapg.properties.time_read
    moderator: MetaOapg.properties.moderator
    active: MetaOapg.properties.active
    admin: MetaOapg.properties.admin
    created_at: MetaOapg.properties.created_at
    trust_level: MetaOapg.properties.trust_level
    last_seen_age: MetaOapg.properties.last_seen_age
    posts_read_count: MetaOapg.properties.posts_read_count
    staged: MetaOapg.properties.staged
    title: MetaOapg.properties.title
    manual_locked_trust_level: MetaOapg.properties.manual_locked_trust_level
    created_at_age: MetaOapg.properties.created_at_age
    name: MetaOapg.properties.name
    last_emailed_age: MetaOapg.properties.last_emailed_age
    topics_entered: MetaOapg.properties.topics_entered
    last_emailed_at: MetaOapg.properties.last_emailed_at
    id: MetaOapg.properties.id
    post_count: MetaOapg.properties.post_count
    last_seen_at: MetaOapg.properties.last_seen_at
    avatar_template: MetaOapg.properties.avatar_template
    username: MetaOapg.properties.username
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["avatar_template"]) -> MetaOapg.properties.avatar_template: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["admin"]) -> MetaOapg.properties.admin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["moderator"]) -> MetaOapg.properties.moderator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_seen_at"]) -> MetaOapg.properties.last_seen_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_emailed_at"]) -> MetaOapg.properties.last_emailed_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_seen_age"]) -> MetaOapg.properties.last_seen_age: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_emailed_age"]) -> MetaOapg.properties.last_emailed_age: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at_age"]) -> MetaOapg.properties.created_at_age: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trust_level"]) -> MetaOapg.properties.trust_level: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["manual_locked_trust_level"]) -> MetaOapg.properties.manual_locked_trust_level: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_read"]) -> MetaOapg.properties.time_read: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["staged"]) -> MetaOapg.properties.staged: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["days_visited"]) -> MetaOapg.properties.days_visited: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["posts_read_count"]) -> MetaOapg.properties.posts_read_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["topics_entered"]) -> MetaOapg.properties.topics_entered: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["post_count"]) -> MetaOapg.properties.post_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secondary_emails"]) -> 'UsersGetListOfUsersResponseItemSecondaryEmails': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "id", "username", "name", "avatar_template", "active", "admin", "moderator", "last_seen_at", "last_emailed_at", "created_at", "last_seen_age", "last_emailed_age", "created_at_age", "trust_level", "manual_locked_trust_level", "time_read", "staged", "days_visited", "posts_read_count", "topics_entered", "post_count", "email", "secondary_emails", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["username"]) -> MetaOapg.properties.username: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["avatar_template"]) -> MetaOapg.properties.avatar_template: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["admin"]) -> MetaOapg.properties.admin: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["moderator"]) -> MetaOapg.properties.moderator: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_seen_at"]) -> MetaOapg.properties.last_seen_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_emailed_at"]) -> MetaOapg.properties.last_emailed_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_seen_age"]) -> MetaOapg.properties.last_seen_age: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_emailed_age"]) -> MetaOapg.properties.last_emailed_age: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at_age"]) -> MetaOapg.properties.created_at_age: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trust_level"]) -> MetaOapg.properties.trust_level: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["manual_locked_trust_level"]) -> MetaOapg.properties.manual_locked_trust_level: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_read"]) -> MetaOapg.properties.time_read: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["staged"]) -> MetaOapg.properties.staged: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["days_visited"]) -> MetaOapg.properties.days_visited: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["posts_read_count"]) -> MetaOapg.properties.posts_read_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["topics_entered"]) -> MetaOapg.properties.topics_entered: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["post_count"]) -> MetaOapg.properties.post_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secondary_emails"]) -> typing.Union['UsersGetListOfUsersResponseItemSecondaryEmails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "id", "username", "name", "avatar_template", "active", "admin", "moderator", "last_seen_at", "last_emailed_at", "created_at", "last_seen_age", "last_emailed_age", "created_at_age", "trust_level", "manual_locked_trust_level", "time_read", "staged", "days_visited", "posts_read_count", "topics_entered", "post_count", "email", "secondary_emails", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        days_visited: typing.Union[MetaOapg.properties.days_visited, decimal.Decimal, int, ],
        time_read: typing.Union[MetaOapg.properties.time_read, decimal.Decimal, int, ],
        moderator: typing.Union[MetaOapg.properties.moderator, bool, ],
        active: typing.Union[MetaOapg.properties.active, bool, ],
        admin: typing.Union[MetaOapg.properties.admin, bool, ],
        created_at: typing.Union[MetaOapg.properties.created_at, str, ],
        trust_level: typing.Union[MetaOapg.properties.trust_level, decimal.Decimal, int, ],
        last_seen_age: typing.Union[MetaOapg.properties.last_seen_age, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        posts_read_count: typing.Union[MetaOapg.properties.posts_read_count, decimal.Decimal, int, ],
        staged: typing.Union[MetaOapg.properties.staged, bool, ],
        title: typing.Union[MetaOapg.properties.title, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        manual_locked_trust_level: typing.Union[MetaOapg.properties.manual_locked_trust_level, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        created_at_age: typing.Union[MetaOapg.properties.created_at_age, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        name: typing.Union[MetaOapg.properties.name, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        last_emailed_age: typing.Union[MetaOapg.properties.last_emailed_age, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        topics_entered: typing.Union[MetaOapg.properties.topics_entered, decimal.Decimal, int, ],
        last_emailed_at: typing.Union[MetaOapg.properties.last_emailed_at, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        post_count: typing.Union[MetaOapg.properties.post_count, decimal.Decimal, int, ],
        last_seen_at: typing.Union[MetaOapg.properties.last_seen_at, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        avatar_template: typing.Union[MetaOapg.properties.avatar_template, str, ],
        username: typing.Union[MetaOapg.properties.username, str, ],
        email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
        secondary_emails: typing.Union['UsersGetListOfUsersResponseItemSecondaryEmails', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UsersGetListOfUsersResponseItem':
        return super().__new__(
            cls,
            *args,
            days_visited=days_visited,
            time_read=time_read,
            moderator=moderator,
            active=active,
            admin=admin,
            created_at=created_at,
            trust_level=trust_level,
            last_seen_age=last_seen_age,
            posts_read_count=posts_read_count,
            staged=staged,
            title=title,
            manual_locked_trust_level=manual_locked_trust_level,
            created_at_age=created_at_age,
            name=name,
            last_emailed_age=last_emailed_age,
            topics_entered=topics_entered,
            last_emailed_at=last_emailed_at,
            id=id,
            post_count=post_count,
            last_seen_at=last_seen_at,
            avatar_template=avatar_template,
            username=username,
            email=email,
            secondary_emails=secondary_emails,
            _configuration=_configuration,
            **kwargs,
        )

from discourse_python_sdk.model.users_get_list_of_users_response_item_secondary_emails import UsersGetListOfUsersResponseItemSecondaryEmails
