# coding: utf-8

"""
    Discourse API Documentation

    This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 

    The version of the OpenAPI document: latest
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from discourse_python_sdk import schemas  # noqa: F401


class GroupsGetGroupByIdResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "extras",
            "group",
        }
        
        class properties:
            
            
            class group(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "mentionable_level",
                        "flair_color",
                        "primary_group",
                        "publish_read_state",
                        "email_password",
                        "imap_old_emails",
                        "imap_new_emails",
                        "mentionable",
                        "visibility_level",
                        "messageable",
                        "id",
                        "is_group_user",
                        "allow_membership_requests",
                        "watching_first_post_category_ids",
                        "imap_ssl",
                        "automatic_membership_email_domains",
                        "regular_category_ids",
                        "messageable_level",
                        "public_exit",
                        "full_name",
                        "imap_mailbox_name",
                        "smtp_port",
                        "smtp_server",
                        "membership_request_template",
                        "name",
                        "tracking_category_ids",
                        "public_admission",
                        "title",
                        "can_see_members",
                        "imap_port",
                        "muted_category_ids",
                        "smtp_ssl",
                        "imap_server",
                        "imap_mailboxes",
                        "imap_last_error",
                        "grant_trust_level",
                        "email_username",
                        "automatic",
                        "bio_raw",
                        "flair_url",
                        "message_count",
                        "members_visibility_level",
                        "bio_excerpt",
                        "flair_bg_color",
                        "is_group_owner_display",
                        "watching_category_ids",
                        "default_notification_level",
                        "user_count",
                        "incoming_email",
                        "has_messages",
                        "allow_unknown_sender_topic_replies",
                        "can_admin_group",
                        "bio_cooked",
                    }
                    
                    class properties:
                        title = schemas.AnyTypeSchema
                        id = schemas.IntSchema
                        automatic = schemas.BoolSchema
                        name = schemas.StrSchema
                        user_count = schemas.IntSchema
                        mentionable_level = schemas.IntSchema
                        messageable_level = schemas.IntSchema
                        visibility_level = schemas.IntSchema
                        primary_group = schemas.BoolSchema
                        grant_trust_level = schemas.AnyTypeSchema
                        incoming_email = schemas.AnyTypeSchema
                        has_messages = schemas.BoolSchema
                        flair_url = schemas.AnyTypeSchema
                        flair_bg_color = schemas.AnyTypeSchema
                        flair_color = schemas.AnyTypeSchema
                        bio_raw = schemas.AnyTypeSchema
                        bio_cooked = schemas.AnyTypeSchema
                        bio_excerpt = schemas.AnyTypeSchema
                        public_admission = schemas.BoolSchema
                        public_exit = schemas.BoolSchema
                        allow_membership_requests = schemas.BoolSchema
                        full_name = schemas.AnyTypeSchema
                        default_notification_level = schemas.IntSchema
                        membership_request_template = schemas.AnyTypeSchema
                        is_group_user = schemas.BoolSchema
                        members_visibility_level = schemas.IntSchema
                        can_see_members = schemas.BoolSchema
                        can_admin_group = schemas.BoolSchema
                        can_edit_group = schemas.BoolSchema
                        publish_read_state = schemas.BoolSchema
                        is_group_owner_display = schemas.BoolSchema
                        mentionable = schemas.BoolSchema
                        messageable = schemas.BoolSchema
                        automatic_membership_email_domains = schemas.AnyTypeSchema
                        smtp_updated_at = schemas.AnyTypeSchema
                        smtp_updated_by = schemas.AnyTypeSchema
                        smtp_enabled = schemas.BoolSchema
                        smtp_server = schemas.AnyTypeSchema
                        smtp_port = schemas.AnyTypeSchema
                        smtp_ssl = schemas.AnyTypeSchema
                        imap_enabled = schemas.BoolSchema
                        imap_updated_at = schemas.AnyTypeSchema
                        imap_updated_by = schemas.AnyTypeSchema
                        imap_server = schemas.AnyTypeSchema
                        imap_port = schemas.AnyTypeSchema
                        imap_ssl = schemas.AnyTypeSchema
                        imap_mailbox_name = schemas.StrSchema
                        
                        
                        class imap_mailboxes(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'imap_mailboxes':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        email_username = schemas.AnyTypeSchema
                        email_from_alias = schemas.AnyTypeSchema
                        email_password = schemas.AnyTypeSchema
                        imap_last_error = schemas.AnyTypeSchema
                        imap_old_emails = schemas.AnyTypeSchema
                        imap_new_emails = schemas.AnyTypeSchema
                        message_count = schemas.IntSchema
                        allow_unknown_sender_topic_replies = schemas.BoolSchema
                        
                        
                        class associated_group_ids(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'associated_group_ids':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class watching_category_ids(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'watching_category_ids':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class tracking_category_ids(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'tracking_category_ids':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class watching_first_post_category_ids(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'watching_first_post_category_ids':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class regular_category_ids(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'regular_category_ids':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class muted_category_ids(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'muted_category_ids':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class watching_tags(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'watching_tags':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class watching_first_post_tags(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'watching_first_post_tags':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class tracking_tags(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'tracking_tags':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class regular_tags(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'regular_tags':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        
                        
                        class muted_tags(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'muted_tags':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "title": title,
                            "id": id,
                            "automatic": automatic,
                            "name": name,
                            "user_count": user_count,
                            "mentionable_level": mentionable_level,
                            "messageable_level": messageable_level,
                            "visibility_level": visibility_level,
                            "primary_group": primary_group,
                            "grant_trust_level": grant_trust_level,
                            "incoming_email": incoming_email,
                            "has_messages": has_messages,
                            "flair_url": flair_url,
                            "flair_bg_color": flair_bg_color,
                            "flair_color": flair_color,
                            "bio_raw": bio_raw,
                            "bio_cooked": bio_cooked,
                            "bio_excerpt": bio_excerpt,
                            "public_admission": public_admission,
                            "public_exit": public_exit,
                            "allow_membership_requests": allow_membership_requests,
                            "full_name": full_name,
                            "default_notification_level": default_notification_level,
                            "membership_request_template": membership_request_template,
                            "is_group_user": is_group_user,
                            "members_visibility_level": members_visibility_level,
                            "can_see_members": can_see_members,
                            "can_admin_group": can_admin_group,
                            "can_edit_group": can_edit_group,
                            "publish_read_state": publish_read_state,
                            "is_group_owner_display": is_group_owner_display,
                            "mentionable": mentionable,
                            "messageable": messageable,
                            "automatic_membership_email_domains": automatic_membership_email_domains,
                            "smtp_updated_at": smtp_updated_at,
                            "smtp_updated_by": smtp_updated_by,
                            "smtp_enabled": smtp_enabled,
                            "smtp_server": smtp_server,
                            "smtp_port": smtp_port,
                            "smtp_ssl": smtp_ssl,
                            "imap_enabled": imap_enabled,
                            "imap_updated_at": imap_updated_at,
                            "imap_updated_by": imap_updated_by,
                            "imap_server": imap_server,
                            "imap_port": imap_port,
                            "imap_ssl": imap_ssl,
                            "imap_mailbox_name": imap_mailbox_name,
                            "imap_mailboxes": imap_mailboxes,
                            "email_username": email_username,
                            "email_from_alias": email_from_alias,
                            "email_password": email_password,
                            "imap_last_error": imap_last_error,
                            "imap_old_emails": imap_old_emails,
                            "imap_new_emails": imap_new_emails,
                            "message_count": message_count,
                            "allow_unknown_sender_topic_replies": allow_unknown_sender_topic_replies,
                            "associated_group_ids": associated_group_ids,
                            "watching_category_ids": watching_category_ids,
                            "tracking_category_ids": tracking_category_ids,
                            "watching_first_post_category_ids": watching_first_post_category_ids,
                            "regular_category_ids": regular_category_ids,
                            "muted_category_ids": muted_category_ids,
                            "watching_tags": watching_tags,
                            "watching_first_post_tags": watching_first_post_tags,
                            "tracking_tags": tracking_tags,
                            "regular_tags": regular_tags,
                            "muted_tags": muted_tags,
                        }
                
                mentionable_level: MetaOapg.properties.mentionable_level
                flair_color: MetaOapg.properties.flair_color
                primary_group: MetaOapg.properties.primary_group
                publish_read_state: MetaOapg.properties.publish_read_state
                email_password: MetaOapg.properties.email_password
                imap_old_emails: MetaOapg.properties.imap_old_emails
                imap_new_emails: MetaOapg.properties.imap_new_emails
                mentionable: MetaOapg.properties.mentionable
                visibility_level: MetaOapg.properties.visibility_level
                messageable: MetaOapg.properties.messageable
                id: MetaOapg.properties.id
                is_group_user: MetaOapg.properties.is_group_user
                allow_membership_requests: MetaOapg.properties.allow_membership_requests
                watching_first_post_category_ids: MetaOapg.properties.watching_first_post_category_ids
                imap_ssl: MetaOapg.properties.imap_ssl
                automatic_membership_email_domains: MetaOapg.properties.automatic_membership_email_domains
                regular_category_ids: MetaOapg.properties.regular_category_ids
                messageable_level: MetaOapg.properties.messageable_level
                public_exit: MetaOapg.properties.public_exit
                full_name: MetaOapg.properties.full_name
                imap_mailbox_name: MetaOapg.properties.imap_mailbox_name
                smtp_port: MetaOapg.properties.smtp_port
                smtp_server: MetaOapg.properties.smtp_server
                membership_request_template: MetaOapg.properties.membership_request_template
                name: MetaOapg.properties.name
                tracking_category_ids: MetaOapg.properties.tracking_category_ids
                public_admission: MetaOapg.properties.public_admission
                title: MetaOapg.properties.title
                can_see_members: MetaOapg.properties.can_see_members
                imap_port: MetaOapg.properties.imap_port
                muted_category_ids: MetaOapg.properties.muted_category_ids
                smtp_ssl: MetaOapg.properties.smtp_ssl
                imap_server: MetaOapg.properties.imap_server
                imap_mailboxes: MetaOapg.properties.imap_mailboxes
                imap_last_error: MetaOapg.properties.imap_last_error
                grant_trust_level: MetaOapg.properties.grant_trust_level
                email_username: MetaOapg.properties.email_username
                automatic: MetaOapg.properties.automatic
                bio_raw: MetaOapg.properties.bio_raw
                flair_url: MetaOapg.properties.flair_url
                message_count: MetaOapg.properties.message_count
                members_visibility_level: MetaOapg.properties.members_visibility_level
                bio_excerpt: MetaOapg.properties.bio_excerpt
                flair_bg_color: MetaOapg.properties.flair_bg_color
                is_group_owner_display: MetaOapg.properties.is_group_owner_display
                watching_category_ids: MetaOapg.properties.watching_category_ids
                default_notification_level: MetaOapg.properties.default_notification_level
                user_count: MetaOapg.properties.user_count
                incoming_email: MetaOapg.properties.incoming_email
                has_messages: MetaOapg.properties.has_messages
                allow_unknown_sender_topic_replies: MetaOapg.properties.allow_unknown_sender_topic_replies
                can_admin_group: MetaOapg.properties.can_admin_group
                bio_cooked: MetaOapg.properties.bio_cooked
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["automatic"]) -> MetaOapg.properties.automatic: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["user_count"]) -> MetaOapg.properties.user_count: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["mentionable_level"]) -> MetaOapg.properties.mentionable_level: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["messageable_level"]) -> MetaOapg.properties.messageable_level: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["visibility_level"]) -> MetaOapg.properties.visibility_level: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["primary_group"]) -> MetaOapg.properties.primary_group: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["grant_trust_level"]) -> MetaOapg.properties.grant_trust_level: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["incoming_email"]) -> MetaOapg.properties.incoming_email: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["has_messages"]) -> MetaOapg.properties.has_messages: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["flair_url"]) -> MetaOapg.properties.flair_url: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["flair_bg_color"]) -> MetaOapg.properties.flair_bg_color: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["flair_color"]) -> MetaOapg.properties.flair_color: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["bio_raw"]) -> MetaOapg.properties.bio_raw: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["bio_cooked"]) -> MetaOapg.properties.bio_cooked: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["bio_excerpt"]) -> MetaOapg.properties.bio_excerpt: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["public_admission"]) -> MetaOapg.properties.public_admission: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["public_exit"]) -> MetaOapg.properties.public_exit: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["allow_membership_requests"]) -> MetaOapg.properties.allow_membership_requests: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["full_name"]) -> MetaOapg.properties.full_name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["default_notification_level"]) -> MetaOapg.properties.default_notification_level: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["membership_request_template"]) -> MetaOapg.properties.membership_request_template: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["is_group_user"]) -> MetaOapg.properties.is_group_user: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["members_visibility_level"]) -> MetaOapg.properties.members_visibility_level: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_see_members"]) -> MetaOapg.properties.can_see_members: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_admin_group"]) -> MetaOapg.properties.can_admin_group: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["can_edit_group"]) -> MetaOapg.properties.can_edit_group: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["publish_read_state"]) -> MetaOapg.properties.publish_read_state: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["is_group_owner_display"]) -> MetaOapg.properties.is_group_owner_display: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["mentionable"]) -> MetaOapg.properties.mentionable: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["messageable"]) -> MetaOapg.properties.messageable: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["automatic_membership_email_domains"]) -> MetaOapg.properties.automatic_membership_email_domains: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["smtp_updated_at"]) -> MetaOapg.properties.smtp_updated_at: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["smtp_updated_by"]) -> MetaOapg.properties.smtp_updated_by: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["smtp_enabled"]) -> MetaOapg.properties.smtp_enabled: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["smtp_server"]) -> MetaOapg.properties.smtp_server: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["smtp_port"]) -> MetaOapg.properties.smtp_port: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["smtp_ssl"]) -> MetaOapg.properties.smtp_ssl: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["imap_enabled"]) -> MetaOapg.properties.imap_enabled: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["imap_updated_at"]) -> MetaOapg.properties.imap_updated_at: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["imap_updated_by"]) -> MetaOapg.properties.imap_updated_by: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["imap_server"]) -> MetaOapg.properties.imap_server: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["imap_port"]) -> MetaOapg.properties.imap_port: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["imap_ssl"]) -> MetaOapg.properties.imap_ssl: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["imap_mailbox_name"]) -> MetaOapg.properties.imap_mailbox_name: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["imap_mailboxes"]) -> MetaOapg.properties.imap_mailboxes: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["email_username"]) -> MetaOapg.properties.email_username: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["email_from_alias"]) -> MetaOapg.properties.email_from_alias: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["email_password"]) -> MetaOapg.properties.email_password: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["imap_last_error"]) -> MetaOapg.properties.imap_last_error: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["imap_old_emails"]) -> MetaOapg.properties.imap_old_emails: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["imap_new_emails"]) -> MetaOapg.properties.imap_new_emails: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["message_count"]) -> MetaOapg.properties.message_count: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["allow_unknown_sender_topic_replies"]) -> MetaOapg.properties.allow_unknown_sender_topic_replies: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["associated_group_ids"]) -> MetaOapg.properties.associated_group_ids: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["watching_category_ids"]) -> MetaOapg.properties.watching_category_ids: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["tracking_category_ids"]) -> MetaOapg.properties.tracking_category_ids: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["watching_first_post_category_ids"]) -> MetaOapg.properties.watching_first_post_category_ids: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["regular_category_ids"]) -> MetaOapg.properties.regular_category_ids: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["muted_category_ids"]) -> MetaOapg.properties.muted_category_ids: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["watching_tags"]) -> MetaOapg.properties.watching_tags: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["watching_first_post_tags"]) -> MetaOapg.properties.watching_first_post_tags: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["tracking_tags"]) -> MetaOapg.properties.tracking_tags: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["regular_tags"]) -> MetaOapg.properties.regular_tags: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["muted_tags"]) -> MetaOapg.properties.muted_tags: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "id", "automatic", "name", "user_count", "mentionable_level", "messageable_level", "visibility_level", "primary_group", "grant_trust_level", "incoming_email", "has_messages", "flair_url", "flair_bg_color", "flair_color", "bio_raw", "bio_cooked", "bio_excerpt", "public_admission", "public_exit", "allow_membership_requests", "full_name", "default_notification_level", "membership_request_template", "is_group_user", "members_visibility_level", "can_see_members", "can_admin_group", "can_edit_group", "publish_read_state", "is_group_owner_display", "mentionable", "messageable", "automatic_membership_email_domains", "smtp_updated_at", "smtp_updated_by", "smtp_enabled", "smtp_server", "smtp_port", "smtp_ssl", "imap_enabled", "imap_updated_at", "imap_updated_by", "imap_server", "imap_port", "imap_ssl", "imap_mailbox_name", "imap_mailboxes", "email_username", "email_from_alias", "email_password", "imap_last_error", "imap_old_emails", "imap_new_emails", "message_count", "allow_unknown_sender_topic_replies", "associated_group_ids", "watching_category_ids", "tracking_category_ids", "watching_first_post_category_ids", "regular_category_ids", "muted_category_ids", "watching_tags", "watching_first_post_tags", "tracking_tags", "regular_tags", "muted_tags", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["automatic"]) -> MetaOapg.properties.automatic: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["user_count"]) -> MetaOapg.properties.user_count: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["mentionable_level"]) -> MetaOapg.properties.mentionable_level: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["messageable_level"]) -> MetaOapg.properties.messageable_level: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["visibility_level"]) -> MetaOapg.properties.visibility_level: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["primary_group"]) -> MetaOapg.properties.primary_group: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["grant_trust_level"]) -> MetaOapg.properties.grant_trust_level: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["incoming_email"]) -> MetaOapg.properties.incoming_email: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["has_messages"]) -> MetaOapg.properties.has_messages: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["flair_url"]) -> MetaOapg.properties.flair_url: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["flair_bg_color"]) -> MetaOapg.properties.flair_bg_color: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["flair_color"]) -> MetaOapg.properties.flair_color: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["bio_raw"]) -> MetaOapg.properties.bio_raw: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["bio_cooked"]) -> MetaOapg.properties.bio_cooked: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["bio_excerpt"]) -> MetaOapg.properties.bio_excerpt: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["public_admission"]) -> MetaOapg.properties.public_admission: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["public_exit"]) -> MetaOapg.properties.public_exit: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["allow_membership_requests"]) -> MetaOapg.properties.allow_membership_requests: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["full_name"]) -> MetaOapg.properties.full_name: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["default_notification_level"]) -> MetaOapg.properties.default_notification_level: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["membership_request_template"]) -> MetaOapg.properties.membership_request_template: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["is_group_user"]) -> MetaOapg.properties.is_group_user: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["members_visibility_level"]) -> MetaOapg.properties.members_visibility_level: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_see_members"]) -> MetaOapg.properties.can_see_members: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_admin_group"]) -> MetaOapg.properties.can_admin_group: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["can_edit_group"]) -> typing.Union[MetaOapg.properties.can_edit_group, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["publish_read_state"]) -> MetaOapg.properties.publish_read_state: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["is_group_owner_display"]) -> MetaOapg.properties.is_group_owner_display: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["mentionable"]) -> MetaOapg.properties.mentionable: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["messageable"]) -> MetaOapg.properties.messageable: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["automatic_membership_email_domains"]) -> MetaOapg.properties.automatic_membership_email_domains: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["smtp_updated_at"]) -> typing.Union[MetaOapg.properties.smtp_updated_at, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["smtp_updated_by"]) -> typing.Union[MetaOapg.properties.smtp_updated_by, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["smtp_enabled"]) -> typing.Union[MetaOapg.properties.smtp_enabled, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["smtp_server"]) -> MetaOapg.properties.smtp_server: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["smtp_port"]) -> MetaOapg.properties.smtp_port: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["smtp_ssl"]) -> MetaOapg.properties.smtp_ssl: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["imap_enabled"]) -> typing.Union[MetaOapg.properties.imap_enabled, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["imap_updated_at"]) -> typing.Union[MetaOapg.properties.imap_updated_at, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["imap_updated_by"]) -> typing.Union[MetaOapg.properties.imap_updated_by, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["imap_server"]) -> MetaOapg.properties.imap_server: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["imap_port"]) -> MetaOapg.properties.imap_port: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["imap_ssl"]) -> MetaOapg.properties.imap_ssl: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["imap_mailbox_name"]) -> MetaOapg.properties.imap_mailbox_name: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["imap_mailboxes"]) -> MetaOapg.properties.imap_mailboxes: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["email_username"]) -> MetaOapg.properties.email_username: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["email_from_alias"]) -> typing.Union[MetaOapg.properties.email_from_alias, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["email_password"]) -> MetaOapg.properties.email_password: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["imap_last_error"]) -> MetaOapg.properties.imap_last_error: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["imap_old_emails"]) -> MetaOapg.properties.imap_old_emails: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["imap_new_emails"]) -> MetaOapg.properties.imap_new_emails: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["message_count"]) -> MetaOapg.properties.message_count: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["allow_unknown_sender_topic_replies"]) -> MetaOapg.properties.allow_unknown_sender_topic_replies: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["associated_group_ids"]) -> typing.Union[MetaOapg.properties.associated_group_ids, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["watching_category_ids"]) -> MetaOapg.properties.watching_category_ids: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["tracking_category_ids"]) -> MetaOapg.properties.tracking_category_ids: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["watching_first_post_category_ids"]) -> MetaOapg.properties.watching_first_post_category_ids: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["regular_category_ids"]) -> MetaOapg.properties.regular_category_ids: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["muted_category_ids"]) -> MetaOapg.properties.muted_category_ids: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["watching_tags"]) -> typing.Union[MetaOapg.properties.watching_tags, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["watching_first_post_tags"]) -> typing.Union[MetaOapg.properties.watching_first_post_tags, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["tracking_tags"]) -> typing.Union[MetaOapg.properties.tracking_tags, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["regular_tags"]) -> typing.Union[MetaOapg.properties.regular_tags, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["muted_tags"]) -> typing.Union[MetaOapg.properties.muted_tags, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "id", "automatic", "name", "user_count", "mentionable_level", "messageable_level", "visibility_level", "primary_group", "grant_trust_level", "incoming_email", "has_messages", "flair_url", "flair_bg_color", "flair_color", "bio_raw", "bio_cooked", "bio_excerpt", "public_admission", "public_exit", "allow_membership_requests", "full_name", "default_notification_level", "membership_request_template", "is_group_user", "members_visibility_level", "can_see_members", "can_admin_group", "can_edit_group", "publish_read_state", "is_group_owner_display", "mentionable", "messageable", "automatic_membership_email_domains", "smtp_updated_at", "smtp_updated_by", "smtp_enabled", "smtp_server", "smtp_port", "smtp_ssl", "imap_enabled", "imap_updated_at", "imap_updated_by", "imap_server", "imap_port", "imap_ssl", "imap_mailbox_name", "imap_mailboxes", "email_username", "email_from_alias", "email_password", "imap_last_error", "imap_old_emails", "imap_new_emails", "message_count", "allow_unknown_sender_topic_replies", "associated_group_ids", "watching_category_ids", "tracking_category_ids", "watching_first_post_category_ids", "regular_category_ids", "muted_category_ids", "watching_tags", "watching_first_post_tags", "tracking_tags", "regular_tags", "muted_tags", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    mentionable_level: typing.Union[MetaOapg.properties.mentionable_level, decimal.Decimal, int, ],
                    flair_color: typing.Union[MetaOapg.properties.flair_color, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    primary_group: typing.Union[MetaOapg.properties.primary_group, bool, ],
                    publish_read_state: typing.Union[MetaOapg.properties.publish_read_state, bool, ],
                    email_password: typing.Union[MetaOapg.properties.email_password, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    imap_old_emails: typing.Union[MetaOapg.properties.imap_old_emails, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    imap_new_emails: typing.Union[MetaOapg.properties.imap_new_emails, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    mentionable: typing.Union[MetaOapg.properties.mentionable, bool, ],
                    visibility_level: typing.Union[MetaOapg.properties.visibility_level, decimal.Decimal, int, ],
                    messageable: typing.Union[MetaOapg.properties.messageable, bool, ],
                    id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
                    is_group_user: typing.Union[MetaOapg.properties.is_group_user, bool, ],
                    allow_membership_requests: typing.Union[MetaOapg.properties.allow_membership_requests, bool, ],
                    watching_first_post_category_ids: typing.Union[MetaOapg.properties.watching_first_post_category_ids, list, tuple, ],
                    imap_ssl: typing.Union[MetaOapg.properties.imap_ssl, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    automatic_membership_email_domains: typing.Union[MetaOapg.properties.automatic_membership_email_domains, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    regular_category_ids: typing.Union[MetaOapg.properties.regular_category_ids, list, tuple, ],
                    messageable_level: typing.Union[MetaOapg.properties.messageable_level, decimal.Decimal, int, ],
                    public_exit: typing.Union[MetaOapg.properties.public_exit, bool, ],
                    full_name: typing.Union[MetaOapg.properties.full_name, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    imap_mailbox_name: typing.Union[MetaOapg.properties.imap_mailbox_name, str, ],
                    smtp_port: typing.Union[MetaOapg.properties.smtp_port, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    smtp_server: typing.Union[MetaOapg.properties.smtp_server, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    membership_request_template: typing.Union[MetaOapg.properties.membership_request_template, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    name: typing.Union[MetaOapg.properties.name, str, ],
                    tracking_category_ids: typing.Union[MetaOapg.properties.tracking_category_ids, list, tuple, ],
                    public_admission: typing.Union[MetaOapg.properties.public_admission, bool, ],
                    title: typing.Union[MetaOapg.properties.title, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    can_see_members: typing.Union[MetaOapg.properties.can_see_members, bool, ],
                    imap_port: typing.Union[MetaOapg.properties.imap_port, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    muted_category_ids: typing.Union[MetaOapg.properties.muted_category_ids, list, tuple, ],
                    smtp_ssl: typing.Union[MetaOapg.properties.smtp_ssl, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    imap_server: typing.Union[MetaOapg.properties.imap_server, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    imap_mailboxes: typing.Union[MetaOapg.properties.imap_mailboxes, list, tuple, ],
                    imap_last_error: typing.Union[MetaOapg.properties.imap_last_error, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    grant_trust_level: typing.Union[MetaOapg.properties.grant_trust_level, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    email_username: typing.Union[MetaOapg.properties.email_username, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    automatic: typing.Union[MetaOapg.properties.automatic, bool, ],
                    bio_raw: typing.Union[MetaOapg.properties.bio_raw, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    flair_url: typing.Union[MetaOapg.properties.flair_url, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    message_count: typing.Union[MetaOapg.properties.message_count, decimal.Decimal, int, ],
                    members_visibility_level: typing.Union[MetaOapg.properties.members_visibility_level, decimal.Decimal, int, ],
                    bio_excerpt: typing.Union[MetaOapg.properties.bio_excerpt, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    flair_bg_color: typing.Union[MetaOapg.properties.flair_bg_color, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    is_group_owner_display: typing.Union[MetaOapg.properties.is_group_owner_display, bool, ],
                    watching_category_ids: typing.Union[MetaOapg.properties.watching_category_ids, list, tuple, ],
                    default_notification_level: typing.Union[MetaOapg.properties.default_notification_level, decimal.Decimal, int, ],
                    user_count: typing.Union[MetaOapg.properties.user_count, decimal.Decimal, int, ],
                    incoming_email: typing.Union[MetaOapg.properties.incoming_email, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    has_messages: typing.Union[MetaOapg.properties.has_messages, bool, ],
                    allow_unknown_sender_topic_replies: typing.Union[MetaOapg.properties.allow_unknown_sender_topic_replies, bool, ],
                    can_admin_group: typing.Union[MetaOapg.properties.can_admin_group, bool, ],
                    bio_cooked: typing.Union[MetaOapg.properties.bio_cooked, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    can_edit_group: typing.Union[MetaOapg.properties.can_edit_group, bool, schemas.Unset] = schemas.unset,
                    smtp_updated_at: typing.Union[MetaOapg.properties.smtp_updated_at, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                    smtp_updated_by: typing.Union[MetaOapg.properties.smtp_updated_by, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                    smtp_enabled: typing.Union[MetaOapg.properties.smtp_enabled, bool, schemas.Unset] = schemas.unset,
                    imap_enabled: typing.Union[MetaOapg.properties.imap_enabled, bool, schemas.Unset] = schemas.unset,
                    imap_updated_at: typing.Union[MetaOapg.properties.imap_updated_at, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                    imap_updated_by: typing.Union[MetaOapg.properties.imap_updated_by, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                    email_from_alias: typing.Union[MetaOapg.properties.email_from_alias, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                    associated_group_ids: typing.Union[MetaOapg.properties.associated_group_ids, list, tuple, schemas.Unset] = schemas.unset,
                    watching_tags: typing.Union[MetaOapg.properties.watching_tags, list, tuple, schemas.Unset] = schemas.unset,
                    watching_first_post_tags: typing.Union[MetaOapg.properties.watching_first_post_tags, list, tuple, schemas.Unset] = schemas.unset,
                    tracking_tags: typing.Union[MetaOapg.properties.tracking_tags, list, tuple, schemas.Unset] = schemas.unset,
                    regular_tags: typing.Union[MetaOapg.properties.regular_tags, list, tuple, schemas.Unset] = schemas.unset,
                    muted_tags: typing.Union[MetaOapg.properties.muted_tags, list, tuple, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'group':
                    return super().__new__(
                        cls,
                        *args,
                        mentionable_level=mentionable_level,
                        flair_color=flair_color,
                        primary_group=primary_group,
                        publish_read_state=publish_read_state,
                        email_password=email_password,
                        imap_old_emails=imap_old_emails,
                        imap_new_emails=imap_new_emails,
                        mentionable=mentionable,
                        visibility_level=visibility_level,
                        messageable=messageable,
                        id=id,
                        is_group_user=is_group_user,
                        allow_membership_requests=allow_membership_requests,
                        watching_first_post_category_ids=watching_first_post_category_ids,
                        imap_ssl=imap_ssl,
                        automatic_membership_email_domains=automatic_membership_email_domains,
                        regular_category_ids=regular_category_ids,
                        messageable_level=messageable_level,
                        public_exit=public_exit,
                        full_name=full_name,
                        imap_mailbox_name=imap_mailbox_name,
                        smtp_port=smtp_port,
                        smtp_server=smtp_server,
                        membership_request_template=membership_request_template,
                        name=name,
                        tracking_category_ids=tracking_category_ids,
                        public_admission=public_admission,
                        title=title,
                        can_see_members=can_see_members,
                        imap_port=imap_port,
                        muted_category_ids=muted_category_ids,
                        smtp_ssl=smtp_ssl,
                        imap_server=imap_server,
                        imap_mailboxes=imap_mailboxes,
                        imap_last_error=imap_last_error,
                        grant_trust_level=grant_trust_level,
                        email_username=email_username,
                        automatic=automatic,
                        bio_raw=bio_raw,
                        flair_url=flair_url,
                        message_count=message_count,
                        members_visibility_level=members_visibility_level,
                        bio_excerpt=bio_excerpt,
                        flair_bg_color=flair_bg_color,
                        is_group_owner_display=is_group_owner_display,
                        watching_category_ids=watching_category_ids,
                        default_notification_level=default_notification_level,
                        user_count=user_count,
                        incoming_email=incoming_email,
                        has_messages=has_messages,
                        allow_unknown_sender_topic_replies=allow_unknown_sender_topic_replies,
                        can_admin_group=can_admin_group,
                        bio_cooked=bio_cooked,
                        can_edit_group=can_edit_group,
                        smtp_updated_at=smtp_updated_at,
                        smtp_updated_by=smtp_updated_by,
                        smtp_enabled=smtp_enabled,
                        imap_enabled=imap_enabled,
                        imap_updated_at=imap_updated_at,
                        imap_updated_by=imap_updated_by,
                        email_from_alias=email_from_alias,
                        associated_group_ids=associated_group_ids,
                        watching_tags=watching_tags,
                        watching_first_post_tags=watching_first_post_tags,
                        tracking_tags=tracking_tags,
                        regular_tags=regular_tags,
                        muted_tags=muted_tags,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class extras(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "visible_group_names",
                    }
                    
                    class properties:
                        
                        
                        class visible_group_names(
                            schemas.ListSchema
                        ):
                        
                        
                            class MetaOapg:
                                items = schemas.AnyTypeSchema
                        
                            def __new__(
                                cls,
                                arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'visible_group_names':
                                return super().__new__(
                                    cls,
                                    arg,
                                    _configuration=_configuration,
                                )
                        
                            def __getitem__(self, i: int) -> MetaOapg.items:
                                return super().__getitem__(i)
                        __annotations__ = {
                            "visible_group_names": visible_group_names,
                        }
                
                visible_group_names: MetaOapg.properties.visible_group_names
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["visible_group_names"]) -> MetaOapg.properties.visible_group_names: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["visible_group_names", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["visible_group_names"]) -> MetaOapg.properties.visible_group_names: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["visible_group_names", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    visible_group_names: typing.Union[MetaOapg.properties.visible_group_names, list, tuple, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'extras':
                    return super().__new__(
                        cls,
                        *args,
                        visible_group_names=visible_group_names,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "group": group,
                "extras": extras,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    extras: MetaOapg.properties.extras
    group: MetaOapg.properties.group
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["extras"]) -> MetaOapg.properties.extras: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group"]) -> MetaOapg.properties.group: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["extras"], typing_extensions.Literal["group"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["extras"]) -> MetaOapg.properties.extras: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group"]) -> MetaOapg.properties.group: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["extras"], typing_extensions.Literal["group"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        extras: typing.Union[MetaOapg.properties.extras, dict, frozendict.frozendict, ],
        group: typing.Union[MetaOapg.properties.group, dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs,
    ) -> 'GroupsGetGroupByIdResponse':
        return super().__new__(
            cls,
            *args,
            extras=extras,
            group=group,
            _configuration=_configuration,
        )
