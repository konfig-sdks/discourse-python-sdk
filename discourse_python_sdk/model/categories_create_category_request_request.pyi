# coding: utf-8

"""
    Discourse API Documentation

    This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 

    The version of the OpenAPI document: latest
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from discourse_python_sdk import schemas  # noqa: F401


class CategoriesCreateCategoryRequestRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "name",
        }
        
        class properties:
            name = schemas.StrSchema
            color = schemas.StrSchema
            text_color = schemas.StrSchema
            parent_category_id = schemas.IntSchema
            allow_badges = schemas.BoolSchema
            slug = schemas.StrSchema
            topic_featured_links_allowed = schemas.BoolSchema
            
            
            class permissions(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        everyone = schemas.IntSchema
                        staff = schemas.IntSchema
                        __annotations__ = {
                            "everyone": everyone,
                            "staff": staff,
                        }
                    additional_properties = schemas.AnyTypeSchema
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["everyone"]) -> MetaOapg.properties.everyone: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["staff"]) -> MetaOapg.properties.staff: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["everyone"], typing_extensions.Literal["staff"], str, ]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["everyone"]) -> typing.Union[MetaOapg.properties.everyone, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["staff"]) -> typing.Union[MetaOapg.properties.staff, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["everyone"], typing_extensions.Literal["staff"], str, ]):
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    everyone: typing.Union[MetaOapg.properties.everyone, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    staff: typing.Union[MetaOapg.properties.staff, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                ) -> 'permissions':
                    return super().__new__(
                        cls,
                        *args,
                        everyone=everyone,
                        staff=staff,
                        _configuration=_configuration,
                        **kwargs,
                    )
            search_priority = schemas.IntSchema
            
            
            class form_template_ids(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.AnyTypeSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'form_template_ids':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "name": name,
                "color": color,
                "text_color": text_color,
                "parent_category_id": parent_category_id,
                "allow_badges": allow_badges,
                "slug": slug,
                "topic_featured_links_allowed": topic_featured_links_allowed,
                "permissions": permissions,
                "search_priority": search_priority,
                "form_template_ids": form_template_ids,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["text_color"]) -> MetaOapg.properties.text_color: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parent_category_id"]) -> MetaOapg.properties.parent_category_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allow_badges"]) -> MetaOapg.properties.allow_badges: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["slug"]) -> MetaOapg.properties.slug: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["topic_featured_links_allowed"]) -> MetaOapg.properties.topic_featured_links_allowed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permissions"]) -> MetaOapg.properties.permissions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["search_priority"]) -> MetaOapg.properties.search_priority: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["form_template_ids"]) -> MetaOapg.properties.form_template_ids: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name"], typing_extensions.Literal["color"], typing_extensions.Literal["text_color"], typing_extensions.Literal["parent_category_id"], typing_extensions.Literal["allow_badges"], typing_extensions.Literal["slug"], typing_extensions.Literal["topic_featured_links_allowed"], typing_extensions.Literal["permissions"], typing_extensions.Literal["search_priority"], typing_extensions.Literal["form_template_ids"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["color"]) -> typing.Union[MetaOapg.properties.color, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["text_color"]) -> typing.Union[MetaOapg.properties.text_color, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parent_category_id"]) -> typing.Union[MetaOapg.properties.parent_category_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allow_badges"]) -> typing.Union[MetaOapg.properties.allow_badges, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["slug"]) -> typing.Union[MetaOapg.properties.slug, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["topic_featured_links_allowed"]) -> typing.Union[MetaOapg.properties.topic_featured_links_allowed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permissions"]) -> typing.Union[MetaOapg.properties.permissions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["search_priority"]) -> typing.Union[MetaOapg.properties.search_priority, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["form_template_ids"]) -> typing.Union[MetaOapg.properties.form_template_ids, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name"], typing_extensions.Literal["color"], typing_extensions.Literal["text_color"], typing_extensions.Literal["parent_category_id"], typing_extensions.Literal["allow_badges"], typing_extensions.Literal["slug"], typing_extensions.Literal["topic_featured_links_allowed"], typing_extensions.Literal["permissions"], typing_extensions.Literal["search_priority"], typing_extensions.Literal["form_template_ids"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        color: typing.Union[MetaOapg.properties.color, str, schemas.Unset] = schemas.unset,
        text_color: typing.Union[MetaOapg.properties.text_color, str, schemas.Unset] = schemas.unset,
        parent_category_id: typing.Union[MetaOapg.properties.parent_category_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        allow_badges: typing.Union[MetaOapg.properties.allow_badges, bool, schemas.Unset] = schemas.unset,
        slug: typing.Union[MetaOapg.properties.slug, str, schemas.Unset] = schemas.unset,
        topic_featured_links_allowed: typing.Union[MetaOapg.properties.topic_featured_links_allowed, bool, schemas.Unset] = schemas.unset,
        permissions: typing.Union[MetaOapg.properties.permissions, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        search_priority: typing.Union[MetaOapg.properties.search_priority, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        form_template_ids: typing.Union[MetaOapg.properties.form_template_ids, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs,
    ) -> 'CategoriesCreateCategoryRequestRequest':
        return super().__new__(
            cls,
            *args,
            name=name,
            color=color,
            text_color=text_color,
            parent_category_id=parent_category_id,
            allow_badges=allow_badges,
            slug=slug,
            topic_featured_links_allowed=topic_featured_links_allowed,
            permissions=permissions,
            search_priority=search_priority,
            form_template_ids=form_template_ids,
            _configuration=_configuration,
        )
