# coding: utf-8

"""
    Discourse API Documentation

    This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 

    The version of the OpenAPI document: latest
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from discourse_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from discourse_python_sdk.api_response import AsyncGeneratorResponse
from discourse_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from discourse_python_sdk import schemas  # noqa: F401

from discourse_python_sdk.model.users_delete_user_by_id_json_request import UsersDeleteUserByIdJsonRequest as UsersDeleteUserByIdJsonRequestSchema
from discourse_python_sdk.model.users_delete_user_by_id_json_response import UsersDeleteUserByIdJsonResponse as UsersDeleteUserByIdJsonResponseSchema

from discourse_python_sdk.type.users_delete_user_by_id_json_response import UsersDeleteUserByIdJsonResponse
from discourse_python_sdk.type.users_delete_user_by_id_json_request import UsersDeleteUserByIdJsonRequest

from ...api_client import Dictionary
from discourse_python_sdk.pydantic.users_delete_user_by_id_json_request import UsersDeleteUserByIdJsonRequest as UsersDeleteUserByIdJsonRequestPydantic
from discourse_python_sdk.pydantic.users_delete_user_by_id_json_response import UsersDeleteUserByIdJsonResponse as UsersDeleteUserByIdJsonResponsePydantic

# Path params
IdSchema = schemas.IntSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'id': typing.Union[IdSchema, decimal.Decimal, int, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_id = api_client.PathParameter(
    name="id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=IdSchema,
    required=True,
)
# body param
SchemaForRequestBodyApplicationJson = UsersDeleteUserByIdJsonRequestSchema


request_body_users_delete_user_by_id_json_request = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
)
SchemaFor200ResponseBodyApplicationJson = UsersDeleteUserByIdJsonResponseSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: UsersDeleteUserByIdJsonResponse


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: UsersDeleteUserByIdJsonResponse


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _delete_user_by_id_json_mapped_args(
        self,
        id: int,
        delete_posts: typing.Optional[bool] = None,
        block_email: typing.Optional[bool] = None,
        block_urls: typing.Optional[bool] = None,
        block_ip: typing.Optional[bool] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _path_params = {}
        _body = {}
        if delete_posts is not None:
            _body["delete_posts"] = delete_posts
        if block_email is not None:
            _body["block_email"] = block_email
        if block_urls is not None:
            _body["block_urls"] = block_urls
        if block_ip is not None:
            _body["block_ip"] = block_ip
        args.body = _body
        if id is not None:
            _path_params["id"] = id
        args.path = _path_params
        return args

    async def _adelete_user_by_id_json_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Delete a user
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'delete'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/admin/users/{id}.json',
            body=body,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_users_delete_user_by_id_json_request.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _delete_user_by_id_json_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Delete a user
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'delete'.upper()
        _headers.add('Content-Type', content_type)
    
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/admin/users/{id}.json',
            body=body,
            headers=_headers,
        )
        if body is not schemas.unset:
            serialized_data = request_body_users_delete_user_by_id_json_request.serialize(body, content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class DeleteUserByIdJsonRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def adelete_user_by_id_json(
        self,
        id: int,
        delete_posts: typing.Optional[bool] = None,
        block_email: typing.Optional[bool] = None,
        block_urls: typing.Optional[bool] = None,
        block_ip: typing.Optional[bool] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._delete_user_by_id_json_mapped_args(
            id=id,
            delete_posts=delete_posts,
            block_email=block_email,
            block_urls=block_urls,
            block_ip=block_ip,
        )
        return await self._adelete_user_by_id_json_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def delete_user_by_id_json(
        self,
        id: int,
        delete_posts: typing.Optional[bool] = None,
        block_email: typing.Optional[bool] = None,
        block_urls: typing.Optional[bool] = None,
        block_ip: typing.Optional[bool] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._delete_user_by_id_json_mapped_args(
            id=id,
            delete_posts=delete_posts,
            block_email=block_email,
            block_urls=block_urls,
            block_ip=block_ip,
        )
        return self._delete_user_by_id_json_oapg(
            body=args.body,
            path_params=args.path,
        )

class DeleteUserByIdJson(BaseApi):

    async def adelete_user_by_id_json(
        self,
        id: int,
        delete_posts: typing.Optional[bool] = None,
        block_email: typing.Optional[bool] = None,
        block_urls: typing.Optional[bool] = None,
        block_ip: typing.Optional[bool] = None,
        validate: bool = False,
        **kwargs,
    ) -> UsersDeleteUserByIdJsonResponsePydantic:
        raw_response = await self.raw.adelete_user_by_id_json(
            id=id,
            delete_posts=delete_posts,
            block_email=block_email,
            block_urls=block_urls,
            block_ip=block_ip,
            **kwargs,
        )
        if validate:
            return UsersDeleteUserByIdJsonResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(UsersDeleteUserByIdJsonResponsePydantic, raw_response.body)
    
    
    def delete_user_by_id_json(
        self,
        id: int,
        delete_posts: typing.Optional[bool] = None,
        block_email: typing.Optional[bool] = None,
        block_urls: typing.Optional[bool] = None,
        block_ip: typing.Optional[bool] = None,
        validate: bool = False,
    ) -> UsersDeleteUserByIdJsonResponsePydantic:
        raw_response = self.raw.delete_user_by_id_json(
            id=id,
            delete_posts=delete_posts,
            block_email=block_email,
            block_urls=block_urls,
            block_ip=block_ip,
        )
        if validate:
            return UsersDeleteUserByIdJsonResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(UsersDeleteUserByIdJsonResponsePydantic, raw_response.body)


class ApiFordelete(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def adelete(
        self,
        id: int,
        delete_posts: typing.Optional[bool] = None,
        block_email: typing.Optional[bool] = None,
        block_urls: typing.Optional[bool] = None,
        block_ip: typing.Optional[bool] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._delete_user_by_id_json_mapped_args(
            id=id,
            delete_posts=delete_posts,
            block_email=block_email,
            block_urls=block_urls,
            block_ip=block_ip,
        )
        return await self._adelete_user_by_id_json_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def delete(
        self,
        id: int,
        delete_posts: typing.Optional[bool] = None,
        block_email: typing.Optional[bool] = None,
        block_urls: typing.Optional[bool] = None,
        block_ip: typing.Optional[bool] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._delete_user_by_id_json_mapped_args(
            id=id,
            delete_posts=delete_posts,
            block_email=block_email,
            block_urls=block_urls,
            block_ip=block_ip,
        )
        return self._delete_user_by_id_json_oapg(
            body=args.body,
            path_params=args.path,
        )

