# coding: utf-8

"""
    Discourse API Documentation

    This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 

    The version of the OpenAPI document: latest
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from discourse_python_sdk.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from discourse_python_sdk.api_response import AsyncGeneratorResponse
from discourse_python_sdk import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from discourse_python_sdk import schemas  # noqa: F401

from discourse_python_sdk.model.users_get_list_of_users_response import UsersGetListOfUsersResponse as UsersGetListOfUsersResponseSchema

from discourse_python_sdk.type.users_get_list_of_users_response import UsersGetListOfUsersResponse

from ...api_client import Dictionary
from discourse_python_sdk.pydantic.users_get_list_of_users_response import UsersGetListOfUsersResponse as UsersGetListOfUsersResponsePydantic

from . import path

# Query params


class OrderSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "created": "CREATED",
            "last_emailed": "LAST_EMAILED",
            "seen": "SEEN",
            "username": "USERNAME",
            "email": "EMAIL",
            "trust_level": "TRUST_LEVEL",
            "days_visited": "DAYS_VISITED",
            "posts_read": "POSTS_READ",
            "topics_viewed": "TOPICS_VIEWED",
            "posts": "POSTS",
            "read_time": "READ_TIME",
        }
    
    @schemas.classproperty
    def CREATED(cls):
        return cls("created")
    
    @schemas.classproperty
    def LAST_EMAILED(cls):
        return cls("last_emailed")
    
    @schemas.classproperty
    def SEEN(cls):
        return cls("seen")
    
    @schemas.classproperty
    def USERNAME(cls):
        return cls("username")
    
    @schemas.classproperty
    def EMAIL(cls):
        return cls("email")
    
    @schemas.classproperty
    def TRUST_LEVEL(cls):
        return cls("trust_level")
    
    @schemas.classproperty
    def DAYS_VISITED(cls):
        return cls("days_visited")
    
    @schemas.classproperty
    def POSTS_READ(cls):
        return cls("posts_read")
    
    @schemas.classproperty
    def TOPICS_VIEWED(cls):
        return cls("topics_viewed")
    
    @schemas.classproperty
    def POSTS(cls):
        return cls("posts")
    
    @schemas.classproperty
    def READ_TIME(cls):
        return cls("read_time")


class AscSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "true": "TRUE",
        }
    
    @schemas.classproperty
    def TRUE(cls):
        return cls("true")
PageSchema = schemas.IntSchema
ShowEmailsSchema = schemas.BoolSchema
StatsSchema = schemas.BoolSchema
EmailSchema = schemas.StrSchema
IpSchema = schemas.StrSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'order': typing.Union[OrderSchema, str, ],
        'asc': typing.Union[AscSchema, str, ],
        'page': typing.Union[PageSchema, decimal.Decimal, int, ],
        'show_emails': typing.Union[ShowEmailsSchema, bool, ],
        'stats': typing.Union[StatsSchema, bool, ],
        'email': typing.Union[EmailSchema, str, ],
        'ip': typing.Union[IpSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_order = api_client.QueryParameter(
    name="order",
    style=api_client.ParameterStyle.FORM,
    schema=OrderSchema,
    explode=True,
)
request_query_asc = api_client.QueryParameter(
    name="asc",
    style=api_client.ParameterStyle.FORM,
    schema=AscSchema,
    explode=True,
)
request_query_page = api_client.QueryParameter(
    name="page",
    style=api_client.ParameterStyle.FORM,
    schema=PageSchema,
    explode=True,
)
request_query_show_emails = api_client.QueryParameter(
    name="show_emails",
    style=api_client.ParameterStyle.FORM,
    schema=ShowEmailsSchema,
    explode=True,
)
request_query_stats = api_client.QueryParameter(
    name="stats",
    style=api_client.ParameterStyle.FORM,
    schema=StatsSchema,
    explode=True,
)
request_query_email = api_client.QueryParameter(
    name="email",
    style=api_client.ParameterStyle.FORM,
    schema=EmailSchema,
    explode=True,
)
request_query_ip = api_client.QueryParameter(
    name="ip",
    style=api_client.ParameterStyle.FORM,
    schema=IpSchema,
    explode=True,
)
# Path params


class FlagSchema(
    schemas.EnumBase,
    schemas.StrSchema
):


    class MetaOapg:
        enum_value_to_name = {
            "active": "ACTIVE",
            "new": "NEW",
            "staff": "STAFF",
            "suspended": "SUSPENDED",
            "blocked": "BLOCKED",
            "suspect": "SUSPECT",
        }
    
    @schemas.classproperty
    def ACTIVE(cls):
        return cls("active")
    
    @schemas.classproperty
    def NEW(cls):
        return cls("new")
    
    @schemas.classproperty
    def STAFF(cls):
        return cls("staff")
    
    @schemas.classproperty
    def SUSPENDED(cls):
        return cls("suspended")
    
    @schemas.classproperty
    def BLOCKED(cls):
        return cls("blocked")
    
    @schemas.classproperty
    def SUSPECT(cls):
        return cls("suspect")
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'flag': typing.Union[FlagSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_flag = api_client.PathParameter(
    name="flag",
    style=api_client.ParameterStyle.SIMPLE,
    schema=FlagSchema,
    required=True,
)
SchemaFor200ResponseBodyApplicationJson = UsersGetListOfUsersResponseSchema


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    body: UsersGetListOfUsersResponse


@dataclass
class ApiResponseFor200Async(api_client.AsyncApiResponse):
    body: UsersGetListOfUsersResponse


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    response_cls_async=ApiResponseFor200Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _get_list_of_users_mapped_args(
        self,
        flag: str,
        order: typing.Optional[str] = None,
        asc: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        show_emails: typing.Optional[bool] = None,
        stats: typing.Optional[bool] = None,
        email: typing.Optional[str] = None,
        ip: typing.Optional[str] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _query_params = {}
        _path_params = {}
        if order is not None:
            _query_params["order"] = order
        if asc is not None:
            _query_params["asc"] = asc
        if page is not None:
            _query_params["page"] = page
        if show_emails is not None:
            _query_params["show_emails"] = show_emails
        if stats is not None:
            _query_params["stats"] = stats
        if email is not None:
            _query_params["email"] = email
        if ip is not None:
            _query_params["ip"] = ip
        if flag is not None:
            _path_params["flag"] = flag
        args.query = _query_params
        args.path = _path_params
        return args

    async def _aget_list_of_users_oapg(
        self,
            query_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Get a list of users
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_flag,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_order,
            request_query_asc,
            request_query_page,
            request_query_show_emails,
            request_query_stats,
            request_query_email,
            request_query_ip,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/admin/users/list/{flag}.json',
            headers=_headers,
        )
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _get_list_of_users_oapg(
        self,
            query_params: typing.Optional[dict] = {},
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Get a list of users
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_flag,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        prefix_separator_iterator = None
        for parameter in (
            request_query_order,
            request_query_asc,
            request_query_page,
            request_query_show_emails,
            request_query_stats,
            request_query_email,
            request_query_ip,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'get'.upper()
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/admin/users/list/{flag}.json',
            headers=_headers,
        )
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            prefix_separator_iterator=prefix_separator_iterator,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class GetListOfUsersRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def aget_list_of_users(
        self,
        flag: str,
        order: typing.Optional[str] = None,
        asc: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        show_emails: typing.Optional[bool] = None,
        stats: typing.Optional[bool] = None,
        email: typing.Optional[str] = None,
        ip: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._get_list_of_users_mapped_args(
            flag=flag,
            order=order,
            asc=asc,
            page=page,
            show_emails=show_emails,
            stats=stats,
            email=email,
            ip=ip,
        )
        return await self._aget_list_of_users_oapg(
            query_params=args.query,
            path_params=args.path,
            **kwargs,
        )
    
    def get_list_of_users(
        self,
        flag: str,
        order: typing.Optional[str] = None,
        asc: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        show_emails: typing.Optional[bool] = None,
        stats: typing.Optional[bool] = None,
        email: typing.Optional[str] = None,
        ip: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._get_list_of_users_mapped_args(
            flag=flag,
            order=order,
            asc=asc,
            page=page,
            show_emails=show_emails,
            stats=stats,
            email=email,
            ip=ip,
        )
        return self._get_list_of_users_oapg(
            query_params=args.query,
            path_params=args.path,
        )

class GetListOfUsers(BaseApi):

    async def aget_list_of_users(
        self,
        flag: str,
        order: typing.Optional[str] = None,
        asc: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        show_emails: typing.Optional[bool] = None,
        stats: typing.Optional[bool] = None,
        email: typing.Optional[str] = None,
        ip: typing.Optional[str] = None,
        validate: bool = False,
        **kwargs,
    ) -> UsersGetListOfUsersResponsePydantic:
        raw_response = await self.raw.aget_list_of_users(
            flag=flag,
            order=order,
            asc=asc,
            page=page,
            show_emails=show_emails,
            stats=stats,
            email=email,
            ip=ip,
            **kwargs,
        )
        if validate:
            return RootModel[UsersGetListOfUsersResponsePydantic](raw_response.body).root
        return api_client.construct_model_instance(UsersGetListOfUsersResponsePydantic, raw_response.body)
    
    
    def get_list_of_users(
        self,
        flag: str,
        order: typing.Optional[str] = None,
        asc: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        show_emails: typing.Optional[bool] = None,
        stats: typing.Optional[bool] = None,
        email: typing.Optional[str] = None,
        ip: typing.Optional[str] = None,
        validate: bool = False,
    ) -> UsersGetListOfUsersResponsePydantic:
        raw_response = self.raw.get_list_of_users(
            flag=flag,
            order=order,
            asc=asc,
            page=page,
            show_emails=show_emails,
            stats=stats,
            email=email,
            ip=ip,
        )
        if validate:
            return RootModel[UsersGetListOfUsersResponsePydantic](raw_response.body).root
        return api_client.construct_model_instance(UsersGetListOfUsersResponsePydantic, raw_response.body)


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def aget(
        self,
        flag: str,
        order: typing.Optional[str] = None,
        asc: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        show_emails: typing.Optional[bool] = None,
        stats: typing.Optional[bool] = None,
        email: typing.Optional[str] = None,
        ip: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor200Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._get_list_of_users_mapped_args(
            flag=flag,
            order=order,
            asc=asc,
            page=page,
            show_emails=show_emails,
            stats=stats,
            email=email,
            ip=ip,
        )
        return await self._aget_list_of_users_oapg(
            query_params=args.query,
            path_params=args.path,
            **kwargs,
        )
    
    def get(
        self,
        flag: str,
        order: typing.Optional[str] = None,
        asc: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        show_emails: typing.Optional[bool] = None,
        stats: typing.Optional[bool] = None,
        email: typing.Optional[str] = None,
        ip: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor200,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        args = self._get_list_of_users_mapped_args(
            flag=flag,
            order=order,
            asc=asc,
            page=page,
            show_emails=show_emails,
            stats=stats,
            email=email,
            ip=ip,
        )
        return self._get_list_of_users_oapg(
            query_params=args.query,
            path_params=args.path,
        )

