# coding: utf-8

"""
    Discourse API Documentation

    This page contains the documentation on how to use Discourse through API calls.  > Note: For any endpoints not listed you can follow the [reverse engineer the Discourse API](https://meta.discourse.org/t/-/20576) guide to figure out how to use an API endpoint.  ### Request Content-Type  The Content-Type for POST and PUT requests can be set to `application/x-www-form-urlencoded`, `multipart/form-data`, or `application/json`.  ### Endpoint Names and Response Content-Type  Most API endpoints provide the same content as their HTML counterparts. For example the URL `/categories` serves a list of categories, the `/categories.json` API provides the same information in JSON format.  Instead of sending API requests to `/categories.json` you may also send them to `/categories` and add an `Accept: application/json` header to the request to get the JSON response. Sending requests with the `Accept` header is necessary if you want to use URLs for related endpoints returned by the API, such as pagination URLs. These URLs are returned without the `.json` prefix so you need to add the header in order to get the correct response format.  ### Authentication  Some endpoints do not require any authentication, pretty much anything else will require you to be authenticated.  To become authenticated you will need to create an API Key from the admin panel.  Once you have your API Key you can pass it in along with your API Username as an HTTP header like this:  ``` curl -X GET \"http://127.0.0.1:3000/admin/users/list/active.json\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" ```  and this is how POST requests will look:  ``` curl -X POST \"http://127.0.0.1:3000/categories\" \\ -H \"Content-Type: multipart/form-data;\" \\ -H \"Api-Key: 714552c6148e1617aeab526d0606184b94a80ec048fc09894ff1a72b740c5f19\" \\ -H \"Api-Username: system\" \\ -F \"name=89853c20-4409-e91a-a8ea-f6cdff96aaaa\" \\ -F \"color=49d9e9\" \\ -F \"text_color=f0fcfd\" ```  ### Boolean values  If an endpoint accepts a boolean be sure to specify it as a lowercase `true` or `false` value unless noted otherwise. 

    The version of the OpenAPI document: latest
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING


class RequiredUsersGetUserByIdJsonResponse(TypedDict):
    title: typing.Union[bool, date, datetime, dict, float, int, list, str, None]

    id: int

    username: str

    name: typing.Union[bool, date, datetime, dict, float, int, list, str, None]

    avatar_template: str

    active: bool

    admin: bool

    moderator: bool

    last_seen_at: typing.Union[bool, date, datetime, dict, float, int, list, str, None]

    last_emailed_at: typing.Union[bool, date, datetime, dict, float, int, list, str, None]

    created_at: str

    last_seen_age: typing.Union[bool, date, datetime, dict, float, int, list, str, None]

    last_emailed_age: typing.Union[bool, date, datetime, dict, float, int, list, str, None]

    created_at_age: typing.Union[bool, date, datetime, dict, float, int, list, str, None]

    trust_level: int

    manual_locked_trust_level: typing.Union[bool, date, datetime, dict, float, int, list, str, None]

    time_read: int

    staged: bool

    days_visited: int

    posts_read_count: int

    topics_entered: int

    post_count: int

    can_send_activation_email: bool

    can_activate: bool

    can_deactivate: bool

    ip_address: str

    registration_ip_address: typing.Union[bool, date, datetime, dict, float, int, list, str, None]

    can_grant_admin: bool

    can_revoke_admin: bool

    can_grant_moderation: bool

    can_revoke_moderation: bool

    can_impersonate: bool

    like_count: int

    like_given_count: int

    topic_count: int

    flags_given_count: int

    flags_received_count: int

    private_topics_count: int

    can_delete_all_posts: bool

    can_be_deleted: bool

    can_be_anonymized: bool

    can_be_merged: bool

    full_suspend_reason: typing.Union[bool, date, datetime, dict, float, int, list, str, None]

    silence_reason: typing.Union[bool, date, datetime, dict, float, int, list, str, None]

    primary_group_id: typing.Union[bool, date, datetime, dict, float, int, list, str, None]

    badge_count: int

    warnings_received_count: int

    bounce_score: typing.Union[bool, date, datetime, dict, float, int, list, str, None]

    reset_bounce_score_after: typing.Union[bool, date, datetime, dict, float, int, list, str, None]

    can_view_action_logs: bool

    can_disable_second_factor: bool

    can_delete_sso_record: bool

    api_key_count: int

    single_sign_on_record: typing.Union[bool, date, datetime, dict, float, int, list, str, None]

    approved_by: typing.Dict[str, typing.Any]

    suspended_by: typing.Union[bool, date, datetime, dict, float, int, list, str, None]

    silenced_by: typing.Union[bool, date, datetime, dict, float, int, list, str, None]

    groups: typing.List[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]]

    external_ids: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

class OptionalUsersGetUserByIdJsonResponse(TypedDict, total=False):
    associated_accounts: typing.List[typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

    post_edits_count: typing.Union[bool, date, datetime, dict, float, int, list, str, None]

    penalty_counts: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

    next_penalty: str

    tl3_requirements: typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]

class UsersGetUserByIdJsonResponse(RequiredUsersGetUserByIdJsonResponse, OptionalUsersGetUserByIdJsonResponse):
    pass
